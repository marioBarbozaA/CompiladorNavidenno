import java_cup.runtime.*;

action code {:
  public void hola() {
    System.out.println("Hola");
  }
  public void adios() {
    System.out.println("Adios");
  }
:}

parser code {:
  Lexer lex;

  public parser(Lexer lex) {
    this.lex = lex;
    this.symbolFactory = new DefaultSymbolFactory();
  }
:}
init with {: :};

scan with {: return lex.next_token(); :};

/* Terminales (tokens retornados por el scanner) */

/* Definición de tokens con temática navideña */


// Operadores aritméticos binarios: nombres de renos
terminal RODOLFO, TRUENO, RELAMPAGO, RAYO, DANZARIN, SALTARIN, COMETA; // +, -, *, /, %, **, //

// Operadores aritméticos unarios: grinch, quien
terminal GRINCH, QUIEN; // -, +

// Operadores relacionales: elfos de santa
terminal ELFO_MAYOR, ELFO_MENOR, ELFO_IGUAL, ELFO_NO_IGUAL, ELFO_MAYOR_IGUAL, ELFO_MENOR_IGUAL; // >, <, ==, !=, >=, <=

// Operadores lógicos: reyes magos
terminal REY_MELCHOR, REY_GASPAR, REY_BALTASAR; // &&, ||, !

// identificador: persona
terminal PERSONA; // Identificador (nombre de variable, función, etc.)

// tipos: nombres de papá noel
terminal COLACHO, SANTA, ; // Tipos de datos (int, string, etc.)

/* keyword */
terminal  NAVIDAD, FESTIVAL, FIESTA; // Tipado de atributos y metodos abstract, public, private

// literales (valorar caso especial bool): nombres de papá noel con un prefijo l_
terminal L_VIEJITO_PASCUERO, L_JOULUPUKKI; // true, false

// paréntesis: abrecuento, cierrecuento
terminal ABRE_CUENTO, CIERRE_CUENTO; // (, )

// paréntesis cuadrado: abreempaque, cierraempaque
terminal ABRE_EMPAQUE, CIERRA_EMPAQUE; // [, ]

// llaves: abreregalo, cierraregalo
terminal ABRE_REGALO, CIERRA_REGALO; // {, }

// lexemas de estructuras de control: elfo, hada, duende, envuelve, hace, revisa, envia, corta
terminal ELFO, HADA, DUENDE, ENVUELVE, HACE, REVISA, ENVIA, CORTA; // if, else, for, while, do, switch, return, break

// print, read: narra, escucha
terminal NARRA, ESCUCHA; // print, read

// lexema de fin de expresión: finregalo
terminal FIN_REGALO; // ;

// lexema de asignar: entrega
terminal ENTREGA; // =

// lexema separador: separador
terminal SEPARADOR; // ,


/* Otros para Lexer */
terminal BREAK, BOOLEAN;

/* No terminales */
non terminal SantaScript;

// Producción de inicio
startwith SantaScript;

SantaScript ::= {:
                    hola(); 
                :} 
                IDENTIFICADOR 
                {: 
                    adios(); 
                :}
                ;
