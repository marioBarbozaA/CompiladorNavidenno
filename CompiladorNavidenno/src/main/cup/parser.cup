package com.navidad;

import static com.navidad.Constantes.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.io.IOException;
import java.io.FileWriter;
import java.util.List;


/* Clase principal del compilador */
action code {:

  public void hola() {
    System.out.println("Hola");
  }
  public void adios() {
    System.out.println("Adios\n");
  }
  
  public void errorNavideno(String mensaje){
    System.err.println("Santa te ha traido un carbon semantico: "+mensaje);
  }
    HashMap<String, ArrayList<SymbolObject>> listaTablasSimbolos = new HashMap<String, ArrayList<SymbolObject>>();
    String currentHash = "";
    FabricarFuncion ultimaFuncion = null;
    HashMap<String, FabricarFuncion> fabricarFuncionMap = new HashMap<String, FabricarFuncion>();

    public void agregarFuncion(FabricarFuncion funcion) {
        fabricarFuncionMap.put(funcion.getNombre(), funcion);
        ultimaFuncion = funcion; 
    }

    public FabricarFuncion buscarFuncion(String nombreFuncion) {
        return fabricarFuncionMap.get(nombreFuncion);
    }


    public FabricarFuncion funcionActual() {
        return ultimaFuncion;
    }


    public tipoPrimario getTipo(String nombre, boolean esError) {
        for (SymbolObject value : listaTablasSimbolos.get(currentHash)) {
            if (value.getID().equals(nombre)) {
              return HerramientasFabrica.clasificarTipo(value.getTipo());
            }
        }
        if (esError){
          errorNavideno("Variable no declarada: " + nombre);
        }
        return tipoPrimario.NULL;
    }

    public tipoPrimario validarTipado(String operacion, FabricarExpresion expr1, FabricarExpresion expr2, ArrayList<tipoPrimario> tiposPermitidos) {
    if (tiposPermitidos.contains(expr1.getTipado()) && tiposPermitidos.contains(expr2.getTipado())) {
        return expr1.getTipado();
    } else {
      errorNavideno("Tipos no compatibles en la operacion: " + operacion);
        return tipoPrimario.NULL;
    }
}
    public tipoPrimario validarTipadoParaExpresiones(Object n, Object m, String operacion, ArrayList<tipoPrimario> tiposPermitidos) {

        FabricarExpresion expresionN = (FabricarExpresion)n;
        FabricarExpresion expresionM = (FabricarExpresion)m;
        return validarTipado(operacion, expresionN, expresionM, tiposPermitidos);
    }
    
    public void imprimirTablasSimbolos(){
      for (String key : listaTablasSimbolos.keySet()) {
        System.out.println("Tabla de simbolos: " + key);
        System.out.println("Variables: ");
        for (SymbolObject variable : listaTablasSimbolos.get(key)) {
          System.out.println(variable.toString());
        }
        System.out.println(" ");
      }
  }
    public void cambiarContexto(String nombreFuncion) {
        currentHash = nombreFuncion;
        listaTablasSimbolos.put(nombreFuncion, new ArrayList<SymbolObject>());
    }

    public void annadirSymbol(SymbolObject symbol) {
    listaTablasSimbolos.get(currentHash).add(symbol);
  }

public void exportarTablaSimbolosHTML() {
    List<String[]> data = new ArrayList<>();
    data.add(new String[]{"Tabla", "Tipo Entrada", "Nombre", "Tipo Dato"});

    for (Map.Entry<String, ArrayList<SymbolObject>> entry : listaTablasSimbolos.entrySet()) {
        for (SymbolObject value : entry.getValue()) {
            data.add(new String[]{entry.getKey(), value.getEntrada(), value.getID(), value.getTipo()});
        }
    }

    StringBuilder htmlBuilder = new StringBuilder();
    htmlBuilder.append("<html><head><title>Tabla de Símbolos</title>");
    htmlBuilder.append("<style>");
    htmlBuilder.append("@import url('https://fonts.googleapis.com/css?family=Roboto:400,700');");
    htmlBuilder.append("table { border-collapse: separate; width: 100%; box-shadow: 0 2px 3px rgba(0,0,0,0.1);");
    htmlBuilder.append("font-family: 'Roboto', sans-serif; color: #333; margin: 25px 0; border-spacing: 0; }");
    htmlBuilder.append("thead { background-color: #8A33FF; color: #FFF; }");
    htmlBuilder.append("th { font-weight: 700; padding: 12px 15px; text-align: left; }");
    htmlBuilder.append("td { border-top: 1px solid #DDD; padding: 12px 15px; text-align: left; }");
    htmlBuilder.append("tbody tr:nth-child(odd) { background-color: #F6F6F6; }");
    htmlBuilder.append("tbody tr:nth-child(even) { background-color: #E9E9E9; }");
    htmlBuilder.append("</style></head><body><table>");

    // Aquí añadimos la cabecera de la tabla
    htmlBuilder.append("<thead><tr>");
    for (String header : data.get(0)) {
        htmlBuilder.append("<th>").append(header).append("</th>");
    }
    htmlBuilder.append("</tr></thead><tbody>");

    // Luego el resto de los datos
    for (int i = 1; i < data.size(); i++) {
        String[] row = data.get(i);
        htmlBuilder.append("<tr>");
        for (String cell : row) {
            htmlBuilder.append("<td>").append(cell).append("</td>");
        }
        htmlBuilder.append("</tr>");
    }

    htmlBuilder.append("</tbody></table></body></html>");

    // Escribe el HTML en un archivo
    try (FileWriter writer = new FileWriter("src/test/java/com/navidad/tabla_simbolos.html")) {
        writer.write(htmlBuilder.toString());
    } catch (IOException e) {
        e.printStackTrace();
    }

    System.out.println("Tabla de símbolos exportada a tabla_simbolos.html");
}

  
:}

parser code {:

  // https://www2.cs.tum.edu/projects/cup/docs.php#errors:~:text=4.%20Customizing%20the%20Parser

  Lexer lex;
  StringBuilder dataSegment = new StringBuilder();
  StringBuilder mainSegment = new StringBuilder();

  public parser(Lexer lex) {
    this.lex = lex;
    this.symbolFactory = new DefaultSymbolFactory();
  }

  // Se tiene que hacer un override a los metodos para atrapar los errores
  // Esta llama a report_error("Syntax error", null); // creo que se puede hacer override de report_fatal_error

  //Tener en cuenta la sintaxis de los errores en la documentacion de CUP
  // La expresion de error se deja al final de cada produccion
  //Es diferente al ejemplo del profe, no es necesario tener que crear una expresion de error para cada produccion
  /*
  stmt ::= expr SEMI | while_stmt SEMI | if_stmt SEMI | ... |
	     error SEMI
	     ;
  */
  public void syntax_error(Symbol cur_token){
    if (cur_token.value == null) {
      System.err.println("Chimenea cerrada en linea " + cur_token.left + ", columna " + cur_token.right + ": " + cur_token.sym);
      return;
    } else {
      System.err.println("Chimenea cerrada en linea " + cur_token.left + ", columna " + cur_token.right + ": " + cur_token.sym + ", valor: " + cur_token.value);
      System.out.println("Buscando otra entrada...");
      return;
    }    
  } 

  // este llama a report_fatal_error("Couldn't repair and continue parse", null); // creo que se puede hacer override de report_fatal_error.
  public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
    if (cur_token.value == null) {
       throw new Exception("No se han entregado regalos en esta casa... " );
    } else {
      throw new Exception("Chimenea cerrada en linea " + cur_token.left + ", columna " + cur_token.right + ": " + cur_token.sym + ", valor: " + cur_token.value);
    }
   
  }

:}

scan with {: return lex.next_token(); :};
init with {: :};



/* Terminales (tokens retornados por el scanner) */

/* Definición de tokens con temática navideña */


// Operadores aritméticos binarios: nombres de renos
terminal RODOLFO_SUM, TRUENO_DECREASE, RELAMPAGO_INT_DIVISION, RAYO_FLOAT_DIVISION, SALTARIN_ELEVATE, COMETA_PRODUCT, CUPIDO_MODULE; // +, -, //, /, **, *, ~(%) 
// identificador: persona
terminal PERSONA; // Identificador (nombre de variable, función, etc.)

// Operadores aritméticos unarios: grinch, quien
terminal GRINCH_DECREMENT, QUIEN_INCREMENT; // -(--), +(++)

// Operadores relacionales: elfos de santa
terminal ELFO_GREATER, ELFO_LESS, ELFO_EQUAL, ELFO_NOT_EQUAL, ELFO_GREATER_EQUAL, ELFO_LESS_EQUAL; // >, <, ==, !=, >=, <=

// Operadores lógicos: reyes magos
terminal REY_MELCHOR_COJUNCTION, REY_GASPAR_DISJUNCTION, REY_BALTASAR_NOT; // &&, ||, !

// tipos: nombres de papá noel
terminal COLACHO_INT,JOULUPUKKI_FLOAT, PAPA_NOEL_BOOLEAN, CLAUS_CHAR, SANTA_STRING, VIEJITO_PASCUERO_ARRAY; // Tipos de datos (int, string, BOOLEAN) todavia no esta 

// tipos de datos literales
terminal L_COLACHO_INT , L_JOULUPUKKI_FLOAT, L_CLAUS_CHAR, L_SANTA_STRING, L_VIEJITO_PASCUERO_ARRAY; // Tipos de datos literales (1, 1.0, true, 'a', "hola", [1,2,3]) todavia no esta
/* keyword */
terminal  NAVIDAD_ABSTRACT, FESTIVA_PUBLICL, FIESTA_PRIVATE; // Tipado de atributos y metodos abstract, public, private

// literales (valorar caso especial bool): nombres de papá noel con un prefijo l_
terminal PAPA_NOEL_TRUE, PAPA_NOEL_FALSE; // true, false 

// paréntesis: abrecuento, cierrecuento
terminal ABRE_CUENTO, CIERRE_CUENTO; // (, )

// paréntesis cuadrado: abreempaque, cierraempaque
terminal ABRE_EMPAQUE, CIERRA_EMPAQUE; // [, ]

// llaves: abreregalo, cierraregalo
terminal ABRE_REGALO, CIERRA_REGALO; // {, }

// lexemas de estructuras de control: elfo, hada, duende, envuelve, hace, revisa, envia, corta
terminal ELFO_IF, HADA_ELIF, DUENDE_ELSE, ENVUELVE_FOR, HACE_DO, REVISA_UNTIL, ENVIA_RETURN, CORTA_BREAK; // if, else, for, while, do, switch, return, break

// print, read: narra, escucha
terminal NARRA_PRINT, ESCUCHA_READ; // print, read No esta 

// lexema de fin de expresión: finregalo
terminal FIN_REGALO; // ;(|) Sirve para Finalizar 

// lexema de asignar: entrega
terminal ENTREGA; // =    //ASSIGMENT <= 

// lexema separador: separador
terminal SEPARADOR_BASTON; // , separa entre funciones, parametros, etc.

//lexema de null
terminal CARBON; // 

//Lexema de funcion
terminal FUNCTION_VILLANCICOS;

//lexema de local variable
terminal LOCAL_MUERDAGO;

//Lexeman de error
terminal MEDIAS_ERROR;
//lexema de main
terminal ESTRELLA_MAIN;

//Empezamos la Tarea 1 de definición de Gramatica
non terminal NAVIDAD;// Empezar con navidad

//No terminales para literales y tipos de datos
non terminal T_COPO, l_COPO, ARG_COPO;

//No terminales de Funciones
non terminal FUNCIONES_BOLSA_NAVIDENNA, FUNCION_REGALO, DEF_JUGUETE, CODIGO_ENVOLTURA; 

//No terminales de parametros
non terminal PARAMETROS_PALETAS, PARAMETRO_PALETA;

//lineas codigo 
non terminal LINEAS_LAZOS, LINEA_LAZO;

//Asignar variables 
non terminal ASIGNACION_GORRO;
// flujo de control
non terminal RETORNO_BURRITO_SABANERO, DO_UNTIL_FANTASMA_PASADO, FOR_FANTASMA_PRESENTE, CALL_FUNCTION_FANTASMA_FUTURO;
non terminal IF_JUANITO_ESCARCHA, ELIF_BATMAN, ELIF_MULTI_JACK_FROST, ELSE_SCROOGE; // SI, BATMAN ES UNA PELI NAVIDEÑA ;)
//expresiones 
non terminal EXPRESION_BOTA; 

non terminal  ELEMENTO_ARRAY_DULCE, l_ARRAY_TAMAL, ARRAY_OPERATION_CASCABEL; // a[0], {1,2,3}, --a[0] | ++a[1]


non terminal EXPRESION_ARIT_REGALOPRIN, EXPRESION_REL_REGALO_COMPRADO, EXPRESION_LOG_REGALO_MANUAL;



//Precedencias 

precedence left RODOLFO_SUM, TRUENO_DECREASE;
precedence left RAYO_FLOAT_DIVISION, RELAMPAGO_INT_DIVISION, COMETA_PRODUCT;
precedence left SALTARIN_ELEVATE, CUPIDO_MODULE;
precedence left GRINCH_DECREMENT, QUIEN_INCREMENT;

precedence left ELFO_EQUAL,
                ELFO_GREATER,
                ELFO_LESS,
                ELFO_GREATER_EQUAL,
                ELFO_LESS_EQUAL,
                ELFO_NOT_EQUAL, 
                ELFO_LESS_EQUAL;

precedence left REY_MELCHOR_COJUNCTION;
precedence left REY_GASPAR_DISJUNCTION;
precedence left REY_BALTASAR_NOT;

// Producción de inicio
start with NAVIDAD;


NAVIDAD::= FUNCIONES_BOLSA_NAVIDENNA 
        {:
        hola();
        exportarTablaSimbolosHTML();
        imprimirTablasSimbolos();
        
        if (buscarFuncion("main") == null) {
          System.err.println("No se ha encontrado la funcion main");
        } 


        adios();
        :};

T_COPO::= COLACHO_INT:tipo
 {: RESULT = tipo;:}
 | JOULUPUKKI_FLOAT:tipo
 {: RESULT = tipo;:}
 | PAPA_NOEL_BOOLEAN:tipo
 {: RESULT = tipo;:}
 | CLAUS_CHAR:tipo
 {: RESULT = tipo;:}
 | SANTA_STRING:tipo
 {: RESULT = tipo;:}
 | VIEJITO_PASCUERO_ARRAY:tipo
 {: RESULT = tipo;:};

l_COPO::= L_COLACHO_INT:lit
  {: RESULT = lit; :}
| L_JOULUPUKKI_FLOAT:lit
  {: RESULT = lit; :}
| L_CLAUS_CHAR:lit
  {: RESULT = lit; :}
| L_SANTA_STRING:lit
  {: RESULT = lit; :}
| L_VIEJITO_PASCUERO_ARRAY:lit
  {: RESULT = lit; :}
| PAPA_NOEL_TRUE:lit
  {: RESULT = lit; :}
| PAPA_NOEL_FALSE:lit
  {: RESULT = lit; :}
;

ARG_COPO::= EXPRESION_BOTA | ARG_COPO SEPARADOR_BASTON EXPRESION_BOTA;

FUNCIONES_BOLSA_NAVIDENNA::= 
        FUNCION_REGALO 
        {:
        
        :}
        | 
        FUNCIONES_BOLSA_NAVIDENNA FUNCION_REGALO;

FUNCION_REGALO::= DEF_JUGUETE CODIGO_ENVOLTURA | error DEF_JUGUETE CODIGO_ENVOLTURA ; // function int myFuncion (){return 1}
 
DEF_JUGUETE::= FUNCTION_VILLANCICOS:Fun ESTRELLA_MAIN ABRE_CUENTO CIERRE_CUENTO  // FUNCTION MAIN ()   
              {:
              if (buscarFuncion("main") != null) {
                errorNavideno("Ya existe una funcion main");
              }
              else{
                cambiarContexto("main");
                RESULT = "main";
                annadirSymbol(new SymbolObject("function","int","main"));
                agregarFuncion(new FabricarFuncion("main", tipoPrimario.INT, true, new tipoPrimario[] {}));
              }
              
              :}

              |FUNCTION_VILLANCICOS:Fun T_COPO:Tipo PERSONA:id ABRE_CUENTO CIERRE_CUENTO  // function int myFuncion ()
              
              {:
                String tipoEvaluado = Tipo.toString();
                if (tipoEvaluado!="char" && tipoEvaluado!="int" && tipoEvaluado!="float" && tipoEvaluado!="bool") {
                  errorNavideno("Tipo no válido: " + tipoEvaluado);
                } else {

                    if (buscarFuncion(id.toString()) != null) {
                        errorNavideno("Ya existe una funcion con el nombre: " + id.toString());
                    } else {
                        cambiarContexto(id.toString());
                        RESULT = id.toString();
                        annadirSymbol(new SymbolObject("function",Tipo.toString(), id.toString()));
                        agregarFuncion(new FabricarFuncion(id.toString(), HerramientasFabrica.clasificarTipo(Tipo.toString()), false, new tipoPrimario[] {}));
                    }
                }

              :}
              |FUNCTION_VILLANCICOS:Fun T_COPO:Tipo PERSONA:id ABRE_CUENTO
              {:
                String tipoEvaluado = Tipo.toString();
                if (tipoEvaluado!="char" && tipoEvaluado!="int" && tipoEvaluado!="float" && tipoEvaluado!="bool") {
                  errorNavideno("Tipo no válido: " + tipoEvaluado);
                } else {

                    if (buscarFuncion(id.toString()) != null) {
                        errorNavideno("Ya existe una funcion con el nombre: " + id.toString());
                    } else {
                        cambiarContexto(id.toString());
                        RESULT = id.toString();
                        annadirSymbol(new SymbolObject("function",Tipo.toString(), id.toString()));
                        agregarFuncion(new FabricarFuncion(id.toString(), HerramientasFabrica.clasificarTipo(Tipo.toString()), false, new tipoPrimario[] {}));
                    }
                }
              cambiarContexto(id.toString());
              annadirSymbol(new SymbolObject("function",Tipo.toString(), id.toString()));
              :} PARAMETROS_PALETAS CIERRE_CUENTO ; // function int myFuncion (int a, int b)

PARAMETROS_PALETAS::= PARAMETRO_PALETA | PARAMETROS_PALETAS SEPARADOR_BASTON PARAMETRO_PALETA;

PARAMETRO_PALETA::= T_COPO:tipo PERSONA:id 
                {:
                annadirSymbol(new SymbolObject("param",tipo.toString(), id.toString()));
                // 
                funcionActual().agregarTipoParametro(HerramientasFabrica.clasificarTipo(tipo.toString()));
                agregarFuncion(funcionActual());
                
                :};

CODIGO_ENVOLTURA::= ABRE_REGALO LINEAS_LAZOS CIERRA_REGALO | ABRE_REGALO CIERRA_REGALO | ABRE_REGALO error CIERRA_REGALO ;//{CODIGO}

RETORNO_BURRITO_SABANERO::= ENVIA_RETURN EXPRESION_BOTA:expr
                            {:
                            tipoPrimario tipo = ((FabricarExpresion)expr).getTipado();
                            tipoPrimario retorno = funcionActual().getTipado(); 
                            if (retorno != tipo){
                              errorNavideno("El tipo de retorno no coincide con el tipo de la funcion en la linea");
                            }
                            else{
                              funcionActual().setRetorna(true);
                              agregarFuncion(funcionActual());
                            }
                            :}
                            | 
                            ENVIA_RETURN
                            {:

                            :}; // return 1| return;

LINEA_LAZO::= ASIGNACION_GORRO FIN_REGALO |  EXPRESION_BOTA FIN_REGALO | //a <= 1| |
              CORTA_BREAK FIN_REGALO | RETORNO_BURRITO_SABANERO FIN_REGALO | 
              FOR_FANTASMA_PRESENTE FIN_REGALO | DO_UNTIL_FANTASMA_PASADO FIN_REGALO |
              IF_JUANITO_ESCARCHA FIN_REGALO |
              error FIN_REGALO; // a <= 1| |

CALL_FUNCTION_FANTASMA_FUTURO::=PERSONA ABRE_CUENTO  CIERRE_CUENTO | // myFuncion()
                                PERSONA ABRE_CUENTO ARG_COPO CIERRE_CUENTO |//myfun(...)
                                NARRA_PRINT ABRE_CUENTO ARG_COPO CIERRE_CUENTO |//print(...)
                                NARRA_PRINT ABRE_CUENTO CIERRE_CUENTO | //print()
                                ESCUCHA_READ ABRE_CUENTO ARG_COPO CIERRE_CUENTO |//read(...)
                                ESCUCHA_READ ABRE_CUENTO CIERRE_CUENTO; //read()

DO_UNTIL_FANTASMA_PASADO::= HACE_DO CODIGO_ENVOLTURA REVISA_UNTIL ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO; // do {} until (x)

FOR_FANTASMA_PRESENTE::= ENVUELVE_FOR ABRE_CUENTO ASIGNACION_GORRO FIN_REGALO EXPRESION_BOTA FIN_REGALO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA; // for (a <= 0| a < 10| ++a){}

IF_JUANITO_ESCARCHA::= ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA | //if (a>b){}
                      ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA ELSE_SCROOGE |//if (a>b){} else{}
                      ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA ELIF_MULTI_JACK_FROST |//if (a>b){} elif(){} elif(){}
                      ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA ELIF_MULTI_JACK_FROST ELSE_SCROOGE;//if (a>b){} elif(){} else{}


ELIF_MULTI_JACK_FROST::= ELIF_BATMAN | ELIF_BATMAN ELIF_MULTI_JACK_FROST;
ELIF_BATMAN::= HADA_ELIF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA;
ELSE_SCROOGE::= DUENDE_ELSE CODIGO_ENVOLTURA;

LINEAS_LAZOS::= LINEA_LAZO | LINEAS_LAZOS LINEA_LAZO;

ASIGNACION_GORRO::= LOCAL_MUERDAGO T_COPO:tipo PERSONA:id    // local int a
                    {:
                    annadirSymbol(new SymbolObject("local",tipo.toString(), id.toString()));
                    :}
                    | LOCAL_MUERDAGO:local T_COPO:tipo PERSONA:id ENTREGA EXPRESION_BOTA  // local int a <= 1
                    {:
                    annadirSymbol(new SymbolObject("local",tipo.toString(), id.toString()));
                    :}
                    | LOCAL_MUERDAGO:local T_COPO:tipo ELEMENTO_ARRAY_DULCE:elem_array // local int a[1]  
                    {:
                    annadirSymbol(new SymbolObject("local",tipo.toString()+" arr", elem_array.toString()));
                    :}
                    | LOCAL_MUERDAGO:local T_COPO:tipo ELEMENTO_ARRAY_DULCE:elem_array ENTREGA l_ARRAY_TAMAL  // local int a[4] <= {1,2,3,4}
                    {:
                    annadirSymbol(new SymbolObject("local",tipo.toString()+" arr", elem_array.toString()));
                    :}
                    | PERSONA:id ENTREGA EXPRESION_BOTA // a <= 1| 
                    | ELEMENTO_ARRAY_DULCE:elem_array ENTREGA EXPRESION_BOTA // a[0] <= ++a[0]|
                    | ELEMENTO_ARRAY_DULCE:elem_array ENTREGA l_ARRAY_TAMAL; // a[4] <= {1,2,3,4}
 

EXPRESION_BOTA::= l_COPO:lit
                  {:
                    RESULT = lit;
                  :}
                  | PERSONA:id 
                  {:
                    if(getTipo(id.toString(), true) != tipoPrimario.NULL){
                      RESULT = new FabricarExpresion(id.toString(), getTipo(id.toString(), true), "PROBANDO");
                    }
                    else{
                      RESULT = new FabricarExpresion("null", tipoPrimario.NULL);
                    }
                  :}
                  | ELEMENTO_ARRAY_DULCE:elemento
                  {:
                    RESULT = elemento;
                  :}
                  | ABRE_CUENTO EXPRESION_BOTA:expr CIERRE_CUENTO 
                  {:
                    RESULT = expr;
                  :}

                  | CALL_FUNCTION_FANTASMA_FUTURO 

                  | EXPRESION_ARIT_REGALOPRIN:expresion_aritmetica
                  {:
                    RESULT = expresion_aritmetica;
                  :}
                  | EXPRESION_REL_REGALO_COMPRADO:expresion_relacional
                  {:
                    RESULT = expresion_relacional;  
                  :} 

                  | EXPRESION_LOG_REGALO_MANUAL:expresion_logica
                  {:
                    RESULT = expresion_logica;
                    :};

ELEMENTO_ARRAY_DULCE::= PERSONA:id ABRE_EMPAQUE EXPRESION_BOTA CIERRA_EMPAQUE // a[0]
                    {:
                    RESULT = id.toString();
                    :}; 

l_ARRAY_TAMAL::= ABRE_REGALO ARG_COPO CIERRA_REGALO;

ARRAY_OPERATION_CASCABEL::= GRINCH_DECREMENT ELEMENTO_ARRAY_DULCE | QUIEN_INCREMENT ELEMENTO_ARRAY_DULCE;

EXPRESION_ARIT_REGALOPRIN::= EXPRESION_BOTA:n RODOLFO_SUM EXPRESION_BOTA:m 
                        {:
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_SUMA, ARR_INT_FLOAT);
                        :}
                        | EXPRESION_BOTA:n TRUENO_DECREASE EXPRESION_BOTA:m 
                        {:
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_RESTA, ARR_INT_FLOAT);
                        :}
                        | EXPRESION_BOTA:n RELAMPAGO_INT_DIVISION EXPRESION_BOTA:m 

                        {:
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_DIVISION_INT, ARR_INT_FLOAT);
                        :}

                        | EXPRESION_BOTA:n RAYO_FLOAT_DIVISION EXPRESION_BOTA:m
                        {:
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_DIVISION_FLOAT, ARR_INT_FLOAT);
                        :}
                        | EXPRESION_BOTA:n SALTARIN_ELEVATE EXPRESION_BOTA:m
                        {:
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_POWER, ARR_INT_FLOAT);
                        :}
                        | EXPRESION_BOTA:n COMETA_PRODUCT EXPRESION_BOTA:m 
                        {:
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_MULTIPLICACION, ARR_INT_FLOAT);
                        :}
                        | EXPRESION_BOTA:n CUPIDO_MODULE EXPRESION_BOTA:m 
                        {:
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_MODULO, ARR_INT_FLOAT);
                        :}
                        | GRINCH_DECREMENT PERSONA

                        | QUIEN_INCREMENT PERSONA

                        | ARRAY_OPERATION_CASCABEL; // ++a[0]

EXPRESION_REL_REGALO_COMPRADO::= EXPRESION_BOTA:n ELFO_GREATER EXPRESION_BOTA:m 
                        {:
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_MAYOR_QUE, ARR_INT_FLOAT_BOOL);
                        :}
                        | EXPRESION_BOTA:n ELFO_LESS EXPRESION_BOTA:m 
                        {:
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_MENOR_QUE, ARR_INT_FLOAT_BOOL);
                        :}
                        | EXPRESION_BOTA:n ELFO_EQUAL EXPRESION_BOTA:m
                        {:
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_IGUAL_QUE, ARR_INT_FLOAT_BOOL);
                        :}

                        | EXPRESION_BOTA:n ELFO_NOT_EQUAL EXPRESION_BOTA:m
                        {:
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_DIFERENTE_QUE, ARR_INT_FLOAT_BOOL);
                        :}
                        | EXPRESION_BOTA:n ELFO_GREATER_EQUAL EXPRESION_BOTA:m
                        {:
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_MAYOR_IGUAL_QUE, ARR_INT_FLOAT_BOOL);
                        :}
                        | EXPRESION_BOTA:n ELFO_LESS_EQUAL EXPRESION_BOTA:m // a <== b
                        {:
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_MENOR_IGUAL_QUE, ARR_INT_FLOAT_BOOL);
                        :};

EXPRESION_LOG_REGALO_MANUAL::= EXPRESION_BOTA:n REY_MELCHOR_COJUNCTION EXPRESION_BOTA:m 
                        {:
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_CONJUNCION, ARR_BOOL);
                        :}
                        | EXPRESION_BOTA:n REY_GASPAR_DISJUNCTION EXPRESION_BOTA:m
                        {:
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_DISJUNCION, ARR_BOOL);
                        :}
                        | REY_BALTASAR_NOT EXPRESION_BOTA; // !a  
