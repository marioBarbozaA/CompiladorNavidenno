package com.navidad;
import java_cup.runtime.*;

action code {:
  public void hola() {
    System.out.println("Hola");
  }
  public void adios() {
    System.out.println("Adios");
  }
:}

parser code {:
  Lexer lex;

  public parser(Lexer lex) {
    this.lex = lex;
    this.symbolFactory = new DefaultSymbolFactory();
  }
:}
scan with {: return lex.next_token(); :};
init with {: :};



/* Terminales (tokens retornados por el scanner) */

/* Definición de tokens con temática navideña */


// Operadores aritméticos binarios: nombres de renos
terminal RODOLFO_SUM, TRUENO_DECREASE, RELAMPAGO_INT_DIVISION, RAYO_FLOAT_DIVISION, SALTARIN_ELEVATE, COMETA_PRODUCT, CUPIDO_MODULE; // +, -, //, /, **, *, ~(%) 
// identificador: persona
terminal PERSONA; // Identificador (nombre de variable, función, etc.)

// Operadores aritméticos unarios: grinch, quien
terminal GRINCH_DECREMENT, QUIEN_INCREMENT; // -(--), +(++)

// Operadores relacionales: elfos de santa
terminal ELFO_GREATER, ELFO_LESS, ELFO_EQUAL, ELFO_NOT_EQUAL, ELFO_GREATER_EQUAL, ELFO_LESS_EQUAL; // >, <, ==, !=, >=, <=

// Operadores lógicos: reyes magos
terminal REY_MELCHOR_COJUNCTION, REY_GASPAR_DISJUNCTION, REY_BALTASAR_NOT; // &&, ||, !

// tipos: nombres de papá noel
terminal COLACHO_INT,JOULUPUKKI_FLOAT, PAPA_NOEL_BOOLEAN,CLAUS_CHAR, SANTA_STRING, VIEJITO_PASCUERO_ARRAY; // Tipos de datos (int, string, BOOLEAN) todavia no esta 

/* keyword */
terminal  NAVIDAD_ABSTRACT, FESTIVA_PUBLICL, FIESTA_PRIVATE; // Tipado de atributos y metodos abstract, public, private

// literales (valorar caso especial bool): nombres de papá noel con un prefijo l_
terminal L_VIEJITO_PASCUERO, L_JOULUPUKKI; // true, false Todavia no esta 

// paréntesis: abrecuento, cierrecuento
terminal ABRE_CUENTO, CIERRE_CUENTO; // (, )

// paréntesis cuadrado: abreempaque, cierraempaque
terminal ABRE_EMPAQUE, CIERRA_EMPAQUE; // [, ]

// llaves: abreregalo, cierraregalo
terminal ABRE_REGALO, CIERRA_REGALO; // {, }

// lexemas de estructuras de control: elfo, hada, duende, envuelve, hace, revisa, envia, corta
terminal ELFO, HADA, DUENDE, ENVUELVE, HACE, REVISA, ENVIA, CORTA; // if, else, for, while, do, switch, return, break

// print, read: narra, escucha
terminal NARRA, ESCUCHA; // print, read No esta 

// lexema de fin de expresión: finregalo
terminal FIN_REGALO; // ;(|) Sirve para Finalizar 

// lexema de asignar: entrega
terminal ENTREGA; // =    //ASSIGMENT <= 

// lexema separador: separador
terminal SEPARADOR; // , separa entre funciones, parametros, etc.

//lexema de null
terminal CARBON; // null No esta 

// No terminales 
non terminal SantaScript;

// Producción de inicio
start with SantaScript;

SantaScript ::= {:
                    hola(); 
                :} 
                PERSONA 
                {: 
                    adios(); 
                :}
                ;