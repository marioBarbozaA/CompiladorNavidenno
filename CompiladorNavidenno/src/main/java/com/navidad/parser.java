
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.navidad;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\005" +
    "\003\000\002\005\005\000\002\006\003\000\002\006\004" +
    "\000\002\007\004\000\002\010\006\000\002\010\007\000" +
    "\002\036\002\000\002\010\011\000\002\012\003\000\002" +
    "\012\005\000\002\013\004\000\002\011\005\000\002\011" +
    "\004\000\002\017\004\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\022\005\000\002" +
    "\022\006\000\002\022\006\000\002\022\005\000\002\022" +
    "\006\000\002\022\005\000\002\020\010\000\002\021\013" +
    "\000\002\023\007\000\002\023\010\000\002\023\010\000" +
    "\002\023\011\000\002\025\003\000\002\025\004\000\002" +
    "\024\007\000\002\026\004\000\002\014\003\000\002\014" +
    "\004\000\002\016\005\000\002\016\007\000\002\016\005" +
    "\000\002\016\007\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\005\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\030\006" +
    "\000\002\031\005\000\002\032\004\000\002\032\004\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\004\000\002\033\004\000\002\033\003" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\004\073\005\001\002\000\004\002\266\001" +
    "\002\000\020\027\177\030\200\031\203\032\176\033\201" +
    "\034\204\076\250\001\002\000\006\002\000\073\005\001" +
    "\002\000\006\002\ufff0\073\ufff0\001\002\000\004\053\012" +
    "\001\002\000\006\002\uffee\073\uffee\001\002\000\054\013" +
    "\023\014\046\015\045\026\044\035\034\036\015\037\054" +
    "\040\027\041\050\045\033\046\030\047\014\054\021\055" +
    "\020\060\041\061\043\063\013\064\055\065\016\066\026" +
    "\074\031\001\002\000\036\013\070\014\046\015\045\026" +
    "\044\035\034\036\015\037\054\040\027\041\050\045\033" +
    "\046\030\047\014\065\016\066\026\001\002\000\036\013" +
    "\070\014\046\015\045\026\044\035\034\036\015\037\054" +
    "\040\027\041\050\045\033\046\030\047\014\065\016\066" +
    "\026\001\002\000\052\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\016\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\050\ufff8\052\ufff8" +
    "\054\ufff8\067\ufff8\071\ufff8\001\002\000\004\047\237\001" +
    "\002\000\052\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe" +
    "\011\uffbe\012\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\050\uffbe\052\uffbe\054\uffbe" +
    "\067\uffbe\071\uffbe\001\002\000\004\047\217\001\002\000" +
    "\016\002\uffe5\056\uffe5\057\uffe5\062\uffe5\067\uffe5\073\uffe5" +
    "\001\002\000\052\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\011\uffc3\012\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\050\uffc3\052\uffc3\054" +
    "\uffc3\067\uffc3\071\uffc3\001\002\000\050\004\uffc2\005\uffc2" +
    "\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\016\uffc2\017" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\047\071\051\065\067\uffc2\070\170\001\002\000\054\013" +
    "\uffcc\014\uffcc\015\uffcc\026\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\045\uffcc\046\uffcc\047\uffcc\054\uffcc\055" +
    "\uffcc\060\uffcc\061\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc" +
    "\074\uffcc\001\002\000\052\004\uffbd\005\uffbd\006\uffbd\007" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\050\uffbd\052" +
    "\uffbd\054\uffbd\067\uffbd\071\uffbd\001\002\000\004\047\213" +
    "\001\002\000\052\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\022\ufff6\023\ufff6\024\ufff6\025\ufff6\050\ufff6\052\ufff6\054" +
    "\ufff6\067\ufff6\071\ufff6\001\002\000\052\004\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\016\ufff3\017" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\050\ufff3\052\ufff3\054\ufff3\067\ufff3\071\ufff3\001\002\000" +
    "\016\027\177\030\200\031\203\032\176\033\201\034\204" +
    "\001\002\000\052\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010" +
    "\uffbc\011\uffbc\012\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\050\uffbc\052\uffbc\054" +
    "\uffbc\067\uffbc\071\uffbc\001\002\000\052\004\ufff4\005\ufff4" +
    "\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\016\ufff4\017" +
    "\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4" +
    "\050\ufff4\052\ufff4\054\ufff4\067\ufff4\071\ufff4\001\002\000" +
    "\052\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\012\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\025\ufff9\050\ufff9\052\ufff9\054\ufff9\067\ufff9" +
    "\071\ufff9\001\002\000\044\004\uffc1\005\uffc1\006\uffc1\007" +
    "\uffc1\010\uffc1\011\uffc1\012\uffc1\016\uffc1\017\uffc1\020\uffc1" +
    "\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\067\uffc1\070" +
    "\154\001\002\000\054\013\023\014\046\015\045\026\044" +
    "\035\034\036\015\037\054\040\027\041\050\045\033\046" +
    "\030\047\014\054\175\055\020\060\041\061\043\063\013" +
    "\064\055\065\016\066\026\074\031\001\002\000\004\067" +
    "\173\001\002\000\042\004\100\005\111\006\106\007\104" +
    "\010\112\011\102\012\107\016\103\017\110\020\076\021" +
    "\101\022\075\023\077\024\105\025\113\067\172\001\002" +
    "\000\004\047\150\001\002\000\004\067\147\001\002\000" +
    "\004\053\012\001\002\000\036\013\070\014\046\015\045" +
    "\026\044\035\034\036\015\037\054\040\027\041\050\045" +
    "\033\046\030\047\014\065\016\066\026\001\002\000\004" +
    "\013\137\001\002\000\004\013\063\001\002\000\004\067" +
    "\062\001\002\000\052\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\016\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\050\ufff5\052\ufff5" +
    "\054\ufff5\067\ufff5\071\ufff5\001\002\000\052\004\uffbf\005" +
    "\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\050\uffbf\052\uffbf\054\uffbf\067\uffbf\071\uffbf\001\002" +
    "\000\004\067\061\001\002\000\052\004\uffae\005\uffae\006" +
    "\uffae\007\uffae\010\uffae\011\uffae\012\uffae\016\uffae\017\uffae" +
    "\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\050" +
    "\uffae\052\uffae\054\uffae\067\uffae\071\uffae\001\002\000\052" +
    "\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\050\ufff7\052\ufff7\054\ufff7\067\ufff7\071" +
    "\ufff7\001\002\000\004\067\060\001\002\000\004\067\057" +
    "\001\002\000\054\013\uffe3\014\uffe3\015\uffe3\026\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\045\uffe3\046\uffe3" +
    "\047\uffe3\054\uffe3\055\uffe3\060\uffe3\061\uffe3\063\uffe3\064" +
    "\uffe3\065\uffe3\066\uffe3\074\uffe3\001\002\000\054\013\uffe1" +
    "\014\uffe1\015\uffe1\026\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\045\uffe1\046\uffe1\047\uffe1\054\uffe1\055\uffe1" +
    "\060\uffe1\061\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\074" +
    "\uffe1\001\002\000\054\013\uffdd\014\uffdd\015\uffdd\026\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\054\uffdd\055\uffdd\060\uffdd\061\uffdd\063\uffdd" +
    "\064\uffdd\065\uffdd\066\uffdd\074\uffdd\001\002\000\054\013" +
    "\uffde\014\uffde\015\uffde\026\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\041\uffde\045\uffde\046\uffde\047\uffde\054\uffde\055" +
    "\uffde\060\uffde\061\uffde\063\uffde\064\uffde\065\uffde\066\uffde" +
    "\074\uffde\001\002\000\054\004\uffb0\005\uffb0\006\uffb0\007" +
    "\uffb0\010\uffb0\011\uffb0\012\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\050\uffb0\051" +
    "\065\052\uffb0\054\uffb0\067\uffb0\071\uffb0\001\002\000\052" +
    "\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\050\uffb9\052\uffb9\054\uffb9\067\uffb9\071" +
    "\uffb9\001\002\000\036\013\070\014\046\015\045\026\044" +
    "\035\034\036\015\037\054\040\027\041\050\045\033\046" +
    "\030\047\014\065\016\066\026\001\002\000\052\004\uffc1" +
    "\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\016" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\050\uffc1\052\uffc1\054\uffc1\067\uffc1\071\uffc1\001" +
    "\002\000\042\004\100\005\111\006\106\007\104\010\112" +
    "\011\102\012\107\016\103\017\110\020\076\021\101\022" +
    "\075\023\077\024\105\025\113\052\136\001\002\000\056" +
    "\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\047\071\050\uffc2\051\065\052\uffc2\054" +
    "\uffc2\067\uffc2\071\uffc2\001\002\000\040\013\070\014\046" +
    "\015\045\026\044\035\034\036\015\037\054\040\027\041" +
    "\050\045\033\046\030\047\014\050\074\065\016\066\026" +
    "\001\002\000\006\050\134\071\133\001\002\000\046\004" +
    "\100\005\111\006\106\007\104\010\112\011\102\012\107" +
    "\016\103\017\110\020\076\021\101\022\075\023\077\024" +
    "\105\025\113\050\ufff2\054\ufff2\071\ufff2\001\002\000\052" +
    "\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\050\uffdc\052\uffdc\054\uffdc\067\uffdc\071" +
    "\uffdc\001\002\000\036\013\070\014\046\015\045\026\044" +
    "\035\034\036\015\037\054\040\027\041\050\045\033\046" +
    "\030\047\014\065\016\066\026\001\002\000\036\013\070" +
    "\014\046\015\045\026\044\035\034\036\015\037\054\040" +
    "\027\041\050\045\033\046\030\047\014\065\016\066\026" +
    "\001\002\000\036\013\070\014\046\015\045\026\044\035" +
    "\034\036\015\037\054\040\027\041\050\045\033\046\030" +
    "\047\014\065\016\066\026\001\002\000\036\013\070\014" +
    "\046\015\045\026\044\035\034\036\015\037\054\040\027" +
    "\041\050\045\033\046\030\047\014\065\016\066\026\001" +
    "\002\000\036\013\070\014\046\015\045\026\044\035\034" +
    "\036\015\037\054\040\027\041\050\045\033\046\030\047" +
    "\014\065\016\066\026\001\002\000\036\013\070\014\046" +
    "\015\045\026\044\035\034\036\015\037\054\040\027\041" +
    "\050\045\033\046\030\047\014\065\016\066\026\001\002" +
    "\000\036\013\070\014\046\015\045\026\044\035\034\036" +
    "\015\037\054\040\027\041\050\045\033\046\030\047\014" +
    "\065\016\066\026\001\002\000\036\013\070\014\046\015" +
    "\045\026\044\035\034\036\015\037\054\040\027\041\050" +
    "\045\033\046\030\047\014\065\016\066\026\001\002\000" +
    "\036\013\070\014\046\015\045\026\044\035\034\036\015" +
    "\037\054\040\027\041\050\045\033\046\030\047\014\065" +
    "\016\066\026\001\002\000\036\013\070\014\046\015\045" +
    "\026\044\035\034\036\015\037\054\040\027\041\050\045" +
    "\033\046\030\047\014\065\016\066\026\001\002\000\036" +
    "\013\070\014\046\015\045\026\044\035\034\036\015\037" +
    "\054\040\027\041\050\045\033\046\030\047\014\065\016" +
    "\066\026\001\002\000\036\013\070\014\046\015\045\026" +
    "\044\035\034\036\015\037\054\040\027\041\050\045\033" +
    "\046\030\047\014\065\016\066\026\001\002\000\036\013" +
    "\070\014\046\015\045\026\044\035\034\036\015\037\054" +
    "\040\027\041\050\045\033\046\030\047\014\065\016\066" +
    "\026\001\002\000\036\013\070\014\046\015\045\026\044" +
    "\035\034\036\015\037\054\040\027\041\050\045\033\046" +
    "\030\047\014\065\016\066\026\001\002\000\036\013\070" +
    "\014\046\015\045\026\044\035\034\036\015\037\054\040" +
    "\027\041\050\045\033\046\030\047\014\065\016\066\026" +
    "\001\002\000\052\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010" +
    "\uffa6\011\uffa6\012\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6" +
    "\022\uffa6\023\uffa6\024\uffa6\025\uffa6\050\uffa6\052\uffa6\054" +
    "\uffa6\067\uffa6\071\uffa6\001\002\000\052\004\uffb3\005\uffb3" +
    "\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\016\103\017" +
    "\110\020\076\021\101\022\075\023\077\024\105\025\113" +
    "\050\uffb3\052\uffb3\054\uffb3\067\uffb3\071\uffb3\001\002\000" +
    "\052\004\uffb6\005\uffb6\006\106\007\104\010\112\011\102" +
    "\012\107\016\103\017\110\020\076\021\101\022\075\023" +
    "\077\024\105\025\113\050\uffb6\052\uffb6\054\uffb6\067\uffb6" +
    "\071\uffb6\001\002\000\052\004\uffac\005\uffac\006\uffac\007" +
    "\uffac\010\uffac\011\uffac\012\uffac\016\uffac\017\uffac\020\uffac" +
    "\021\uffac\022\uffac\023\uffac\024\105\025\113\050\uffac\052" +
    "\uffac\054\uffac\067\uffac\071\uffac\001\002\000\052\004\uffb1" +
    "\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\016" +
    "\103\017\110\020\076\021\101\022\075\023\077\024\105" +
    "\025\113\050\uffb1\052\uffb1\054\uffb1\067\uffb1\071\uffb1\001" +
    "\002\000\052\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\112" +
    "\011\uffb5\012\107\016\103\017\110\020\076\021\101\022" +
    "\075\023\077\024\105\025\113\050\uffb5\052\uffb5\054\uffb5" +
    "\067\uffb5\071\uffb5\001\002\000\052\004\uffa7\005\uffa7\006" +
    "\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\016\uffa7\017\uffa7" +
    "\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\113\050" +
    "\uffa7\052\uffa7\054\uffa7\067\uffa7\071\uffa7\001\002\000\052" +
    "\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\112\011\uffb4\012" +
    "\107\016\103\017\110\020\076\021\101\022\075\023\077" +
    "\024\105\025\113\050\uffb4\052\uffb4\054\uffb4\067\uffb4\071" +
    "\uffb4\001\002\000\052\004\uffad\005\uffad\006\uffad\007\uffad" +
    "\010\uffad\011\uffad\012\uffad\016\uffad\017\uffad\020\uffad\021" +
    "\uffad\022\uffad\023\uffad\024\105\025\113\050\uffad\052\uffad" +
    "\054\uffad\067\uffad\071\uffad\001\002\000\052\004\uffb2\005" +
    "\uffb2\006\uffb2\007\uffb2\010\112\011\uffb2\012\107\016\103" +
    "\017\110\020\076\021\101\022\075\023\077\024\105\025" +
    "\113\050\uffb2\052\uffb2\054\uffb2\067\uffb2\071\uffb2\001\002" +
    "\000\052\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011" +
    "\uffaa\012\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa" +
    "\023\uffaa\024\105\025\113\050\uffaa\052\uffaa\054\uffaa\067" +
    "\uffaa\071\uffaa\001\002\000\052\004\uffb7\005\uffb7\006\106" +
    "\007\104\010\112\011\102\012\107\016\103\017\110\020" +
    "\076\021\101\022\075\023\077\024\105\025\113\050\uffb7" +
    "\052\uffb7\054\uffb7\067\uffb7\071\uffb7\001\002\000\052\004" +
    "\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8" +
    "\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024" +
    "\105\025\113\050\uffa8\052\uffa8\054\uffa8\067\uffa8\071\uffa8" +
    "\001\002\000\052\004\uffab\005\uffab\006\uffab\007\uffab\010" +
    "\uffab\011\uffab\012\uffab\016\uffab\017\uffab\020\uffab\021\uffab" +
    "\022\uffab\023\uffab\024\105\025\113\050\uffab\052\uffab\054" +
    "\uffab\067\uffab\071\uffab\001\002\000\052\004\uffa9\005\uffa9" +
    "\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\105\025\113" +
    "\050\uffa9\052\uffa9\054\uffa9\067\uffa9\071\uffa9\001\002\000" +
    "\036\013\070\014\046\015\045\026\044\035\034\036\015" +
    "\037\054\040\027\041\050\045\033\046\030\047\014\065" +
    "\016\066\026\001\002\000\052\004\uffdb\005\uffdb\006\uffdb" +
    "\007\uffdb\010\uffdb\011\uffdb\012\uffdb\016\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\050\uffdb" +
    "\052\uffdb\054\uffdb\067\uffdb\071\uffdb\001\002\000\046\004" +
    "\100\005\111\006\106\007\104\010\112\011\102\012\107" +
    "\016\103\017\110\020\076\021\101\022\075\023\077\024" +
    "\105\025\113\050\ufff1\054\ufff1\071\ufff1\001\002\000\054" +
    "\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\050\uffbb\052\uffbb\054\uffbb\067\uffbb\070" +
    "\uffbb\071\uffbb\001\002\000\054\004\uffaf\005\uffaf\006\uffaf" +
    "\007\uffaf\010\uffaf\011\uffaf\012\uffaf\016\uffaf\017\uffaf\020" +
    "\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\050\uffaf" +
    "\051\065\052\uffaf\054\uffaf\067\uffaf\071\uffaf\001\002\000" +
    "\052\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\025\uffb8\050\uffb8\052\uffb8\054\uffb8\067\uffb8" +
    "\071\uffb8\001\002\000\052\004\uffa5\005\uffa5\006\uffa5\007" +
    "\uffa5\010\uffa5\011\uffa5\012\uffa5\016\uffa5\017\uffa5\020\uffa5" +
    "\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\050\uffa5\052" +
    "\uffa5\054\uffa5\067\uffa5\071\uffa5\001\002\000\004\062\143" +
    "\001\002\000\004\047\144\001\002\000\036\013\070\014" +
    "\046\015\045\026\044\035\034\036\015\037\054\040\027" +
    "\041\050\045\033\046\030\047\014\065\016\066\026\001" +
    "\002\000\042\004\100\005\111\006\106\007\104\010\112" +
    "\011\102\012\107\016\103\017\110\020\076\021\101\022" +
    "\075\023\077\024\105\025\113\050\146\001\002\000\004" +
    "\067\uffd6\001\002\000\054\013\uffdf\014\uffdf\015\uffdf\026" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\045\uffdf" +
    "\046\uffdf\047\uffdf\054\uffdf\055\uffdf\060\uffdf\061\uffdf\063" +
    "\uffdf\064\uffdf\065\uffdf\066\uffdf\074\uffdf\001\002\000\006" +
    "\013\151\074\031\001\002\000\006\051\065\070\170\001" +
    "\002\000\004\067\162\001\002\000\004\070\154\001\002" +
    "\000\040\013\070\014\046\015\045\026\044\035\034\036" +
    "\015\037\054\040\027\041\050\045\033\046\030\047\014" +
    "\053\156\065\016\066\026\001\002\000\004\067\uffc4\001" +
    "\002\000\036\013\070\014\046\015\045\026\044\035\034" +
    "\036\015\037\054\040\027\041\050\045\033\046\030\047" +
    "\014\065\016\066\026\001\002\000\042\004\100\005\111" +
    "\006\106\007\104\010\112\011\102\012\107\016\103\017" +
    "\110\020\076\021\101\022\075\023\077\024\105\025\113" +
    "\067\uffc5\001\002\000\006\054\161\071\133\001\002\000" +
    "\004\067\uffba\001\002\000\036\013\070\014\046\015\045" +
    "\026\044\035\034\036\015\037\054\040\027\041\050\045" +
    "\033\046\030\047\014\065\016\066\026\001\002\000\042" +
    "\004\100\005\111\006\106\007\104\010\112\011\102\012" +
    "\107\016\103\017\110\020\076\021\101\022\075\023\077" +
    "\024\105\025\113\067\164\001\002\000\036\013\070\014" +
    "\046\015\045\026\044\035\034\036\015\037\054\040\027" +
    "\041\050\045\033\046\030\047\014\065\016\066\026\001" +
    "\002\000\042\004\100\005\111\006\106\007\104\010\112" +
    "\011\102\012\107\016\103\017\110\020\076\021\101\022" +
    "\075\023\077\024\105\025\113\050\166\001\002\000\004" +
    "\053\012\001\002\000\004\067\uffd5\001\002\000\036\013" +
    "\070\014\046\015\045\026\044\035\034\036\015\037\054" +
    "\040\027\041\050\045\033\046\030\047\014\065\016\066" +
    "\026\001\002\000\042\004\100\005\111\006\106\007\104" +
    "\010\112\011\102\012\107\016\103\017\110\020\076\021" +
    "\101\022\075\023\077\024\105\025\113\067\uffc6\001\002" +
    "\000\054\013\uffe2\014\uffe2\015\uffe2\026\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\045\uffe2\046\uffe2\047\uffe2" +
    "\054\uffe2\055\uffe2\060\uffe2\061\uffe2\063\uffe2\064\uffe2\065" +
    "\uffe2\066\uffe2\074\uffe2\001\002\000\054\013\uffe0\014\uffe0" +
    "\015\uffe0\026\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\054\uffe0\055\uffe0\060\uffe0" +
    "\061\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\074\uffe0\001" +
    "\002\000\054\013\uffcb\014\uffcb\015\uffcb\026\uffcb\035\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\041\uffcb\045\uffcb\046\uffcb\047" +
    "\uffcb\054\uffcb\055\uffcb\060\uffcb\061\uffcb\063\uffcb\064\uffcb" +
    "\065\uffcb\066\uffcb\074\uffcb\001\002\000\016\002\uffe6\056" +
    "\uffe6\057\uffe6\062\uffe6\067\uffe6\073\uffe6\001\002\000\004" +
    "\013\ufffc\001\002\000\004\013\uffff\001\002\000\004\013" +
    "\ufffe\001\002\000\004\013\ufffb\001\002\000\004\013\205" +
    "\001\002\000\004\013\ufffd\001\002\000\004\013\ufffa\001" +
    "\002\000\010\051\065\067\uffca\070\211\001\002\000\006" +
    "\067\uffc8\070\207\001\002\000\004\053\156\001\002\000" +
    "\004\067\uffc7\001\002\000\036\013\070\014\046\015\045" +
    "\026\044\035\034\036\015\037\054\040\027\041\050\045" +
    "\033\046\030\047\014\065\016\066\026\001\002\000\042" +
    "\004\100\005\111\006\106\007\104\010\112\011\102\012" +
    "\107\016\103\017\110\020\076\021\101\022\075\023\077" +
    "\024\105\025\113\067\uffc9\001\002\000\040\013\070\014" +
    "\046\015\045\026\044\035\034\036\015\037\054\040\027" +
    "\041\050\045\033\046\030\047\014\050\215\065\016\066" +
    "\026\001\002\000\006\050\216\071\133\001\002\000\052" +
    "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\050\uffd7\052\uffd7\054\uffd7\067\uffd7\071" +
    "\uffd7\001\002\000\052\004\uffd8\005\uffd8\006\uffd8\007\uffd8" +
    "\010\uffd8\011\uffd8\012\uffd8\016\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\050\uffd8\052\uffd8" +
    "\054\uffd8\067\uffd8\071\uffd8\001\002\000\036\013\070\014" +
    "\046\015\045\026\044\035\034\036\015\037\054\040\027" +
    "\041\050\045\033\046\030\047\014\065\016\066\026\001" +
    "\002\000\042\004\100\005\111\006\106\007\104\010\112" +
    "\011\102\012\107\016\103\017\110\020\076\021\101\022" +
    "\075\023\077\024\105\025\113\050\221\001\002\000\004" +
    "\053\012\001\002\000\010\056\223\057\225\067\uffd4\001" +
    "\002\000\004\047\233\001\002\000\010\056\223\057\uffd0" +
    "\067\uffd0\001\002\000\004\053\012\001\002\000\006\057" +
    "\225\067\uffd2\001\002\000\004\067\uffd3\001\002\000\004" +
    "\067\uffd1\001\002\000\004\067\uffcd\001\002\000\006\057" +
    "\uffcf\067\uffcf\001\002\000\036\013\070\014\046\015\045" +
    "\026\044\035\034\036\015\037\054\040\027\041\050\045" +
    "\033\046\030\047\014\065\016\066\026\001\002\000\042" +
    "\004\100\005\111\006\106\007\104\010\112\011\102\012" +
    "\107\016\103\017\110\020\076\021\101\022\075\023\077" +
    "\024\105\025\113\050\235\001\002\000\004\053\012\001" +
    "\002\000\010\056\uffce\057\uffce\067\uffce\001\002\000\040" +
    "\013\070\014\046\015\045\026\044\035\034\036\015\037" +
    "\054\040\027\041\050\045\033\046\030\047\014\050\241" +
    "\065\016\066\026\001\002\000\006\050\242\071\133\001" +
    "\002\000\052\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\050\uffd9\052\uffd9\054\uffd9" +
    "\067\uffd9\071\uffd9\001\002\000\052\004\uffda\005\uffda\006" +
    "\uffda\007\uffda\010\uffda\011\uffda\012\uffda\016\uffda\017\uffda" +
    "\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\050" +
    "\uffda\052\uffda\054\uffda\067\uffda\071\uffda\001\002\000\042" +
    "\004\100\005\111\006\106\007\104\010\112\011\102\012" +
    "\107\016\103\017\110\020\076\021\101\022\075\023\077" +
    "\024\105\025\113\050\244\001\002\000\052\004\uffc0\005" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\050\uffc0\052\uffc0\054\uffc0\067\uffc0\071\uffc0\001\002" +
    "\000\042\004\100\005\111\006\106\007\104\010\112\011" +
    "\102\012\107\016\103\017\110\020\076\021\101\022\075" +
    "\023\077\024\105\025\113\067\uffe4\001\002\000\006\002" +
    "\uffef\073\uffef\001\002\000\004\013\253\001\002\000\004" +
    "\047\251\001\002\000\004\050\252\001\002\000\004\053" +
    "\uffed\001\002\000\004\047\254\001\002\000\020\027\uffeb" +
    "\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\050\256\001" +
    "\002\000\016\027\177\030\200\031\203\032\176\033\201" +
    "\034\204\001\002\000\004\053\uffec\001\002\000\006\050" +
    "\uffe9\071\uffe9\001\002\000\006\050\264\071\263\001\002" +
    "\000\004\013\262\001\002\000\006\050\uffe7\071\uffe7\001" +
    "\002\000\016\027\177\030\200\031\203\032\176\033\201" +
    "\034\204\001\002\000\004\053\uffea\001\002\000\006\050" +
    "\uffe8\071\uffe8\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\012\002\003\006\005\007\006\010\007\001" +
    "\001\000\002\001\001\000\004\003\246\001\001\000\006" +
    "\007\245\010\007\001\001\000\002\001\001\000\004\011" +
    "\010\001\001\000\002\001\001\000\040\004\021\014\035" +
    "\015\023\016\055\017\036\020\046\021\041\022\050\023" +
    "\051\027\037\030\034\032\052\033\016\034\024\035\031" +
    "\001\001\000\022\004\021\022\050\027\244\030\065\032" +
    "\052\033\016\034\024\035\031\001\001\000\022\004\021" +
    "\022\050\027\242\030\065\032\052\033\016\034\024\035" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\004\021\015" +
    "\173\016\055\017\036\020\046\021\041\022\050\023\051" +
    "\027\037\030\034\032\052\033\016\034\024\035\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\141\001\001\000\022\004" +
    "\021\022\050\027\140\030\065\032\052\033\016\034\024" +
    "\035\031\001\001\000\004\030\137\001\001\000\004\030" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\021\022\050" +
    "\027\066\030\065\032\052\033\016\034\024\035\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\004\021\005\071\022\050\027\072\030\065\032" +
    "\052\033\016\034\024\035\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\021\022" +
    "\050\027\131\030\065\032\052\033\016\034\024\035\031" +
    "\001\001\000\022\004\021\022\050\027\130\030\065\032" +
    "\052\033\016\034\024\035\031\001\001\000\022\004\021" +
    "\022\050\027\127\030\065\032\052\033\016\034\024\035" +
    "\031\001\001\000\022\004\021\022\050\027\126\030\065" +
    "\032\052\033\016\034\024\035\031\001\001\000\022\004" +
    "\021\022\050\027\125\030\065\032\052\033\016\034\024" +
    "\035\031\001\001\000\022\004\021\022\050\027\124\030" +
    "\065\032\052\033\016\034\024\035\031\001\001\000\022" +
    "\004\021\022\050\027\123\030\065\032\052\033\016\034" +
    "\024\035\031\001\001\000\022\004\021\022\050\027\122" +
    "\030\065\032\052\033\016\034\024\035\031\001\001\000" +
    "\022\004\021\022\050\027\121\030\065\032\052\033\016" +
    "\034\024\035\031\001\001\000\022\004\021\022\050\027" +
    "\120\030\065\032\052\033\016\034\024\035\031\001\001" +
    "\000\022\004\021\022\050\027\117\030\065\032\052\033" +
    "\016\034\024\035\031\001\001\000\022\004\021\022\050" +
    "\027\116\030\065\032\052\033\016\034\024\035\031\001" +
    "\001\000\022\004\021\022\050\027\115\030\065\032\052" +
    "\033\016\034\024\035\031\001\001\000\022\004\021\022" +
    "\050\027\114\030\065\032\052\033\016\034\024\035\031" +
    "\001\001\000\022\004\021\022\050\027\113\030\065\032" +
    "\052\033\016\034\024\035\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\021\022\050\027\134\030" +
    "\065\032\052\033\016\034\024\035\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\021\022\050\027\144\030" +
    "\065\032\052\033\016\034\024\035\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\151\030\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\004\021\022\050\027\156\030" +
    "\065\031\154\032\052\033\016\034\024\035\031\001\001" +
    "\000\002\001\001\000\024\004\021\005\157\022\050\027" +
    "\072\030\065\032\052\033\016\034\024\035\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\021\022\050\027\162\030\065\032\052\033\016" +
    "\034\024\035\031\001\001\000\002\001\001\000\022\004" +
    "\021\022\050\027\164\030\065\032\052\033\016\034\024" +
    "\035\031\001\001\000\002\001\001\000\004\011\166\001" +
    "\001\000\002\001\001\000\022\004\021\022\050\027\170" +
    "\030\065\032\052\033\016\034\024\035\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\207\001\001\000\002" +
    "\001\001\000\022\004\021\022\050\027\211\030\065\032" +
    "\052\033\016\034\024\035\031\001\001\000\002\001\001" +
    "\000\024\004\021\005\213\022\050\027\072\030\065\032" +
    "\052\033\016\034\024\035\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\021\022" +
    "\050\027\217\030\065\032\052\033\016\034\024\035\031" +
    "\001\001\000\002\001\001\000\004\011\221\001\001\000" +
    "\010\024\223\025\225\026\226\001\001\000\002\001\001" +
    "\000\006\024\223\025\231\001\001\000\004\011\230\001" +
    "\001\000\004\026\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\021\022\050\027\233\030\065\032\052\033\016\034\024" +
    "\035\031\001\001\000\002\001\001\000\004\011\235\001" +
    "\001\000\002\001\001\000\024\004\021\005\237\022\050" +
    "\027\072\030\065\032\052\033\016\034\024\035\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\254\001\001\000\010\003\260\012\257\013\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\260\013\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


  Lexer lex;

  public parser(Lexer lex) {
    this.lex = lex;
    this.symbolFactory = new DefaultSymbolFactory();
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


  public void hola() {
    System.out.println("Hola");
  }
  public void adios() {
    System.out.println("Adios\n");
  }

    HashMap<String, ArrayList<SymbolObject>> listaTablasSimbolos = new HashMap<String, ArrayList<SymbolObject>>();
    String currentHash = "";

    public void imprimirTablasSimbolos(){
      for (String key : listaTablasSimbolos.keySet()) {
        System.out.println("Tabla de simbolos: " + key);
        System.out.println("Variables: ");
        for (SymbolObject variable : listaTablasSimbolos.get(key)) {
          System.out.println(variable.toString());
        }
        System.out.println(" ");
      }
  }
    public void cambiarContexto(String nombreFuncion) {
        currentHash = nombreFuncion;
        listaTablasSimbolos.put(nombreFuncion, new ArrayList<SymbolObject>());
    }

    public void annadirSymbol(SymbolObject symbol) {
    listaTablasSimbolos.get(currentHash).add(symbol);
  }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= NAVIDAD EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NAVIDAD ::= FUNCIONES_BOLSA_NAVIDENNA 
            {
              Object RESULT =null;
		
        hola();
        imprimirTablasSimbolos();
        adios();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NAVIDAD",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // T_COPO ::= COLACHO_INT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // T_COPO ::= JOULUPUKKI_FLOAT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // T_COPO ::= PAPA_NOEL_BOOLEAN 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // T_COPO ::= CLAUS_CHAR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // T_COPO ::= SANTA_STRING 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // T_COPO ::= VIEJITO_PASCUERO_ARRAY 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // l_COPO ::= L_COLACHO_INT 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // l_COPO ::= L_JOULUPUKKI_FLOAT 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // l_COPO ::= L_CLAUS_CHAR 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // l_COPO ::= L_SANTA_STRING 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // l_COPO ::= L_VIEJITO_PASCUERO_ARRAY 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // l_COPO ::= PAPA_NOEL_TRUE 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // l_COPO ::= PAPA_NOEL_FALSE 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARG_COPO ::= EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG_COPO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARG_COPO ::= ARG_COPO SEPARADOR_BASTON EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG_COPO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCIONES_BOLSA_NAVIDENNA ::= FUNCION_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_BOLSA_NAVIDENNA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCIONES_BOLSA_NAVIDENNA ::= FUNCIONES_BOLSA_NAVIDENNA FUNCION_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_BOLSA_NAVIDENNA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCION_REGALO ::= DEF_JUGUETE CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION_REGALO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DEF_JUGUETE ::= FUNCTION_VILLANCICOS ESTRELLA_MAIN ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;
		int Funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object Fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              cambiarContexto("main");
              annadirSymbol(new SymbolObject("function","int","main"));
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF_JUGUETE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DEF_JUGUETE ::= FUNCTION_VILLANCICOS T_COPO PERSONA ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;
		int Funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object Fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object Tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
              cambiarContexto(id.toString());
              annadirSymbol(new SymbolObject("function",Tipo.toString(), id.toString()));
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF_JUGUETE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$0 ::= 
            {
              Object RESULT =null;
		int Funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object Fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object Tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              cambiarContexto(id.toString());
              annadirSymbol(new SymbolObject("function",Tipo.toString(), id.toString()));
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DEF_JUGUETE ::= FUNCTION_VILLANCICOS T_COPO PERSONA ABRE_CUENTO NT$0 PARAMETROS_PALETAS CIERRE_CUENTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int Funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object Fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int Tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object Tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF_JUGUETE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMETROS_PALETAS ::= PARAMETRO_PALETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PALETAS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMETROS_PALETAS ::= PARAMETROS_PALETAS SEPARADOR_BASTON PARAMETRO_PALETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PALETAS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMETRO_PALETA ::= T_COPO PERSONA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                annadirSymbol(new SymbolObject("param",tipo.toString(), id.toString()));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_PALETA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CODIGO_ENVOLTURA ::= ABRE_REGALO LINEAS_LAZOS CIERRA_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO_ENVOLTURA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CODIGO_ENVOLTURA ::= ABRE_REGALO CIERRA_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO_ENVOLTURA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RETORNO_BURRITO_SABANERO ::= ENVIA_RETURN EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO_BURRITO_SABANERO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LINEA_LAZO ::= ASIGNACION_GORRO FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LINEA_LAZO ::= EXPRESION_BOTA FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LINEA_LAZO ::= CORTA_BREAK FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LINEA_LAZO ::= RETORNO_BURRITO_SABANERO FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LINEA_LAZO ::= FOR_FANTASMA_PRESENTE FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LINEA_LAZO ::= DO_UNTIL_FANTASMA_PASADO FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LINEA_LAZO ::= IF_JUANITO_ESCARCHA FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CALL_FUNCTION_FANTASMA_FUTURO ::= PERSONA ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CALL_FUNCTION_FANTASMA_FUTURO ::= PERSONA ABRE_CUENTO ARG_COPO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CALL_FUNCTION_FANTASMA_FUTURO ::= NARRA_PRINT ABRE_CUENTO ARG_COPO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CALL_FUNCTION_FANTASMA_FUTURO ::= NARRA_PRINT ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CALL_FUNCTION_FANTASMA_FUTURO ::= ESCUCHA_READ ABRE_CUENTO ARG_COPO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CALL_FUNCTION_FANTASMA_FUTURO ::= ESCUCHA_READ ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DO_UNTIL_FANTASMA_PASADO ::= HACE_DO CODIGO_ENVOLTURA REVISA_UNTIL ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_UNTIL_FANTASMA_PASADO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FOR_FANTASMA_PRESENTE ::= ENVUELVE_FOR ABRE_CUENTO ASIGNACION_GORRO FIN_REGALO EXPRESION_BOTA FIN_REGALO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR_FANTASMA_PRESENTE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF_JUANITO_ESCARCHA ::= ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_JUANITO_ESCARCHA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF_JUANITO_ESCARCHA ::= ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA ELSE_SCROOGE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_JUANITO_ESCARCHA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF_JUANITO_ESCARCHA ::= ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA ELIF_MULTI_JACK_FROST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_JUANITO_ESCARCHA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF_JUANITO_ESCARCHA ::= ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA ELIF_MULTI_JACK_FROST ELSE_SCROOGE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_JUANITO_ESCARCHA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELIF_MULTI_JACK_FROST ::= ELIF_BATMAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIF_MULTI_JACK_FROST",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELIF_MULTI_JACK_FROST ::= ELIF_BATMAN ELIF_MULTI_JACK_FROST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIF_MULTI_JACK_FROST",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELIF_BATMAN ::= HADA_ELIF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIF_BATMAN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELSE_SCROOGE ::= DUENDE_ELSE CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_SCROOGE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LINEAS_LAZOS ::= LINEA_LAZO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEAS_LAZOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LINEAS_LAZOS ::= LINEAS_LAZOS LINEA_LAZO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEAS_LAZOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO PERSONA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    annadirSymbol(new SymbolObject("local",tipo.toString(), id.toString()));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO PERSONA ENTREGA EXPRESION_BOTA 
            {
              Object RESULT =null;
		int localleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int localright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object local = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    annadirSymbol(new SymbolObject("local",tipo.toString(), id.toString()));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO ELEMENTO_ARRAY_DULCE 
            {
              Object RESULT =null;
		int localleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int localright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object local = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elem_arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elem_arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elem_array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    annadirSymbol(new SymbolObject("local",tipo.toString()+" arr", elem_array.toString()));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO ELEMENTO_ARRAY_DULCE ENTREGA l_ARRAY_TAMAL 
            {
              Object RESULT =null;
		int localleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int localright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object local = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elem_arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elem_arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object elem_array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    annadirSymbol(new SymbolObject("local",tipo.toString()+" arr", elem_array.toString()));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIGNACION_GORRO ::= PERSONA ENTREGA EXPRESION_BOTA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIGNACION_GORRO ::= ELEMENTO_ARRAY_DULCE ENTREGA EXPRESION_BOTA 
            {
              Object RESULT =null;
		int elem_arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elem_arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object elem_array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASIGNACION_GORRO ::= ELEMENTO_ARRAY_DULCE ENTREGA l_ARRAY_TAMAL 
            {
              Object RESULT =null;
		int elem_arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elem_arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object elem_array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION_BOTA ::= l_COPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION_BOTA ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION_BOTA ::= ELEMENTO_ARRAY_DULCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION_BOTA ::= ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION_BOTA ::= CALL_FUNCTION_FANTASMA_FUTURO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION_BOTA ::= EXPRESION_ARIT_REGALOPRIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION_BOTA ::= EXPRESION_REL_REGALO_COMPRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION_BOTA ::= EXPRESION_LOG_REGALO_MANUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ELEMENTO_ARRAY_DULCE ::= PERSONA ABRE_EMPAQUE EXPRESION_BOTA CIERRA_EMPAQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    RESULT = id.toString();
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ARRAY_DULCE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // l_ARRAY_TAMAL ::= ABRE_REGALO ARG_COPO CIERRA_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_ARRAY_TAMAL",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ARRAY_OPERATION_CASCABEL ::= GRINCH_DECREMENT ELEMENTO_ARRAY_DULCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_OPERATION_CASCABEL",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ARRAY_OPERATION_CASCABEL ::= QUIEN_INCREMENT ELEMENTO_ARRAY_DULCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_OPERATION_CASCABEL",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA RODOLFO_SUM EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA TRUENO_DECREASE EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA RELAMPAGO_INT_DIVISION EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA RAYO_FLOAT_DIVISION EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA SALTARIN_ELEVATE EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA COMETA_PRODUCT EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA CUPIDO_MODULE EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION_ARIT_REGALOPRIN ::= GRINCH_DECREMENT PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION_ARIT_REGALOPRIN ::= QUIEN_INCREMENT PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION_ARIT_REGALOPRIN ::= ARRAY_OPERATION_CASCABEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_GREATER EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_LESS EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_NOT_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_GREATER_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_LESS_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION_LOG_REGALO_MANUAL ::= EXPRESION_BOTA REY_MELCHOR_COJUNCTION EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOG_REGALO_MANUAL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION_LOG_REGALO_MANUAL ::= EXPRESION_BOTA REY_GASPAR_DISJUNCTION EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOG_REGALO_MANUAL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION_LOG_REGALO_MANUAL ::= REY_BALTASAR_NOT EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOG_REGALO_MANUAL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
