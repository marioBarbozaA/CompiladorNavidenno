
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.navidad;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.io.IOException;
import java.io.FileWriter;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\005" +
    "\003\000\002\005\005\000\002\006\003\000\002\006\004" +
    "\000\002\007\004\000\002\007\005\000\002\010\006\000" +
    "\002\010\007\000\002\036\002\000\002\010\011\000\002" +
    "\012\003\000\002\012\005\000\002\013\004\000\002\011" +
    "\005\000\002\011\004\000\002\011\005\000\002\017\004" +
    "\000\002\017\003\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\022" +
    "\005\000\002\022\006\000\002\022\006\000\002\022\005" +
    "\000\002\022\006\000\002\022\005\000\002\020\010\000" +
    "\002\021\013\000\002\023\007\000\002\023\010\000\002" +
    "\023\010\000\002\023\011\000\002\025\003\000\002\025" +
    "\004\000\002\024\007\000\002\026\004\000\002\014\003" +
    "\000\002\014\004\000\002\016\005\000\002\016\007\000" +
    "\002\016\005\000\002\016\007\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\005\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\030\006\000\002\031\005\000\002\032\004\000\002" +
    "\032\004\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\004\000\002\033\004\000" +
    "\002\033\003\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\006\003\006\073\005\001\002\000\004\002" +
    "\275\001\002\000\020\027\204\030\205\031\210\032\203" +
    "\033\206\034\211\076\257\001\002\000\004\073\005\001" +
    "\002\000\010\002\000\003\006\073\005\001\002\000\010" +
    "\002\ufff0\003\ufff0\073\ufff0\001\002\000\004\053\013\001" +
    "\002\000\010\002\uffee\003\uffee\073\uffee\001\002\000\056" +
    "\003\037\013\024\014\050\015\047\026\046\035\035\036" +
    "\016\037\056\040\030\041\052\045\034\046\031\047\015" +
    "\054\022\055\021\060\043\061\045\063\014\064\057\065" +
    "\017\066\027\074\032\001\002\000\040\013\072\014\050" +
    "\015\047\026\046\035\035\036\016\037\056\040\030\041" +
    "\052\045\034\046\031\047\015\065\017\066\027\067\uffe1" +
    "\001\002\000\036\013\072\014\050\015\047\026\046\035" +
    "\035\036\016\037\056\040\030\041\052\045\034\046\031" +
    "\047\015\065\017\066\027\001\002\000\052\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\016\ufff8" +
    "\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025" +
    "\ufff8\050\ufff8\052\ufff8\054\ufff8\067\ufff8\071\ufff8\001\002" +
    "\000\004\047\244\001\002\000\052\004\uffba\005\uffba\006" +
    "\uffba\007\uffba\010\uffba\011\uffba\012\uffba\016\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\050" +
    "\uffba\052\uffba\054\uffba\067\uffba\071\uffba\001\002\000\004" +
    "\047\224\001\002\000\020\002\uffe4\003\uffe4\056\uffe4\057" +
    "\uffe4\062\uffe4\067\uffe4\073\uffe4\001\002\000\052\004\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\050\uffbf\052\uffbf\054\uffbf\067\uffbf\071\uffbf\001" +
    "\002\000\050\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe" +
    "\011\uffbe\012\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\047\073\051\067\067\uffbe" +
    "\070\172\001\002\000\056\003\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\026\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8" +
    "\045\uffc8\046\uffc8\047\uffc8\054\uffc8\055\uffc8\060\uffc8\061" +
    "\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\074\uffc8\001\002" +
    "\000\052\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011" +
    "\uffb9\012\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\050\uffb9\052\uffb9\054\uffb9\067" +
    "\uffb9\071\uffb9\001\002\000\004\047\220\001\002\000\052" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6" +
    "\024\ufff6\025\ufff6\050\ufff6\052\ufff6\054\ufff6\067\ufff6\071" +
    "\ufff6\001\002\000\052\004\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\016\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\050\ufff3\052\ufff3" +
    "\054\ufff3\067\ufff3\071\ufff3\001\002\000\016\027\204\030" +
    "\205\031\210\032\203\033\206\034\211\001\002\000\052" +
    "\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012" +
    "\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\025\uffb8\050\uffb8\052\uffb8\054\uffb8\067\uffb8\071" +
    "\uffb8\001\002\000\052\004\ufff4\005\ufff4\006\ufff4\007\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\016\ufff4\017\ufff4\020\ufff4\021" +
    "\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\050\ufff4\052\ufff4" +
    "\054\ufff4\067\ufff4\071\ufff4\001\002\000\052\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\016\ufff9" +
    "\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\050\ufff9\052\ufff9\054\ufff9\067\ufff9\071\ufff9\001\002" +
    "\000\044\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011" +
    "\uffbd\012\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\067\uffbd\070\156\001\002\000" +
    "\006\054\202\067\201\001\002\000\056\003\200\013\024" +
    "\014\050\015\047\026\046\035\035\036\016\037\056\040" +
    "\030\041\052\045\034\046\031\047\015\054\176\055\021" +
    "\060\043\061\045\063\014\064\057\065\017\066\027\074" +
    "\032\001\002\000\004\067\175\001\002\000\042\004\102" +
    "\005\113\006\107\007\106\010\114\011\104\012\111\016" +
    "\105\017\112\020\100\021\103\022\077\023\101\024\110" +
    "\025\115\067\174\001\002\000\004\047\152\001\002\000" +
    "\004\067\151\001\002\000\004\053\013\001\002\000\036" +
    "\013\072\014\050\015\047\026\046\035\035\036\016\037" +
    "\056\040\030\041\052\045\034\046\031\047\015\065\017" +
    "\066\027\001\002\000\004\013\141\001\002\000\004\013" +
    "\065\001\002\000\004\067\064\001\002\000\052\004\ufff5" +
    "\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\050\ufff5\052\ufff5\054\ufff5\067\ufff5\071\ufff5\001" +
    "\002\000\052\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb" +
    "\011\uffbb\012\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\050\uffbb\052\uffbb\054\uffbb" +
    "\067\uffbb\071\uffbb\001\002\000\004\067\063\001\002\000" +
    "\052\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa" +
    "\012\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023" +
    "\uffaa\024\uffaa\025\uffaa\050\uffaa\052\uffaa\054\uffaa\067\uffaa" +
    "\071\uffaa\001\002\000\052\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\050\ufff7\052" +
    "\ufff7\054\ufff7\067\ufff7\071\ufff7\001\002\000\004\067\062" +
    "\001\002\000\004\067\061\001\002\000\056\003\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\026\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\045\uffe0\046\uffe0\047\uffe0\054\uffe0\055" +
    "\uffe0\060\uffe0\061\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0" +
    "\074\uffe0\001\002\000\056\003\uffde\013\uffde\014\uffde\015" +
    "\uffde\026\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\045\uffde\046\uffde\047\uffde\054\uffde\055\uffde\060\uffde\061" +
    "\uffde\063\uffde\064\uffde\065\uffde\066\uffde\074\uffde\001\002" +
    "\000\056\003\uffda\013\uffda\014\uffda\015\uffda\026\uffda\035" +
    "\uffda\036\uffda\037\uffda\040\uffda\041\uffda\045\uffda\046\uffda" +
    "\047\uffda\054\uffda\055\uffda\060\uffda\061\uffda\063\uffda\064" +
    "\uffda\065\uffda\066\uffda\074\uffda\001\002\000\056\003\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\026\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\041\uffdb\045\uffdb\046\uffdb\047\uffdb\054\uffdb" +
    "\055\uffdb\060\uffdb\061\uffdb\063\uffdb\064\uffdb\065\uffdb\066" +
    "\uffdb\074\uffdb\001\002\000\054\004\uffac\005\uffac\006\uffac" +
    "\007\uffac\010\uffac\011\uffac\012\uffac\016\uffac\017\uffac\020" +
    "\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\050\uffac" +
    "\051\067\052\uffac\054\uffac\067\uffac\071\uffac\001\002\000" +
    "\052\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5" +
    "\012\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\050\uffb5\052\uffb5\054\uffb5\067\uffb5" +
    "\071\uffb5\001\002\000\036\013\072\014\050\015\047\026" +
    "\046\035\035\036\016\037\056\040\030\041\052\045\034" +
    "\046\031\047\015\065\017\066\027\001\002\000\052\004" +
    "\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\050\uffbd\052\uffbd\054\uffbd\067\uffbd\071\uffbd" +
    "\001\002\000\042\004\102\005\113\006\107\007\106\010" +
    "\114\011\104\012\111\016\105\017\112\020\100\021\103" +
    "\022\077\023\101\024\110\025\115\052\140\001\002\000" +
    "\056\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe" +
    "\012\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\047\073\050\uffbe\051\067\052\uffbe" +
    "\054\uffbe\067\uffbe\071\uffbe\001\002\000\040\013\072\014" +
    "\050\015\047\026\046\035\035\036\016\037\056\040\030" +
    "\041\052\045\034\046\031\047\015\050\076\065\017\066" +
    "\027\001\002\000\006\050\136\071\135\001\002\000\046" +
    "\004\102\005\113\006\107\007\106\010\114\011\104\012" +
    "\111\016\105\017\112\020\100\021\103\022\077\023\101" +
    "\024\110\025\115\050\ufff2\054\ufff2\071\ufff2\001\002\000" +
    "\052\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8" +
    "\012\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\050\uffd8\052\uffd8\054\uffd8\067\uffd8" +
    "\071\uffd8\001\002\000\036\013\072\014\050\015\047\026" +
    "\046\035\035\036\016\037\056\040\030\041\052\045\034" +
    "\046\031\047\015\065\017\066\027\001\002\000\036\013" +
    "\072\014\050\015\047\026\046\035\035\036\016\037\056" +
    "\040\030\041\052\045\034\046\031\047\015\065\017\066" +
    "\027\001\002\000\036\013\072\014\050\015\047\026\046" +
    "\035\035\036\016\037\056\040\030\041\052\045\034\046" +
    "\031\047\015\065\017\066\027\001\002\000\036\013\072" +
    "\014\050\015\047\026\046\035\035\036\016\037\056\040" +
    "\030\041\052\045\034\046\031\047\015\065\017\066\027" +
    "\001\002\000\036\013\072\014\050\015\047\026\046\035" +
    "\035\036\016\037\056\040\030\041\052\045\034\046\031" +
    "\047\015\065\017\066\027\001\002\000\036\013\072\014" +
    "\050\015\047\026\046\035\035\036\016\037\056\040\030" +
    "\041\052\045\034\046\031\047\015\065\017\066\027\001" +
    "\002\000\036\013\072\014\050\015\047\026\046\035\035" +
    "\036\016\037\056\040\030\041\052\045\034\046\031\047" +
    "\015\065\017\066\027\001\002\000\036\013\072\014\050" +
    "\015\047\026\046\035\035\036\016\037\056\040\030\041" +
    "\052\045\034\046\031\047\015\065\017\066\027\001\002" +
    "\000\036\013\072\014\050\015\047\026\046\035\035\036" +
    "\016\037\056\040\030\041\052\045\034\046\031\047\015" +
    "\065\017\066\027\001\002\000\036\013\072\014\050\015" +
    "\047\026\046\035\035\036\016\037\056\040\030\041\052" +
    "\045\034\046\031\047\015\065\017\066\027\001\002\000" +
    "\036\013\072\014\050\015\047\026\046\035\035\036\016" +
    "\037\056\040\030\041\052\045\034\046\031\047\015\065" +
    "\017\066\027\001\002\000\036\013\072\014\050\015\047" +
    "\026\046\035\035\036\016\037\056\040\030\041\052\045" +
    "\034\046\031\047\015\065\017\066\027\001\002\000\036" +
    "\013\072\014\050\015\047\026\046\035\035\036\016\037" +
    "\056\040\030\041\052\045\034\046\031\047\015\065\017" +
    "\066\027\001\002\000\036\013\072\014\050\015\047\026" +
    "\046\035\035\036\016\037\056\040\030\041\052\045\034" +
    "\046\031\047\015\065\017\066\027\001\002\000\036\013" +
    "\072\014\050\015\047\026\046\035\035\036\016\037\056" +
    "\040\030\041\052\045\034\046\031\047\015\065\017\066" +
    "\027\001\002\000\052\004\uffa2\005\uffa2\006\uffa2\007\uffa2" +
    "\010\uffa2\011\uffa2\012\uffa2\016\uffa2\017\uffa2\020\uffa2\021" +
    "\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\050\uffa2\052\uffa2" +
    "\054\uffa2\067\uffa2\071\uffa2\001\002\000\052\004\uffaf\005" +
    "\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\016\105" +
    "\017\112\020\100\021\103\022\077\023\101\024\110\025" +
    "\115\050\uffaf\052\uffaf\054\uffaf\067\uffaf\071\uffaf\001\002" +
    "\000\052\004\uffb2\005\uffb2\006\107\007\106\010\114\011" +
    "\104\012\111\016\105\017\112\020\100\021\103\022\077" +
    "\023\101\024\110\025\115\050\uffb2\052\uffb2\054\uffb2\067" +
    "\uffb2\071\uffb2\001\002\000\052\004\uffa8\005\uffa8\006\uffa8" +
    "\007\uffa8\010\uffa8\011\uffa8\012\uffa8\016\uffa8\017\uffa8\020" +
    "\uffa8\021\uffa8\022\uffa8\023\uffa8\024\110\025\115\050\uffa8" +
    "\052\uffa8\054\uffa8\067\uffa8\071\uffa8\001\002\000\052\004" +
    "\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad" +
    "\016\105\017\112\020\100\021\103\022\077\023\101\024" +
    "\110\025\115\050\uffad\052\uffad\054\uffad\067\uffad\071\uffad" +
    "\001\002\000\052\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010" +
    "\uffa3\011\uffa3\012\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3" +
    "\022\uffa3\023\uffa3\024\uffa3\025\115\050\uffa3\052\uffa3\054" +
    "\uffa3\067\uffa3\071\uffa3\001\002\000\052\004\uffb1\005\uffb1" +
    "\006\uffb1\007\uffb1\010\114\011\uffb1\012\111\016\105\017" +
    "\112\020\100\021\103\022\077\023\101\024\110\025\115" +
    "\050\uffb1\052\uffb1\054\uffb1\067\uffb1\071\uffb1\001\002\000" +
    "\052\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\114\011\uffb0" +
    "\012\111\016\105\017\112\020\100\021\103\022\077\023" +
    "\101\024\110\025\115\050\uffb0\052\uffb0\054\uffb0\067\uffb0" +
    "\071\uffb0\001\002\000\052\004\uffa9\005\uffa9\006\uffa9\007" +
    "\uffa9\010\uffa9\011\uffa9\012\uffa9\016\uffa9\017\uffa9\020\uffa9" +
    "\021\uffa9\022\uffa9\023\uffa9\024\110\025\115\050\uffa9\052" +
    "\uffa9\054\uffa9\067\uffa9\071\uffa9\001\002\000\052\004\uffae" +
    "\005\uffae\006\uffae\007\uffae\010\114\011\uffae\012\111\016" +
    "\105\017\112\020\100\021\103\022\077\023\101\024\110" +
    "\025\115\050\uffae\052\uffae\054\uffae\067\uffae\071\uffae\001" +
    "\002\000\052\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6" +
    "\011\uffa6\012\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022" +
    "\uffa6\023\uffa6\024\110\025\115\050\uffa6\052\uffa6\054\uffa6" +
    "\067\uffa6\071\uffa6\001\002\000\052\004\uffb3\005\uffb3\006" +
    "\107\007\106\010\114\011\104\012\111\016\105\017\112" +
    "\020\100\021\103\022\077\023\101\024\110\025\115\050" +
    "\uffb3\052\uffb3\054\uffb3\067\uffb3\071\uffb3\001\002\000\052" +
    "\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012" +
    "\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4" +
    "\024\110\025\115\050\uffa4\052\uffa4\054\uffa4\067\uffa4\071" +
    "\uffa4\001\002\000\052\004\uffa7\005\uffa7\006\uffa7\007\uffa7" +
    "\010\uffa7\011\uffa7\012\uffa7\016\uffa7\017\uffa7\020\uffa7\021" +
    "\uffa7\022\uffa7\023\uffa7\024\110\025\115\050\uffa7\052\uffa7" +
    "\054\uffa7\067\uffa7\071\uffa7\001\002\000\052\004\uffa5\005" +
    "\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\016\uffa5" +
    "\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\110\025" +
    "\115\050\uffa5\052\uffa5\054\uffa5\067\uffa5\071\uffa5\001\002" +
    "\000\036\013\072\014\050\015\047\026\046\035\035\036" +
    "\016\037\056\040\030\041\052\045\034\046\031\047\015" +
    "\065\017\066\027\001\002\000\052\004\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\050" +
    "\uffd7\052\uffd7\054\uffd7\067\uffd7\071\uffd7\001\002\000\046" +
    "\004\102\005\113\006\107\007\106\010\114\011\104\012" +
    "\111\016\105\017\112\020\100\021\103\022\077\023\101" +
    "\024\110\025\115\050\ufff1\054\ufff1\071\ufff1\001\002\000" +
    "\054\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7" +
    "\012\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023" +
    "\uffb7\024\uffb7\025\uffb7\050\uffb7\052\uffb7\054\uffb7\067\uffb7" +
    "\070\uffb7\071\uffb7\001\002\000\054\004\uffab\005\uffab\006" +
    "\uffab\007\uffab\010\uffab\011\uffab\012\uffab\016\uffab\017\uffab" +
    "\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\050" +
    "\uffab\051\067\052\uffab\054\uffab\067\uffab\071\uffab\001\002" +
    "\000\052\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011" +
    "\uffb4\012\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4" +
    "\023\uffb4\024\uffb4\025\uffb4\050\uffb4\052\uffb4\054\uffb4\067" +
    "\uffb4\071\uffb4\001\002\000\052\004\uffa1\005\uffa1\006\uffa1" +
    "\007\uffa1\010\uffa1\011\uffa1\012\uffa1\016\uffa1\017\uffa1\020" +
    "\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\050\uffa1" +
    "\052\uffa1\054\uffa1\067\uffa1\071\uffa1\001\002\000\004\062" +
    "\145\001\002\000\004\047\146\001\002\000\036\013\072" +
    "\014\050\015\047\026\046\035\035\036\016\037\056\040" +
    "\030\041\052\045\034\046\031\047\015\065\017\066\027" +
    "\001\002\000\042\004\102\005\113\006\107\007\106\010" +
    "\114\011\104\012\111\016\105\017\112\020\100\021\103" +
    "\022\077\023\101\024\110\025\115\050\150\001\002\000" +
    "\004\067\uffd2\001\002\000\056\003\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\026\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\054\uffdc\055\uffdc\060\uffdc" +
    "\061\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\074\uffdc\001" +
    "\002\000\006\013\153\074\032\001\002\000\006\051\067" +
    "\070\172\001\002\000\004\067\164\001\002\000\004\070" +
    "\156\001\002\000\040\013\072\014\050\015\047\026\046" +
    "\035\035\036\016\037\056\040\030\041\052\045\034\046" +
    "\031\047\015\053\161\065\017\066\027\001\002\000\004" +
    "\067\uffc0\001\002\000\042\004\102\005\113\006\107\007" +
    "\106\010\114\011\104\012\111\016\105\017\112\020\100" +
    "\021\103\022\077\023\101\024\110\025\115\067\uffc1\001" +
    "\002\000\036\013\072\014\050\015\047\026\046\035\035" +
    "\036\016\037\056\040\030\041\052\045\034\046\031\047" +
    "\015\065\017\066\027\001\002\000\006\054\163\071\135" +
    "\001\002\000\004\067\uffb6\001\002\000\036\013\072\014" +
    "\050\015\047\026\046\035\035\036\016\037\056\040\030" +
    "\041\052\045\034\046\031\047\015\065\017\066\027\001" +
    "\002\000\042\004\102\005\113\006\107\007\106\010\114" +
    "\011\104\012\111\016\105\017\112\020\100\021\103\022" +
    "\077\023\101\024\110\025\115\067\166\001\002\000\036" +
    "\013\072\014\050\015\047\026\046\035\035\036\016\037" +
    "\056\040\030\041\052\045\034\046\031\047\015\065\017" +
    "\066\027\001\002\000\042\004\102\005\113\006\107\007" +
    "\106\010\114\011\104\012\111\016\105\017\112\020\100" +
    "\021\103\022\077\023\101\024\110\025\115\050\170\001" +
    "\002\000\004\053\013\001\002\000\004\067\uffd1\001\002" +
    "\000\036\013\072\014\050\015\047\026\046\035\035\036" +
    "\016\037\056\040\030\041\052\045\034\046\031\047\015" +
    "\065\017\066\027\001\002\000\042\004\102\005\113\006" +
    "\107\007\106\010\114\011\104\012\111\016\105\017\112" +
    "\020\100\021\103\022\077\023\101\024\110\025\115\067" +
    "\uffc2\001\002\000\056\003\uffdf\013\uffdf\014\uffdf\015\uffdf" +
    "\026\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\045" +
    "\uffdf\046\uffdf\047\uffdf\054\uffdf\055\uffdf\060\uffdf\061\uffdf" +
    "\063\uffdf\064\uffdf\065\uffdf\066\uffdf\074\uffdf\001\002\000" +
    "\056\003\uffdd\013\uffdd\014\uffdd\015\uffdd\026\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\040\uffdd\041\uffdd\045\uffdd\046\uffdd\047" +
    "\uffdd\054\uffdd\055\uffdd\060\uffdd\061\uffdd\063\uffdd\064\uffdd" +
    "\065\uffdd\066\uffdd\074\uffdd\001\002\000\020\002\uffe5\003" +
    "\uffe5\056\uffe5\057\uffe5\062\uffe5\067\uffe5\073\uffe5\001\002" +
    "\000\056\003\uffc7\013\uffc7\014\uffc7\015\uffc7\026\uffc7\035" +
    "\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\054\uffc7\055\uffc7\060\uffc7\061\uffc7\063\uffc7\064" +
    "\uffc7\065\uffc7\066\uffc7\074\uffc7\001\002\000\004\067\201" +
    "\001\002\000\056\003\uffd9\013\uffd9\014\uffd9\015\uffd9\026" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\054\uffd9\055\uffd9\060\uffd9\061\uffd9\063" +
    "\uffd9\064\uffd9\065\uffd9\066\uffd9\074\uffd9\001\002\000\020" +
    "\002\uffe3\003\uffe3\056\uffe3\057\uffe3\062\uffe3\067\uffe3\073" +
    "\uffe3\001\002\000\004\013\ufffc\001\002\000\004\013\uffff" +
    "\001\002\000\004\013\ufffe\001\002\000\004\013\ufffb\001" +
    "\002\000\004\013\212\001\002\000\004\013\ufffd\001\002" +
    "\000\004\013\ufffa\001\002\000\010\051\067\067\uffc6\070" +
    "\216\001\002\000\006\067\uffc4\070\214\001\002\000\004" +
    "\053\161\001\002\000\004\067\uffc3\001\002\000\036\013" +
    "\072\014\050\015\047\026\046\035\035\036\016\037\056" +
    "\040\030\041\052\045\034\046\031\047\015\065\017\066" +
    "\027\001\002\000\042\004\102\005\113\006\107\007\106" +
    "\010\114\011\104\012\111\016\105\017\112\020\100\021" +
    "\103\022\077\023\101\024\110\025\115\067\uffc5\001\002" +
    "\000\040\013\072\014\050\015\047\026\046\035\035\036" +
    "\016\037\056\040\030\041\052\045\034\046\031\047\015" +
    "\050\222\065\017\066\027\001\002\000\006\050\223\071" +
    "\135\001\002\000\052\004\uffd3\005\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\016\uffd3\017\uffd3\020\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\050\uffd3\052\uffd3" +
    "\054\uffd3\067\uffd3\071\uffd3\001\002\000\052\004\uffd4\005" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\050\uffd4\052\uffd4\054\uffd4\067\uffd4\071\uffd4\001\002" +
    "\000\036\013\072\014\050\015\047\026\046\035\035\036" +
    "\016\037\056\040\030\041\052\045\034\046\031\047\015" +
    "\065\017\066\027\001\002\000\042\004\102\005\113\006" +
    "\107\007\106\010\114\011\104\012\111\016\105\017\112" +
    "\020\100\021\103\022\077\023\101\024\110\025\115\050" +
    "\226\001\002\000\004\053\013\001\002\000\010\056\230" +
    "\057\232\067\uffd0\001\002\000\004\047\240\001\002\000" +
    "\010\056\230\057\uffcc\067\uffcc\001\002\000\004\053\013" +
    "\001\002\000\006\057\232\067\uffce\001\002\000\004\067" +
    "\uffcf\001\002\000\004\067\uffcd\001\002\000\004\067\uffc9" +
    "\001\002\000\006\057\uffcb\067\uffcb\001\002\000\036\013" +
    "\072\014\050\015\047\026\046\035\035\036\016\037\056" +
    "\040\030\041\052\045\034\046\031\047\015\065\017\066" +
    "\027\001\002\000\042\004\102\005\113\006\107\007\106" +
    "\010\114\011\104\012\111\016\105\017\112\020\100\021" +
    "\103\022\077\023\101\024\110\025\115\050\242\001\002" +
    "\000\004\053\013\001\002\000\010\056\uffca\057\uffca\067" +
    "\uffca\001\002\000\040\013\072\014\050\015\047\026\046" +
    "\035\035\036\016\037\056\040\030\041\052\045\034\046" +
    "\031\047\015\050\246\065\017\066\027\001\002\000\006" +
    "\050\247\071\135\001\002\000\052\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\016\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\050" +
    "\uffd5\052\uffd5\054\uffd5\067\uffd5\071\uffd5\001\002\000\052" +
    "\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\050\uffd6\052\uffd6\054\uffd6\067\uffd6\071" +
    "\uffd6\001\002\000\042\004\102\005\113\006\107\007\106" +
    "\010\114\011\104\012\111\016\105\017\112\020\100\021" +
    "\103\022\077\023\101\024\110\025\115\050\251\001\002" +
    "\000\052\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011" +
    "\uffbc\012\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\050\uffbc\052\uffbc\054\uffbc\067" +
    "\uffbc\071\uffbc\001\002\000\042\004\102\005\113\006\107" +
    "\007\106\010\114\011\104\012\111\016\105\017\112\020" +
    "\100\021\103\022\077\023\101\024\110\025\115\067\uffe2" +
    "\001\002\000\010\002\uffef\003\uffef\073\uffef\001\002\000" +
    "\004\053\013\001\002\000\010\002\uffed\003\uffed\073\uffed" +
    "\001\002\000\004\013\262\001\002\000\004\047\260\001" +
    "\002\000\004\050\261\001\002\000\004\053\uffec\001\002" +
    "\000\004\047\263\001\002\000\020\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\050\265\001\002\000\016" +
    "\027\204\030\205\031\210\032\203\033\206\034\211\001" +
    "\002\000\004\053\uffeb\001\002\000\006\050\uffe8\071\uffe8" +
    "\001\002\000\006\050\273\071\272\001\002\000\004\013" +
    "\271\001\002\000\006\050\uffe6\071\uffe6\001\002\000\016" +
    "\027\204\030\205\031\210\032\203\033\206\034\211\001" +
    "\002\000\004\053\uffe9\001\002\000\006\050\uffe7\071\uffe7" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\012\002\003\006\006\007\007\010\010\001" +
    "\001\000\002\001\001\000\004\003\255\001\001\000\004" +
    "\010\253\001\001\000\006\007\252\010\010\001\001\000" +
    "\002\001\001\000\004\011\011\001\001\000\002\001\001" +
    "\000\040\004\022\014\037\015\024\016\057\017\040\020" +
    "\050\021\043\022\052\023\053\027\041\030\035\032\054" +
    "\033\017\034\025\035\032\001\001\000\022\004\022\022" +
    "\052\027\251\030\067\032\054\033\017\034\025\035\032" +
    "\001\001\000\022\004\022\022\052\027\247\030\067\032" +
    "\054\033\017\034\025\035\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\022\015\176\016\057" +
    "\017\040\020\050\021\043\022\052\023\053\027\041\030" +
    "\035\032\054\033\017\034\025\035\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\143\001\001\000\022\004\022\022\052" +
    "\027\142\030\067\032\054\033\017\034\025\035\032\001" +
    "\001\000\004\030\141\001\001\000\004\030\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\022\022\052\027\070\030" +
    "\067\032\054\033\017\034\025\035\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\022\005\073\022\052\027\074\030\067\032\054\033\017" +
    "\034\025\035\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\022\022\052\027\133" +
    "\030\067\032\054\033\017\034\025\035\032\001\001\000" +
    "\022\004\022\022\052\027\132\030\067\032\054\033\017" +
    "\034\025\035\032\001\001\000\022\004\022\022\052\027" +
    "\131\030\067\032\054\033\017\034\025\035\032\001\001" +
    "\000\022\004\022\022\052\027\130\030\067\032\054\033" +
    "\017\034\025\035\032\001\001\000\022\004\022\022\052" +
    "\027\127\030\067\032\054\033\017\034\025\035\032\001" +
    "\001\000\022\004\022\022\052\027\126\030\067\032\054" +
    "\033\017\034\025\035\032\001\001\000\022\004\022\022" +
    "\052\027\125\030\067\032\054\033\017\034\025\035\032" +
    "\001\001\000\022\004\022\022\052\027\124\030\067\032" +
    "\054\033\017\034\025\035\032\001\001\000\022\004\022" +
    "\022\052\027\123\030\067\032\054\033\017\034\025\035" +
    "\032\001\001\000\022\004\022\022\052\027\122\030\067" +
    "\032\054\033\017\034\025\035\032\001\001\000\022\004" +
    "\022\022\052\027\121\030\067\032\054\033\017\034\025" +
    "\035\032\001\001\000\022\004\022\022\052\027\120\030" +
    "\067\032\054\033\017\034\025\035\032\001\001\000\022" +
    "\004\022\022\052\027\117\030\067\032\054\033\017\034" +
    "\025\035\032\001\001\000\022\004\022\022\052\027\116" +
    "\030\067\032\054\033\017\034\025\035\032\001\001\000" +
    "\022\004\022\022\052\027\115\030\067\032\054\033\017" +
    "\034\025\035\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\022\022\052\027\136\030\067\032\054" +
    "\033\017\034\025\035\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\022\022\052\027\146\030\067\032\054" +
    "\033\017\034\025\035\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\153\030\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\004\022\022\052\027\157\030\067\031\156" +
    "\032\054\033\017\034\025\035\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\022\005\161\022\052" +
    "\027\074\030\067\032\054\033\017\034\025\035\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\022" +
    "\022\052\027\164\030\067\032\054\033\017\034\025\035" +
    "\032\001\001\000\002\001\001\000\022\004\022\022\052" +
    "\027\166\030\067\032\054\033\017\034\025\035\032\001" +
    "\001\000\002\001\001\000\004\011\170\001\001\000\002" +
    "\001\001\000\022\004\022\022\052\027\172\030\067\032" +
    "\054\033\017\034\025\035\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\214\001\001\000\002\001\001\000\022" +
    "\004\022\022\052\027\216\030\067\032\054\033\017\034" +
    "\025\035\032\001\001\000\002\001\001\000\024\004\022" +
    "\005\220\022\052\027\074\030\067\032\054\033\017\034" +
    "\025\035\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\022\022\052\027\224\030" +
    "\067\032\054\033\017\034\025\035\032\001\001\000\002" +
    "\001\001\000\004\011\226\001\001\000\010\024\230\025" +
    "\232\026\233\001\001\000\002\001\001\000\006\024\230" +
    "\025\236\001\001\000\004\011\235\001\001\000\004\026" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\022\022\052\027" +
    "\240\030\067\032\054\033\017\034\025\035\032\001\001" +
    "\000\002\001\001\000\004\011\242\001\001\000\002\001" +
    "\001\000\024\004\022\005\244\022\052\027\074\030\067" +
    "\032\054\033\017\034\025\035\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\263\001\001\000\010\003\267" +
    "\012\266\013\265\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\267\013\273\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }



  // https://www2.cs.tum.edu/projects/cup/docs.php#errors:~:text=4.%20Customizing%20the%20Parser

  Lexer lex;
  StringBuilder dataSegment = new StringBuilder();
  StringBuilder mainSegment = new StringBuilder();

  public parser(Lexer lex) {
    this.lex = lex;
    this.symbolFactory = new DefaultSymbolFactory();
  }

  // Se tiene que hacer un override a los metodos para atrapar los errores
  // Esta llama a report_error("Syntax error", null); // creo que se puede hacer override de report_fatal_error

  //Tener en cuenta la sintaxis de los errores en la documentacion de CUP
  // La expresion de error se deja al final de cada produccion
  //Es diferente al ejemplo del profe, no es necesario tener que crear una expresion de error para cada produccion
  /*
  stmt ::= expr SEMI | while_stmt SEMI | if_stmt SEMI | ... |
	     error SEMI
	     ;
  */
  public void syntax_error(Symbol cur_token){
    if (cur_token.value == null) {
      System.err.println("Chimenea cerrada en linea " + cur_token.left + ", columna " + cur_token.right + ": " + cur_token.sym);
      return;
    } else {
      System.err.println("Chimenea cerrada en linea " + cur_token.left + ", columna " + cur_token.right + ": " + cur_token.sym + ", valor: " + cur_token.value);
      System.out.println("Buscando otra entrada...");
      return;
    }    
  } 

  // este llama a report_fatal_error("Couldn't repair and continue parse", null); // creo que se puede hacer override de report_fatal_error.
  public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
    if (cur_token.value == null) {
       throw new Exception("No se han entregado regalos en esta casa... " );
    } else {
      throw new Exception("Chimenea cerrada en linea " + cur_token.left + ", columna " + cur_token.right + ": " + cur_token.sym + ", valor: " + cur_token.value);
    }
   
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


  public void hola() {
    System.out.println("Hola");
  }
  public void adios() {
    System.out.println("Adios\n");
  }
  
  public void errorNavideno(String mensaje){
    System.err.println("Santa te ha traido un carbon semantico: "+mensaje);
  }
    HashMap<String, ArrayList<SymbolObject>> listaTablasSimbolos = new HashMap<String, ArrayList<SymbolObject>>();
    String currentHash = "";
    FabricarFuncion ultimaFuncion = null;
    HashMap<String, FabricarFuncion> fabricarFuncionMap = new HashMap<String, FabricarFuncion>();

    public void agregarFuncion(FabricarFuncion funcion) {
        fabricarFuncionMap.put(funcion.getNombre(), funcion);
        for (Map.Entry<String, FabricarFuncion> entry : fabricarFuncionMap.entrySet()) {
          }
        ultimaFuncion = funcion; 
    }

    public FabricarFuncion buscarFuncion(String nombreFuncion) {
        return fabricarFuncionMap.get(nombreFuncion);
    }


    public FabricarFuncion funcionActual() {
        return ultimaFuncion;
    }

    public void imprimirTablasSimbolos(){
      for (String key : listaTablasSimbolos.keySet()) {
        System.out.println("Tabla de simbolos: " + key);
        System.out.println("Variables: ");
        for (SymbolObject variable : listaTablasSimbolos.get(key)) {
          System.out.println(variable.toString());
        }
        System.out.println(" ");
      }
  }
    public void cambiarContexto(String nombreFuncion) {
        currentHash = nombreFuncion;
        listaTablasSimbolos.put(nombreFuncion, new ArrayList<SymbolObject>());
    }

    public void annadirSymbol(SymbolObject symbol) {
    listaTablasSimbolos.get(currentHash).add(symbol);
  }

public void exportarTablaSimbolosHTML() {
    List<String[]> data = new ArrayList<>();
    data.add(new String[]{"Tabla", "Tipo Entrada", "Nombre", "Tipo Dato"});

    for (Map.Entry<String, ArrayList<SymbolObject>> entry : listaTablasSimbolos.entrySet()) {
        for (SymbolObject value : entry.getValue()) {
            data.add(new String[]{entry.getKey(), value.getEntrada(), value.getID(), value.getTipo()});
        }
    }

    StringBuilder htmlBuilder = new StringBuilder();
    htmlBuilder.append("<html><head><title>Tabla de Símbolos</title>");
    htmlBuilder.append("<style>");
    htmlBuilder.append("@import url('https://fonts.googleapis.com/css?family=Roboto:400,700');");
    htmlBuilder.append("table { border-collapse: separate; width: 100%; box-shadow: 0 2px 3px rgba(0,0,0,0.1);");
    htmlBuilder.append("font-family: 'Roboto', sans-serif; color: #333; margin: 25px 0; border-spacing: 0; }");
    htmlBuilder.append("thead { background-color: #8A33FF; color: #FFF; }");
    htmlBuilder.append("th { font-weight: 700; padding: 12px 15px; text-align: left; }");
    htmlBuilder.append("td { border-top: 1px solid #DDD; padding: 12px 15px; text-align: left; }");
    htmlBuilder.append("tbody tr:nth-child(odd) { background-color: #F6F6F6; }");
    htmlBuilder.append("tbody tr:nth-child(even) { background-color: #E9E9E9; }");
    htmlBuilder.append("</style></head><body><table>");

    // Aquí añadimos la cabecera de la tabla
    htmlBuilder.append("<thead><tr>");
    for (String header : data.get(0)) {
        htmlBuilder.append("<th>").append(header).append("</th>");
    }
    htmlBuilder.append("</tr></thead><tbody>");

    // Luego el resto de los datos
    for (int i = 1; i < data.size(); i++) {
        String[] row = data.get(i);
        htmlBuilder.append("<tr>");
        for (String cell : row) {
            htmlBuilder.append("<td>").append(cell).append("</td>");
        }
        htmlBuilder.append("</tr>");
    }

    htmlBuilder.append("</tbody></table></body></html>");

    // Escribe el HTML en un archivo
    try (FileWriter writer = new FileWriter("src/test/java/com/navidad/tabla_simbolos.html")) {
        writer.write(htmlBuilder.toString());
    } catch (IOException e) {
        e.printStackTrace();
    }

    System.out.println("Tabla de símbolos exportada a tabla_simbolos.html");
}

  

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= NAVIDAD EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NAVIDAD ::= FUNCIONES_BOLSA_NAVIDENNA 
            {
              Object RESULT =null;
		
        hola();
        exportarTablaSimbolosHTML();
        imprimirTablasSimbolos();
        
        if (buscarFuncion("main") == null) {
          System.err.println("No se ha encontrado la funcion main");
        } 


        adios();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NAVIDAD",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // T_COPO ::= COLACHO_INT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // T_COPO ::= JOULUPUKKI_FLOAT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // T_COPO ::= PAPA_NOEL_BOOLEAN 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // T_COPO ::= CLAUS_CHAR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // T_COPO ::= SANTA_STRING 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // T_COPO ::= VIEJITO_PASCUERO_ARRAY 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // l_COPO ::= L_COLACHO_INT 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // l_COPO ::= L_JOULUPUKKI_FLOAT 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // l_COPO ::= L_CLAUS_CHAR 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // l_COPO ::= L_SANTA_STRING 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // l_COPO ::= L_VIEJITO_PASCUERO_ARRAY 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // l_COPO ::= PAPA_NOEL_TRUE 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // l_COPO ::= PAPA_NOEL_FALSE 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARG_COPO ::= EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG_COPO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARG_COPO ::= ARG_COPO SEPARADOR_BASTON EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG_COPO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCIONES_BOLSA_NAVIDENNA ::= FUNCION_REGALO 
            {
              Object RESULT =null;
		
        
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_BOLSA_NAVIDENNA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCIONES_BOLSA_NAVIDENNA ::= FUNCIONES_BOLSA_NAVIDENNA FUNCION_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_BOLSA_NAVIDENNA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCION_REGALO ::= DEF_JUGUETE CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION_REGALO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCION_REGALO ::= error DEF_JUGUETE CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION_REGALO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DEF_JUGUETE ::= FUNCTION_VILLANCICOS ESTRELLA_MAIN ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;
		int Funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object Fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              if (buscarFuncion("main") != null) {
                errorNavideno("Ya existe una funcion main");
              }
              else{
                cambiarContexto("main");
                RESULT = "main";
                annadirSymbol(new SymbolObject("function","int","main"));
                agregarFuncion(new FabricarFuncion("main", tipoPrimario.INT, true, new tipoPrimario[] {}));
              }
              
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF_JUGUETE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DEF_JUGUETE ::= FUNCTION_VILLANCICOS T_COPO PERSONA ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;
		int Funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object Fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object Tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                String tipoEvaluado = Tipo.toString();
                if (tipoEvaluado!="char" && tipoEvaluado!="int" && tipoEvaluado!="float" && tipoEvaluado!="bool") {
                  errorNavideno("Tipo no válido: " + tipoEvaluado);
                } else {

                    if (buscarFuncion(id.toString()) != null) {
                        errorNavideno("Ya existe una funcion con el nombre: " + id.toString());
                    } else {
                        cambiarContexto(id.toString());
                        RESULT = id.toString();
                        annadirSymbol(new SymbolObject("function",Tipo.toString(), id.toString()));
                        agregarFuncion(new FabricarFuncion(id.toString(), HerramientasFabrica.clasificarTipo(Tipo.toString()), false, new tipoPrimario[] {}));
                    }
                }

              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF_JUGUETE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$0 ::= 
            {
              Object RESULT =null;
		int Funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object Fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object Tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                String tipoEvaluado = Tipo.toString();
                if (tipoEvaluado!="char" && tipoEvaluado!="int" && tipoEvaluado!="float" && tipoEvaluado!="bool") {
                  errorNavideno("Tipo no válido: " + tipoEvaluado);
                } else {

                    if (buscarFuncion(id.toString()) != null) {
                        errorNavideno("Ya existe una funcion con el nombre: " + id.toString());
                    } else {
                        cambiarContexto(id.toString());
                        RESULT = id.toString();
                        annadirSymbol(new SymbolObject("function",Tipo.toString(), id.toString()));
                        agregarFuncion(new FabricarFuncion(id.toString(), HerramientasFabrica.clasificarTipo(Tipo.toString()), false, new tipoPrimario[] {}));
                    }
                }
              cambiarContexto(id.toString());
              annadirSymbol(new SymbolObject("function",Tipo.toString(), id.toString()));
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEF_JUGUETE ::= FUNCTION_VILLANCICOS T_COPO PERSONA ABRE_CUENTO NT$0 PARAMETROS_PALETAS CIERRE_CUENTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int Funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object Fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int Tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object Tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF_JUGUETE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMETROS_PALETAS ::= PARAMETRO_PALETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PALETAS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMETROS_PALETAS ::= PARAMETROS_PALETAS SEPARADOR_BASTON PARAMETRO_PALETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PALETAS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMETRO_PALETA ::= T_COPO PERSONA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                annadirSymbol(new SymbolObject("param",tipo.toString(), id.toString()));
                // 
                funcionActual().agregarTipoParametro(HerramientasFabrica.clasificarTipo(tipo.toString()));
                agregarFuncion(funcionActual());
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_PALETA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CODIGO_ENVOLTURA ::= ABRE_REGALO LINEAS_LAZOS CIERRA_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO_ENVOLTURA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CODIGO_ENVOLTURA ::= ABRE_REGALO CIERRA_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO_ENVOLTURA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CODIGO_ENVOLTURA ::= ABRE_REGALO error CIERRA_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO_ENVOLTURA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RETORNO_BURRITO_SABANERO ::= ENVIA_RETURN EXPRESION_BOTA 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            tipoPrimario tipo = ((FabricarExpresion)expr).getTipado();
                            tipoPrimario retorno = funcionActual().getTipado(); 
                            if (retorno != tipo){
                              errorNavideno("El tipo de retorno no coincide con el tipo de la funcion en la linea");
                            }
                            else{
                              funcionActual().setRetorna(true);
                              agregarFuncion(funcionActual());
                            }
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO_BURRITO_SABANERO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RETORNO_BURRITO_SABANERO ::= ENVIA_RETURN 
            {
              Object RESULT =null;
		

                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO_BURRITO_SABANERO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LINEA_LAZO ::= ASIGNACION_GORRO FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LINEA_LAZO ::= EXPRESION_BOTA FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LINEA_LAZO ::= CORTA_BREAK FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LINEA_LAZO ::= RETORNO_BURRITO_SABANERO FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LINEA_LAZO ::= FOR_FANTASMA_PRESENTE FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LINEA_LAZO ::= DO_UNTIL_FANTASMA_PASADO FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LINEA_LAZO ::= IF_JUANITO_ESCARCHA FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LINEA_LAZO ::= error FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CALL_FUNCTION_FANTASMA_FUTURO ::= PERSONA ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CALL_FUNCTION_FANTASMA_FUTURO ::= PERSONA ABRE_CUENTO ARG_COPO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CALL_FUNCTION_FANTASMA_FUTURO ::= NARRA_PRINT ABRE_CUENTO ARG_COPO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CALL_FUNCTION_FANTASMA_FUTURO ::= NARRA_PRINT ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CALL_FUNCTION_FANTASMA_FUTURO ::= ESCUCHA_READ ABRE_CUENTO ARG_COPO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CALL_FUNCTION_FANTASMA_FUTURO ::= ESCUCHA_READ ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DO_UNTIL_FANTASMA_PASADO ::= HACE_DO CODIGO_ENVOLTURA REVISA_UNTIL ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_UNTIL_FANTASMA_PASADO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FOR_FANTASMA_PRESENTE ::= ENVUELVE_FOR ABRE_CUENTO ASIGNACION_GORRO FIN_REGALO EXPRESION_BOTA FIN_REGALO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR_FANTASMA_PRESENTE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IF_JUANITO_ESCARCHA ::= ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_JUANITO_ESCARCHA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IF_JUANITO_ESCARCHA ::= ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA ELSE_SCROOGE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_JUANITO_ESCARCHA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IF_JUANITO_ESCARCHA ::= ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA ELIF_MULTI_JACK_FROST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_JUANITO_ESCARCHA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IF_JUANITO_ESCARCHA ::= ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA ELIF_MULTI_JACK_FROST ELSE_SCROOGE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_JUANITO_ESCARCHA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELIF_MULTI_JACK_FROST ::= ELIF_BATMAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIF_MULTI_JACK_FROST",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELIF_MULTI_JACK_FROST ::= ELIF_BATMAN ELIF_MULTI_JACK_FROST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIF_MULTI_JACK_FROST",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELIF_BATMAN ::= HADA_ELIF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIF_BATMAN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELSE_SCROOGE ::= DUENDE_ELSE CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_SCROOGE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LINEAS_LAZOS ::= LINEA_LAZO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEAS_LAZOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LINEAS_LAZOS ::= LINEAS_LAZOS LINEA_LAZO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEAS_LAZOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO PERSONA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    annadirSymbol(new SymbolObject("local",tipo.toString(), id.toString()));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO PERSONA ENTREGA EXPRESION_BOTA 
            {
              Object RESULT =null;
		int localleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int localright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object local = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    annadirSymbol(new SymbolObject("local",tipo.toString(), id.toString()));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO ELEMENTO_ARRAY_DULCE 
            {
              Object RESULT =null;
		int localleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int localright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object local = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elem_arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elem_arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elem_array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    annadirSymbol(new SymbolObject("local",tipo.toString()+" arr", elem_array.toString()));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO ELEMENTO_ARRAY_DULCE ENTREGA l_ARRAY_TAMAL 
            {
              Object RESULT =null;
		int localleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int localright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object local = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elem_arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elem_arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object elem_array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    annadirSymbol(new SymbolObject("local",tipo.toString()+" arr", elem_array.toString()));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASIGNACION_GORRO ::= PERSONA ENTREGA EXPRESION_BOTA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIGNACION_GORRO ::= ELEMENTO_ARRAY_DULCE ENTREGA EXPRESION_BOTA 
            {
              Object RESULT =null;
		int elem_arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elem_arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object elem_array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASIGNACION_GORRO ::= ELEMENTO_ARRAY_DULCE ENTREGA l_ARRAY_TAMAL 
            {
              Object RESULT =null;
		int elem_arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elem_arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object elem_array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION_BOTA ::= l_COPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION_BOTA ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION_BOTA ::= ELEMENTO_ARRAY_DULCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION_BOTA ::= ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION_BOTA ::= CALL_FUNCTION_FANTASMA_FUTURO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION_BOTA ::= EXPRESION_ARIT_REGALOPRIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION_BOTA ::= EXPRESION_REL_REGALO_COMPRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION_BOTA ::= EXPRESION_LOG_REGALO_MANUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ELEMENTO_ARRAY_DULCE ::= PERSONA ABRE_EMPAQUE EXPRESION_BOTA CIERRA_EMPAQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    RESULT = id.toString();
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ARRAY_DULCE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // l_ARRAY_TAMAL ::= ABRE_REGALO ARG_COPO CIERRA_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_ARRAY_TAMAL",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ARRAY_OPERATION_CASCABEL ::= GRINCH_DECREMENT ELEMENTO_ARRAY_DULCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_OPERATION_CASCABEL",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ARRAY_OPERATION_CASCABEL ::= QUIEN_INCREMENT ELEMENTO_ARRAY_DULCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_OPERATION_CASCABEL",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA RODOLFO_SUM EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA TRUENO_DECREASE EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA RELAMPAGO_INT_DIVISION EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA RAYO_FLOAT_DIVISION EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA SALTARIN_ELEVATE EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA COMETA_PRODUCT EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA CUPIDO_MODULE EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION_ARIT_REGALOPRIN ::= GRINCH_DECREMENT PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION_ARIT_REGALOPRIN ::= QUIEN_INCREMENT PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION_ARIT_REGALOPRIN ::= ARRAY_OPERATION_CASCABEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_GREATER EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_LESS EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_NOT_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_GREATER_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_LESS_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION_LOG_REGALO_MANUAL ::= EXPRESION_BOTA REY_MELCHOR_COJUNCTION EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOG_REGALO_MANUAL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION_LOG_REGALO_MANUAL ::= EXPRESION_BOTA REY_GASPAR_DISJUNCTION EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOG_REGALO_MANUAL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION_LOG_REGALO_MANUAL ::= REY_BALTASAR_NOT EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOG_REGALO_MANUAL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
