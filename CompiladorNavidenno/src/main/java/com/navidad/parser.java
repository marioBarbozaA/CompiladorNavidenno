
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.navidad;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\005\003\000\002\005" +
    "\005\000\002\006\003\000\002\006\004\000\002\007\004" +
    "\000\002\010\006\000\002\010\007\000\002\010\010\000" +
    "\002\012\003\000\002\012\005\000\002\013\004\000\002" +
    "\011\005\000\002\011\004\000\002\017\004\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\022\005\000\002\022\006\000\002\022\006\000\002" +
    "\022\005\000\002\022\006\000\002\022\005\000\002\020" +
    "\010\000\002\021\013\000\002\023\007\000\002\023\010" +
    "\000\002\023\010\000\002\023\011\000\002\025\003\000" +
    "\002\025\004\000\002\024\007\000\002\026\004\000\002" +
    "\014\003\000\002\014\004\000\002\016\005\000\002\016" +
    "\007\000\002\016\005\000\002\016\005\000\002\016\007" +
    "\000\002\016\005\000\002\016\005\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\005\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\030\006\000\002\031\005\000\002\032\004" +
    "\000\002\032\004\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\004\000\002\033" +
    "\004\000\002\033\003\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\004\072\005\001\002\000\004\002\264\001" +
    "\002\000\020\027\207\030\210\031\213\032\206\033\211" +
    "\034\214\075\247\001\002\000\006\002\000\072\005\001" +
    "\002\000\006\002\ufff1\072\ufff1\001\002\000\004\052\012" +
    "\001\002\000\006\002\uffef\072\uffef\001\002\000\052\013" +
    "\036\014\046\015\043\026\025\035\026\036\023\037\031" +
    "\040\050\044\051\045\053\046\055\053\044\054\042\057" +
    "\052\060\024\062\020\063\054\064\047\065\022\073\037" +
    "\001\002\000\044\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\011\uffc3\012\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\066\uffc3\067\137\001" +
    "\002\000\052\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\047\uffc5\051\uffc5\053\uffc5" +
    "\066\uffc5\070\uffc5\001\002\000\052\004\uffb0\005\uffb0\006" +
    "\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\016\uffb0\017\uffb0" +
    "\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\047" +
    "\uffb0\051\uffb0\053\uffb0\066\uffb0\070\uffb0\001\002\000\004" +
    "\066\244\001\002\000\004\066\243\001\002\000\034\013" +
    "\060\014\046\015\043\026\025\035\026\036\023\037\031" +
    "\040\050\044\051\045\053\046\055\064\047\065\022\001" +
    "\002\000\004\066\241\001\002\000\004\046\235\001\002" +
    "\000\052\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\047\ufff8\051\ufff8\053\ufff8\066" +
    "\ufff8\070\ufff8\001\002\000\004\052\012\001\002\000\034" +
    "\013\060\014\046\015\043\026\025\035\026\036\023\037" +
    "\031\040\050\044\051\045\053\046\055\064\047\065\022" +
    "\001\002\000\052\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9" +
    "\022\ufff9\023\ufff9\024\ufff9\025\ufff9\047\ufff9\051\ufff9\053" +
    "\ufff9\066\ufff9\070\ufff9\001\002\000\052\013\036\014\046" +
    "\015\043\026\025\035\026\036\023\037\031\040\050\044" +
    "\051\045\053\046\055\053\226\054\042\057\052\060\024" +
    "\062\020\063\054\064\047\065\022\073\037\001\002\000" +
    "\052\013\uffce\014\uffce\015\uffce\026\uffce\035\uffce\036\uffce" +
    "\037\uffce\040\uffce\044\uffce\045\uffce\046\uffce\053\uffce\054" +
    "\uffce\057\uffce\060\uffce\062\uffce\063\uffce\064\uffce\065\uffce" +
    "\073\uffce\001\002\000\052\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\047\ufff7\051" +
    "\ufff7\053\ufff7\066\ufff7\070\ufff7\001\002\000\052\004\uffc0" +
    "\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\016" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\047\uffc0\051\uffc0\053\uffc0\066\uffc0\070\uffc0\001" +
    "\002\000\004\066\224\001\002\000\052\004\uffc1\005\uffc1" +
    "\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\047\uffc1\051\uffc1\053\uffc1\066\uffc1\070\uffc1\001\002\000" +
    "\042\004\071\005\102\006\076\007\075\010\103\011\073" +
    "\012\100\016\074\017\101\020\067\021\072\022\066\023" +
    "\070\024\077\025\104\066\223\001\002\000\050\004\uffc4" +
    "\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4" +
    "\025\uffc4\046\062\050\061\066\uffc4\067\153\001\002\000" +
    "\016\027\207\030\210\031\213\032\206\033\211\034\214" +
    "\001\002\000\052\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010" +
    "\uffbe\011\uffbe\012\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\024\uffbe\025\uffbe\047\uffbe\051\uffbe\053" +
    "\uffbe\066\uffbe\070\uffbe\001\002\000\004\066\205\001\002" +
    "\000\004\046\165\001\002\000\004\013\163\001\002\000" +
    "\016\002\uffe7\055\uffe7\056\uffe7\061\uffe7\066\uffe7\072\uffe7" +
    "\001\002\000\052\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010" +
    "\uffbf\011\uffbf\012\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\025\uffbf\047\uffbf\051\uffbf\053" +
    "\uffbf\066\uffbf\070\uffbf\001\002\000\004\013\161\001\002" +
    "\000\004\046\155\001\002\000\052\004\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\047" +
    "\ufff6\051\ufff6\053\ufff6\066\ufff6\070\ufff6\001\002\000\052" +
    "\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\025\ufff5\047\ufff5\051\ufff5\053\ufff5\066\ufff5\070" +
    "\ufff5\001\002\000\004\046\133\001\002\000\052\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\016" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\025\ufff4\047\ufff4\051\ufff4\053\ufff4\066\ufff4\070\ufff4\001" +
    "\002\000\004\066\132\001\002\000\034\013\060\014\046" +
    "\015\043\026\025\035\026\036\023\037\031\040\050\044" +
    "\051\045\053\046\055\064\047\065\022\001\002\000\052" +
    "\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\047\uffc3\051\uffc3\053\uffc3\066\uffc3\070" +
    "\uffc3\001\002\000\042\004\071\005\102\006\076\007\075" +
    "\010\103\011\073\012\100\016\074\017\101\020\067\021" +
    "\072\022\066\023\070\024\077\025\104\047\131\001\002" +
    "\000\056\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011" +
    "\uffc4\012\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\046\062\047\uffc4\050\061\051" +
    "\uffc4\053\uffc4\066\uffc4\070\uffc4\001\002\000\034\013\060" +
    "\014\046\015\043\026\025\035\026\036\023\037\031\040" +
    "\050\044\051\045\053\046\055\064\047\065\022\001\002" +
    "\000\036\013\060\014\046\015\043\026\025\035\026\036" +
    "\023\037\031\040\050\044\051\045\053\046\055\047\065" +
    "\064\047\065\022\001\002\000\006\047\125\070\124\001" +
    "\002\000\046\004\071\005\102\006\076\007\075\010\103" +
    "\011\073\012\100\016\074\017\101\020\067\021\072\022" +
    "\066\023\070\024\077\025\104\047\ufff3\053\ufff3\070\ufff3" +
    "\001\002\000\052\004\uffde\005\uffde\006\uffde\007\uffde\010" +
    "\uffde\011\uffde\012\uffde\016\uffde\017\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\024\uffde\025\uffde\047\uffde\051\uffde\053" +
    "\uffde\066\uffde\070\uffde\001\002\000\034\013\060\014\046" +
    "\015\043\026\025\035\026\036\023\037\031\040\050\044" +
    "\051\045\053\046\055\064\047\065\022\001\002\000\034" +
    "\013\060\014\046\015\043\026\025\035\026\036\023\037" +
    "\031\040\050\044\051\045\053\046\055\064\047\065\022" +
    "\001\002\000\034\013\060\014\046\015\043\026\025\035" +
    "\026\036\023\037\031\040\050\044\051\045\053\046\055" +
    "\064\047\065\022\001\002\000\034\013\060\014\046\015" +
    "\043\026\025\035\026\036\023\037\031\040\050\044\051" +
    "\045\053\046\055\064\047\065\022\001\002\000\034\013" +
    "\060\014\046\015\043\026\025\035\026\036\023\037\031" +
    "\040\050\044\051\045\053\046\055\064\047\065\022\001" +
    "\002\000\034\013\060\014\046\015\043\026\025\035\026" +
    "\036\023\037\031\040\050\044\051\045\053\046\055\064" +
    "\047\065\022\001\002\000\034\013\060\014\046\015\043" +
    "\026\025\035\026\036\023\037\031\040\050\044\051\045" +
    "\053\046\055\064\047\065\022\001\002\000\034\013\060" +
    "\014\046\015\043\026\025\035\026\036\023\037\031\040" +
    "\050\044\051\045\053\046\055\064\047\065\022\001\002" +
    "\000\034\013\060\014\046\015\043\026\025\035\026\036" +
    "\023\037\031\040\050\044\051\045\053\046\055\064\047" +
    "\065\022\001\002\000\034\013\060\014\046\015\043\026" +
    "\025\035\026\036\023\037\031\040\050\044\051\045\053" +
    "\046\055\064\047\065\022\001\002\000\034\013\060\014" +
    "\046\015\043\026\025\035\026\036\023\037\031\040\050" +
    "\044\051\045\053\046\055\064\047\065\022\001\002\000" +
    "\034\013\060\014\046\015\043\026\025\035\026\036\023" +
    "\037\031\040\050\044\051\045\053\046\055\064\047\065" +
    "\022\001\002\000\034\013\060\014\046\015\043\026\025" +
    "\035\026\036\023\037\031\040\050\044\051\045\053\046" +
    "\055\064\047\065\022\001\002\000\034\013\060\014\046" +
    "\015\043\026\025\035\026\036\023\037\031\040\050\044" +
    "\051\045\053\046\055\064\047\065\022\001\002\000\034" +
    "\013\060\014\046\015\043\026\025\035\026\036\023\037" +
    "\031\040\050\044\051\045\053\046\055\064\047\065\022" +
    "\001\002\000\052\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010" +
    "\uffa8\011\uffa8\012\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8" +
    "\022\uffa8\023\uffa8\024\uffa8\025\uffa8\047\uffa8\051\uffa8\053" +
    "\uffa8\066\uffa8\070\uffa8\001\002\000\052\004\uffb5\005\uffb5" +
    "\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\016\074\017" +
    "\101\020\067\021\072\022\066\023\070\024\077\025\104" +
    "\047\uffb5\051\uffb5\053\uffb5\066\uffb5\070\uffb5\001\002\000" +
    "\052\004\uffb8\005\uffb8\006\076\007\075\010\103\011\073" +
    "\012\100\016\074\017\101\020\067\021\072\022\066\023" +
    "\070\024\077\025\104\047\uffb8\051\uffb8\053\uffb8\066\uffb8" +
    "\070\uffb8\001\002\000\052\004\uffae\005\uffae\006\uffae\007" +
    "\uffae\010\uffae\011\uffae\012\uffae\016\uffae\017\uffae\020\uffae" +
    "\021\uffae\022\uffae\023\uffae\024\077\025\104\047\uffae\051" +
    "\uffae\053\uffae\066\uffae\070\uffae\001\002\000\052\004\uffb3" +
    "\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\016" +
    "\074\017\101\020\067\021\072\022\066\023\070\024\077" +
    "\025\104\047\uffb3\051\uffb3\053\uffb3\066\uffb3\070\uffb3\001" +
    "\002\000\052\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9" +
    "\011\uffa9\012\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\025\104\047\uffa9\051\uffa9\053\uffa9" +
    "\066\uffa9\070\uffa9\001\002\000\052\004\uffb7\005\uffb7\006" +
    "\uffb7\007\uffb7\010\103\011\uffb7\012\100\016\074\017\101" +
    "\020\067\021\072\022\066\023\070\024\077\025\104\047" +
    "\uffb7\051\uffb7\053\uffb7\066\uffb7\070\uffb7\001\002\000\052" +
    "\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\103\011\uffb6\012" +
    "\100\016\074\017\101\020\067\021\072\022\066\023\070" +
    "\024\077\025\104\047\uffb6\051\uffb6\053\uffb6\066\uffb6\070" +
    "\uffb6\001\002\000\052\004\uffaf\005\uffaf\006\uffaf\007\uffaf" +
    "\010\uffaf\011\uffaf\012\uffaf\016\uffaf\017\uffaf\020\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\024\077\025\104\047\uffaf\051\uffaf" +
    "\053\uffaf\066\uffaf\070\uffaf\001\002\000\052\004\uffb4\005" +
    "\uffb4\006\uffb4\007\uffb4\010\103\011\uffb4\012\100\016\074" +
    "\017\101\020\067\021\072\022\066\023\070\024\077\025" +
    "\104\047\uffb4\051\uffb4\053\uffb4\066\uffb4\070\uffb4\001\002" +
    "\000\052\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\011" +
    "\uffac\012\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac" +
    "\023\uffac\024\077\025\104\047\uffac\051\uffac\053\uffac\066" +
    "\uffac\070\uffac\001\002\000\052\004\uffb9\005\uffb9\006\076" +
    "\007\075\010\103\011\073\012\100\016\074\017\101\020" +
    "\067\021\072\022\066\023\070\024\077\025\104\047\uffb9" +
    "\051\uffb9\053\uffb9\066\uffb9\070\uffb9\001\002\000\052\004" +
    "\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa" +
    "\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024" +
    "\077\025\104\047\uffaa\051\uffaa\053\uffaa\066\uffaa\070\uffaa" +
    "\001\002\000\052\004\uffad\005\uffad\006\uffad\007\uffad\010" +
    "\uffad\011\uffad\012\uffad\016\uffad\017\uffad\020\uffad\021\uffad" +
    "\022\uffad\023\uffad\024\077\025\104\047\uffad\051\uffad\053" +
    "\uffad\066\uffad\070\uffad\001\002\000\052\004\uffab\005\uffab" +
    "\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\016\uffab\017" +
    "\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\077\025\104" +
    "\047\uffab\051\uffab\053\uffab\066\uffab\070\uffab\001\002\000" +
    "\034\013\060\014\046\015\043\026\025\035\026\036\023" +
    "\037\031\040\050\044\051\045\053\046\055\064\047\065" +
    "\022\001\002\000\052\004\uffdd\005\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\047\uffdd\051\uffdd" +
    "\053\uffdd\066\uffdd\070\uffdd\001\002\000\046\004\071\005" +
    "\102\006\076\007\075\010\103\011\073\012\100\016\074" +
    "\017\101\020\067\021\072\022\066\023\070\024\077\025" +
    "\104\047\ufff2\053\ufff2\070\ufff2\001\002\000\042\004\071" +
    "\005\102\006\076\007\075\010\103\011\073\012\100\016" +
    "\074\017\101\020\067\021\072\022\066\023\070\024\077" +
    "\025\104\051\130\001\002\000\054\004\uffbd\005\uffbd\006" +
    "\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\047" +
    "\uffbd\051\uffbd\053\uffbd\066\uffbd\067\uffbd\070\uffbd\001\002" +
    "\000\052\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011" +
    "\uffc2\012\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\047\uffc2\051\uffc2\053\uffc2\066" +
    "\uffc2\070\uffc2\001\002\000\052\013\uffe3\014\uffe3\015\uffe3" +
    "\026\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\044\uffe3\045" +
    "\uffe3\046\uffe3\053\uffe3\054\uffe3\057\uffe3\060\uffe3\062\uffe3" +
    "\063\uffe3\064\uffe3\065\uffe3\073\uffe3\001\002\000\006\013" +
    "\134\073\037\001\002\000\006\050\061\067\153\001\002" +
    "\000\004\066\145\001\002\000\004\067\137\001\002\000" +
    "\036\013\060\014\046\015\043\026\025\035\026\036\023" +
    "\037\031\040\050\044\051\045\053\046\055\052\142\064" +
    "\047\065\022\001\002\000\004\066\uffc6\001\002\000\042" +
    "\004\071\005\102\006\076\007\075\010\103\011\073\012" +
    "\100\016\074\017\101\020\067\021\072\022\066\023\070" +
    "\024\077\025\104\066\uffc7\001\002\000\034\013\060\014" +
    "\046\015\043\026\025\035\026\036\023\037\031\040\050" +
    "\044\051\045\053\046\055\064\047\065\022\001\002\000" +
    "\006\053\144\070\124\001\002\000\004\066\uffbc\001\002" +
    "\000\034\013\060\014\046\015\043\026\025\035\026\036" +
    "\023\037\031\040\050\044\051\045\053\046\055\064\047" +
    "\065\022\001\002\000\042\004\071\005\102\006\076\007" +
    "\075\010\103\011\073\012\100\016\074\017\101\020\067" +
    "\021\072\022\066\023\070\024\077\025\104\066\147\001" +
    "\002\000\034\013\060\014\046\015\043\026\025\035\026" +
    "\036\023\037\031\040\050\044\051\045\053\046\055\064" +
    "\047\065\022\001\002\000\042\004\071\005\102\006\076" +
    "\007\075\010\103\011\073\012\100\016\074\017\101\020" +
    "\067\021\072\022\066\023\070\024\077\025\104\047\151" +
    "\001\002\000\004\052\012\001\002\000\004\066\uffd7\001" +
    "\002\000\034\013\060\014\046\015\043\026\025\035\026" +
    "\036\023\037\031\040\050\044\051\045\053\046\055\064" +
    "\047\065\022\001\002\000\042\004\071\005\102\006\076" +
    "\007\075\010\103\011\073\012\100\016\074\017\101\020" +
    "\067\021\072\022\066\023\070\024\077\025\104\066\uffca" +
    "\001\002\000\036\013\060\014\046\015\043\026\025\035" +
    "\026\036\023\037\031\040\050\044\051\045\053\046\055" +
    "\047\157\064\047\065\022\001\002\000\006\047\160\070" +
    "\124\001\002\000\052\004\uffdb\005\uffdb\006\uffdb\007\uffdb" +
    "\010\uffdb\011\uffdb\012\uffdb\016\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\047\uffdb\051\uffdb" +
    "\053\uffdb\066\uffdb\070\uffdb\001\002\000\052\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\047\uffdc\051\uffdc\053\uffdc\066\uffdc\070\uffdc\001\002" +
    "\000\054\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011" +
    "\uffb2\012\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2" +
    "\023\uffb2\024\uffb2\025\uffb2\047\uffb2\050\061\051\uffb2\053" +
    "\uffb2\066\uffb2\070\uffb2\001\002\000\052\004\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\047\uffbb\051\uffbb\053\uffbb\066\uffbb\070\uffbb\001\002\000" +
    "\054\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1" +
    "\012\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\024\uffb1\025\uffb1\047\uffb1\050\061\051\uffb1\053\uffb1" +
    "\066\uffb1\070\uffb1\001\002\000\052\004\uffba\005\uffba\006" +
    "\uffba\007\uffba\010\uffba\011\uffba\012\uffba\016\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\047" +
    "\uffba\051\uffba\053\uffba\066\uffba\070\uffba\001\002\000\034" +
    "\013\060\014\046\015\043\026\025\035\026\036\023\037" +
    "\031\040\050\044\051\045\053\046\055\064\047\065\022" +
    "\001\002\000\042\004\071\005\102\006\076\007\075\010" +
    "\103\011\073\012\100\016\074\017\101\020\067\021\072" +
    "\022\066\023\070\024\077\025\104\047\167\001\002\000" +
    "\004\052\012\001\002\000\010\055\172\056\173\066\uffd6" +
    "\001\002\000\010\055\172\056\uffd2\066\uffd2\001\002\000" +
    "\004\046\200\001\002\000\004\052\012\001\002\000\006" +
    "\056\173\066\uffd4\001\002\000\004\066\uffd5\001\002\000" +
    "\004\066\uffd3\001\002\000\004\066\uffcf\001\002\000\034" +
    "\013\060\014\046\015\043\026\025\035\026\036\023\037" +
    "\031\040\050\044\051\045\053\046\055\064\047\065\022" +
    "\001\002\000\042\004\071\005\102\006\076\007\075\010" +
    "\103\011\073\012\100\016\074\017\101\020\067\021\072" +
    "\022\066\023\070\024\077\025\104\047\202\001\002\000" +
    "\004\052\012\001\002\000\010\055\uffd0\056\uffd0\066\uffd0" +
    "\001\002\000\006\056\uffd1\066\uffd1\001\002\000\052\013" +
    "\uffe0\014\uffe0\015\uffe0\026\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\044\uffe0\045\uffe0\046\uffe0\053\uffe0\054\uffe0\057" +
    "\uffe0\060\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\073\uffe0" +
    "\001\002\000\004\013\ufffc\001\002\000\004\013\uffff\001" +
    "\002\000\004\013\ufffe\001\002\000\004\013\ufffb\001\002" +
    "\000\004\013\215\001\002\000\004\013\ufffd\001\002\000" +
    "\004\013\ufffa\001\002\000\010\050\061\066\uffcc\067\221" +
    "\001\002\000\006\066\uffc9\067\217\001\002\000\004\052" +
    "\142\001\002\000\004\066\uffc8\001\002\000\034\013\060" +
    "\014\046\015\043\026\025\035\026\036\023\037\031\040" +
    "\050\044\051\045\053\046\055\064\047\065\022\001\002" +
    "\000\042\004\071\005\102\006\076\007\075\010\103\011" +
    "\073\012\100\016\074\017\101\020\067\021\072\022\066" +
    "\023\070\024\077\025\104\066\uffcb\001\002\000\052\013" +
    "\uffe4\014\uffe4\015\uffe4\026\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\044\uffe4\045\uffe4\046\uffe4\053\uffe4\054\uffe4\057" +
    "\uffe4\060\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\073\uffe4" +
    "\001\002\000\052\013\uffe5\014\uffe5\015\uffe5\026\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\044\uffe5\045\uffe5\046\uffe5" +
    "\053\uffe5\054\uffe5\057\uffe5\060\uffe5\062\uffe5\063\uffe5\064" +
    "\uffe5\065\uffe5\073\uffe5\001\002\000\052\013\uffcd\014\uffcd" +
    "\015\uffcd\026\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\044" +
    "\uffcd\045\uffcd\046\uffcd\053\uffcd\054\uffcd\057\uffcd\060\uffcd" +
    "\062\uffcd\063\uffcd\064\uffcd\065\uffcd\073\uffcd\001\002\000" +
    "\016\002\uffe8\055\uffe8\056\uffe8\061\uffe8\066\uffe8\072\uffe8" +
    "\001\002\000\052\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010" +
    "\uffa7\011\uffa7\012\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7" +
    "\022\uffa7\023\uffa7\024\uffa7\025\uffa7\047\uffa7\051\uffa7\053" +
    "\uffa7\066\uffa7\070\uffa7\001\002\000\004\061\231\001\002" +
    "\000\004\046\232\001\002\000\034\013\060\014\046\015" +
    "\043\026\025\035\026\036\023\037\031\040\050\044\051" +
    "\045\053\046\055\064\047\065\022\001\002\000\042\004" +
    "\071\005\102\006\076\007\075\010\103\011\073\012\100" +
    "\016\074\017\101\020\067\021\072\022\066\023\070\024" +
    "\077\025\104\047\234\001\002\000\004\066\uffd8\001\002" +
    "\000\036\013\060\014\046\015\043\026\025\035\026\036" +
    "\023\037\031\040\050\044\051\045\053\046\055\047\237" +
    "\064\047\065\022\001\002\000\006\047\240\070\124\001" +
    "\002\000\052\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\047\uffd9\051\uffd9\053\uffd9" +
    "\066\uffd9\070\uffd9\001\002\000\052\004\uffda\005\uffda\006" +
    "\uffda\007\uffda\010\uffda\011\uffda\012\uffda\016\uffda\017\uffda" +
    "\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\047" +
    "\uffda\051\uffda\053\uffda\066\uffda\070\uffda\001\002\000\052" +
    "\013\uffdf\014\uffdf\015\uffdf\026\uffdf\035\uffdf\036\uffdf\037" +
    "\uffdf\040\uffdf\044\uffdf\045\uffdf\046\uffdf\053\uffdf\054\uffdf" +
    "\057\uffdf\060\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\073" +
    "\uffdf\001\002\000\042\004\071\005\102\006\076\007\075" +
    "\010\103\011\073\012\100\016\074\017\101\020\067\021" +
    "\072\022\066\023\070\024\077\025\104\066\uffe6\001\002" +
    "\000\052\013\uffe2\014\uffe2\015\uffe2\026\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\044\uffe2\045\uffe2\046\uffe2\053\uffe2" +
    "\054\uffe2\057\uffe2\060\uffe2\062\uffe2\063\uffe2\064\uffe2\065" +
    "\uffe2\073\uffe2\001\002\000\052\013\uffe1\014\uffe1\015\uffe1" +
    "\026\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\044\uffe1\045" +
    "\uffe1\046\uffe1\053\uffe1\054\uffe1\057\uffe1\060\uffe1\062\uffe1" +
    "\063\uffe1\064\uffe1\065\uffe1\073\uffe1\001\002\000\006\002" +
    "\ufff0\072\ufff0\001\002\000\004\013\252\001\002\000\004" +
    "\046\250\001\002\000\004\047\251\001\002\000\004\052" +
    "\uffee\001\002\000\004\046\253\001\002\000\020\027\207" +
    "\030\210\031\213\032\206\033\211\034\214\047\254\001" +
    "\002\000\004\052\uffed\001\002\000\006\047\uffeb\070\uffeb" +
    "\001\002\000\006\047\262\070\261\001\002\000\004\013" +
    "\260\001\002\000\006\047\uffe9\070\uffe9\001\002\000\016" +
    "\027\207\030\210\031\213\032\206\033\211\034\214\001" +
    "\002\000\004\052\uffec\001\002\000\006\047\uffea\070\uffea" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\012\002\003\006\005\007\006\010\007\001" +
    "\001\000\002\001\001\000\004\003\245\001\001\000\006" +
    "\007\244\010\007\001\001\000\002\001\001\000\004\011" +
    "\010\001\001\000\002\001\001\000\040\004\013\014\026" +
    "\015\027\016\032\017\016\020\040\021\015\022\033\023" +
    "\020\027\034\030\012\032\014\033\031\034\044\035\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\013" +
    "\022\033\027\241\030\055\032\014\033\031\034\044\035" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\227\001\001\000\022\004\013\022" +
    "\033\027\226\030\055\032\014\033\031\034\044\035\037" +
    "\001\001\000\002\001\001\000\036\004\013\015\224\016" +
    "\032\017\016\020\040\021\015\022\033\023\020\027\034" +
    "\030\012\032\014\033\031\034\044\035\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\013\022\033\027\056\030\055\032\014\033\031\034" +
    "\044\035\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\013\022\033\027\126\030" +
    "\055\032\014\033\031\034\044\035\037\001\001\000\024" +
    "\004\013\005\062\022\033\027\063\030\055\032\014\033" +
    "\031\034\044\035\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\013\022\033\027" +
    "\122\030\055\032\014\033\031\034\044\035\037\001\001" +
    "\000\022\004\013\022\033\027\121\030\055\032\014\033" +
    "\031\034\044\035\037\001\001\000\022\004\013\022\033" +
    "\027\120\030\055\032\014\033\031\034\044\035\037\001" +
    "\001\000\022\004\013\022\033\027\117\030\055\032\014" +
    "\033\031\034\044\035\037\001\001\000\022\004\013\022" +
    "\033\027\116\030\055\032\014\033\031\034\044\035\037" +
    "\001\001\000\022\004\013\022\033\027\115\030\055\032" +
    "\014\033\031\034\044\035\037\001\001\000\022\004\013" +
    "\022\033\027\114\030\055\032\014\033\031\034\044\035" +
    "\037\001\001\000\022\004\013\022\033\027\113\030\055" +
    "\032\014\033\031\034\044\035\037\001\001\000\022\004" +
    "\013\022\033\027\112\030\055\032\014\033\031\034\044" +
    "\035\037\001\001\000\022\004\013\022\033\027\111\030" +
    "\055\032\014\033\031\034\044\035\037\001\001\000\022" +
    "\004\013\022\033\027\110\030\055\032\014\033\031\034" +
    "\044\035\037\001\001\000\022\004\013\022\033\027\107" +
    "\030\055\032\014\033\031\034\044\035\037\001\001\000" +
    "\022\004\013\022\033\027\106\030\055\032\014\033\031" +
    "\034\044\035\037\001\001\000\022\004\013\022\033\027" +
    "\105\030\055\032\014\033\031\034\044\035\037\001\001" +
    "\000\022\004\013\022\033\027\104\030\055\032\014\033" +
    "\031\034\044\035\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\013\022\033\027\125\030\055\032" +
    "\014\033\031\034\044\035\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\134\030\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\004\013\022\033\027\140\030\055\031\137" +
    "\032\014\033\031\034\044\035\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\013\005\142\022\033" +
    "\027\063\030\055\032\014\033\031\034\044\035\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\013" +
    "\022\033\027\145\030\055\032\014\033\031\034\044\035" +
    "\037\001\001\000\002\001\001\000\022\004\013\022\033" +
    "\027\147\030\055\032\014\033\031\034\044\035\037\001" +
    "\001\000\002\001\001\000\004\011\151\001\001\000\002" +
    "\001\001\000\022\004\013\022\033\027\153\030\055\032" +
    "\014\033\031\034\044\035\037\001\001\000\002\001\001" +
    "\000\024\004\013\005\155\022\033\027\063\030\055\032" +
    "\014\033\031\034\044\035\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\013\022\033\027\165\030\055\032\014\033\031\034" +
    "\044\035\037\001\001\000\002\001\001\000\004\011\167" +
    "\001\001\000\010\024\170\025\173\026\174\001\001\000" +
    "\006\024\170\025\203\001\001\000\002\001\001\000\004" +
    "\011\176\001\001\000\004\026\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\013" +
    "\022\033\027\200\030\055\032\014\033\031\034\044\035" +
    "\037\001\001\000\002\001\001\000\004\011\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\217\001\001\000\002\001\001\000\022\004\013\022" +
    "\033\027\221\030\055\032\014\033\031\034\044\035\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\013\022" +
    "\033\027\232\030\055\032\014\033\031\034\044\035\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\013\005\235\022\033\027\063\030\055\032\014\033\031" +
    "\034\044\035\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\256\012\255\013" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\256\013\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


  Lexer lex;

  public parser(Lexer lex) {
    this.lex = lex;
    this.symbolFactory = new DefaultSymbolFactory();
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


  public void hola() {
    System.out.println("Hola");
  }
  public void adios() {
    System.out.println("Adios");
  }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= NAVIDAD EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NAVIDAD ::= FUNCIONES_BOLSA_NAVIDENNA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NAVIDAD",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // T_COPO ::= COLACHO_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // T_COPO ::= JOULUPUKKI_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // T_COPO ::= PAPA_NOEL_BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // T_COPO ::= CLAUS_CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // T_COPO ::= SANTA_STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // T_COPO ::= VIEJITO_PASCUERO_ARRAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // l_COPO ::= L_COLACHO_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // l_COPO ::= L_JOULUPUKKI_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // l_COPO ::= L_CLAUS_CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // l_COPO ::= L_SANTA_STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // l_COPO ::= PAPA_NOEL_TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // l_COPO ::= PAPA_NOEL_FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ARG_COPO ::= EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG_COPO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARG_COPO ::= ARG_COPO SEPARADOR_BASTON EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG_COPO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCIONES_BOLSA_NAVIDENNA ::= FUNCION_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_BOLSA_NAVIDENNA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCIONES_BOLSA_NAVIDENNA ::= FUNCIONES_BOLSA_NAVIDENNA FUNCION_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_BOLSA_NAVIDENNA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCION_REGALO ::= DEF_JUGUETE CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION_REGALO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DEF_JUGUETE ::= FUNCTION_VILLANCICOS ESTRELLA_MAIN ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF_JUGUETE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DEF_JUGUETE ::= FUNCTION_VILLANCICOS T_COPO PERSONA ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF_JUGUETE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DEF_JUGUETE ::= FUNCTION_VILLANCICOS T_COPO PERSONA ABRE_CUENTO PARAMETROS_PALETAS CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF_JUGUETE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMETROS_PALETAS ::= PARAMETRO_PALETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PALETAS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMETROS_PALETAS ::= PARAMETROS_PALETAS SEPARADOR_BASTON PARAMETRO_PALETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PALETAS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMETRO_PALETA ::= T_COPO PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_PALETA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CODIGO_ENVOLTURA ::= ABRE_REGALO LINEAS_LAZOS CIERRA_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO_ENVOLTURA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CODIGO_ENVOLTURA ::= ABRE_REGALO CIERRA_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO_ENVOLTURA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RETORNO_BURRITO_SABANERO ::= ENVIA_RETURN EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO_BURRITO_SABANERO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LINEA_LAZO ::= ASIGNACION_GORRO FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LINEA_LAZO ::= EXPRESION_BOTA FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LINEA_LAZO ::= CORTA_BREAK FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LINEA_LAZO ::= RETORNO_BURRITO_SABANERO FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LINEA_LAZO ::= FOR_FANTASMA_PRESENTE FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LINEA_LAZO ::= DO_UNTIL_FANTASMA_PASADO FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LINEA_LAZO ::= IF_JUANITO_ESCARCHA FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CALL_FUNCTION_FANTASMA_FUTURO ::= PERSONA ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CALL_FUNCTION_FANTASMA_FUTURO ::= PERSONA ABRE_CUENTO ARG_COPO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CALL_FUNCTION_FANTASMA_FUTURO ::= NARRA_PRINT ABRE_CUENTO ARG_COPO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CALL_FUNCTION_FANTASMA_FUTURO ::= NARRA_PRINT ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CALL_FUNCTION_FANTASMA_FUTURO ::= ESCUCHA_READ ABRE_CUENTO ARG_COPO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CALL_FUNCTION_FANTASMA_FUTURO ::= ESCUCHA_READ ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DO_UNTIL_FANTASMA_PASADO ::= HACE_DO CODIGO_ENVOLTURA REVISA_UNTIL ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_UNTIL_FANTASMA_PASADO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FOR_FANTASMA_PRESENTE ::= ENVUELVE_FOR ABRE_CUENTO ASIGNACION_GORRO FIN_REGALO EXPRESION_BOTA FIN_REGALO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR_FANTASMA_PRESENTE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF_JUANITO_ESCARCHA ::= ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_JUANITO_ESCARCHA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IF_JUANITO_ESCARCHA ::= ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA ELSE_SCROOGE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_JUANITO_ESCARCHA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF_JUANITO_ESCARCHA ::= ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA ELIF_MULTI_JACK_FROST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_JUANITO_ESCARCHA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF_JUANITO_ESCARCHA ::= ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA ELIF_MULTI_JACK_FROST ELSE_SCROOGE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_JUANITO_ESCARCHA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELIF_MULTI_JACK_FROST ::= ELIF_BATMAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIF_MULTI_JACK_FROST",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELIF_MULTI_JACK_FROST ::= ELIF_BATMAN ELIF_MULTI_JACK_FROST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIF_MULTI_JACK_FROST",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELIF_BATMAN ::= HADA_ELIF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIF_BATMAN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELSE_SCROOGE ::= DUENDE_ELSE CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_SCROOGE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LINEAS_LAZOS ::= LINEA_LAZO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEAS_LAZOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LINEAS_LAZOS ::= LINEAS_LAZOS LINEA_LAZO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEAS_LAZOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO PERSONA ENTREGA EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIGNACION_GORRO ::= PERSONA ENTREGA EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO ELEMENTO_ARRAY_DULCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO ELEMENTO_ARRAY_DULCE ENTREGA l_ARRAY_TAMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIGNACION_GORRO ::= ELEMENTO_ARRAY_DULCE ENTREGA EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIGNACION_GORRO ::= ELEMENTO_ARRAY_DULCE ENTREGA l_ARRAY_TAMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION_BOTA ::= l_COPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION_BOTA ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION_BOTA ::= ELEMENTO_ARRAY_DULCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION_BOTA ::= ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION_BOTA ::= CALL_FUNCTION_FANTASMA_FUTURO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION_BOTA ::= EXPRESION_ARIT_REGALOPRIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION_BOTA ::= EXPRESION_REL_REGALO_COMPRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION_BOTA ::= EXPRESION_LOG_REGALO_MANUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ELEMENTO_ARRAY_DULCE ::= PERSONA ABRE_EMPAQUE EXPRESION_BOTA CIERRA_EMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ARRAY_DULCE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // l_ARRAY_TAMAL ::= ABRE_REGALO ARG_COPO CIERRA_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_ARRAY_TAMAL",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ARRAY_OPERATION_CASCABEL ::= GRINCH_DECREMENT ELEMENTO_ARRAY_DULCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_OPERATION_CASCABEL",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ARRAY_OPERATION_CASCABEL ::= QUIEN_INCREMENT ELEMENTO_ARRAY_DULCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_OPERATION_CASCABEL",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA RODOLFO_SUM EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA TRUENO_DECREASE EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA RELAMPAGO_INT_DIVISION EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA RAYO_FLOAT_DIVISION EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA SALTARIN_ELEVATE EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA COMETA_PRODUCT EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA CUPIDO_MODULE EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION_ARIT_REGALOPRIN ::= GRINCH_DECREMENT PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION_ARIT_REGALOPRIN ::= QUIEN_INCREMENT PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION_ARIT_REGALOPRIN ::= ARRAY_OPERATION_CASCABEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_GREATER EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_LESS EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_NOT_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_GREATER_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_LESS_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION_LOG_REGALO_MANUAL ::= EXPRESION_BOTA REY_MELCHOR_COJUNCTION EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOG_REGALO_MANUAL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION_LOG_REGALO_MANUAL ::= EXPRESION_BOTA REY_GASPAR_DISJUNCTION EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOG_REGALO_MANUAL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION_LOG_REGALO_MANUAL ::= REY_BALTASAR_NOT EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOG_REGALO_MANUAL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
