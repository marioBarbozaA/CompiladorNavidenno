
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.navidad;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\005\003\000\002\005" +
    "\005\000\002\006\003\000\002\006\004\000\002\007\004" +
    "\000\002\010\006\000\002\010\007\000\002\010\010\000" +
    "\002\012\003\000\002\012\005\000\002\013\004\000\002" +
    "\011\005\000\002\011\004\000\002\017\004\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\003\000" +
    "\002\022\005\000\002\022\006\000\002\022\006\000\002" +
    "\022\005\000\002\022\006\000\002\022\005\000\002\020" +
    "\010\000\002\021\013\000\002\023\007\000\002\023\010" +
    "\000\002\023\010\000\002\023\011\000\002\025\003\000" +
    "\002\025\004\000\002\024\007\000\002\026\004\000\002" +
    "\014\003\000\002\014\004\000\002\016\006\000\002\016" +
    "\010\000\002\016\006\000\002\016\006\000\002\016\010" +
    "\000\002\016\005\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\005\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\030" +
    "\006\000\002\031\005\000\002\032\004\000\002\032\004" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\003\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\004\074\005\001\002\000\004\002\266\001" +
    "\002\000\020\027\206\030\207\031\212\032\205\033\210" +
    "\034\213\077\251\001\002\000\006\002\000\074\005\001" +
    "\002\000\006\002\ufff1\074\ufff1\001\002\000\004\054\012" +
    "\001\002\000\006\002\uffef\074\uffef\001\002\000\052\013" +
    "\036\014\047\015\044\026\027\035\025\036\023\037\050" +
    "\040\031\041\052\042\043\050\055\055\045\056\042\061" +
    "\053\062\024\064\020\065\054\066\051\067\022\075\037" +
    "\001\002\000\044\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010" +
    "\uffc4\011\uffc4\012\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\070\uffc4\071\137\001" +
    "\002\000\052\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\051\uffc6\053\uffc6\055\uffc6" +
    "\070\uffc6\072\uffc6\001\002\000\004\070\246\001\002\000" +
    "\052\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3" +
    "\012\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023" +
    "\uffb3\024\uffb3\025\uffb3\051\uffb3\053\uffb3\055\uffb3\070\uffb3" +
    "\072\uffb3\001\002\000\004\070\245\001\002\000\034\013" +
    "\060\014\047\015\044\026\027\035\025\036\023\037\050" +
    "\040\031\041\052\042\043\050\055\066\051\067\022\001" +
    "\002\000\052\013\uffdf\014\uffdf\015\uffdf\026\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\050\uffdf\055" +
    "\uffdf\056\uffdf\061\uffdf\062\uffdf\064\uffdf\065\uffdf\066\uffdf" +
    "\067\uffdf\075\uffdf\001\002\000\004\050\240\001\002\000" +
    "\052\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023" +
    "\ufff8\024\ufff8\025\ufff8\051\ufff8\053\ufff8\055\ufff8\070\ufff8" +
    "\072\ufff8\001\002\000\004\054\012\001\002\000\052\004" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024" +
    "\ufff9\025\ufff9\051\ufff9\053\ufff9\055\ufff9\070\ufff9\072\ufff9" +
    "\001\002\000\052\013\036\014\047\015\044\026\027\035" +
    "\025\036\023\037\050\040\031\041\052\042\043\050\055" +
    "\055\232\056\042\061\053\062\024\064\020\065\054\066" +
    "\051\067\022\075\037\001\002\000\034\013\060\014\047" +
    "\015\044\026\027\035\025\036\023\037\050\040\031\041" +
    "\052\042\043\050\055\066\051\067\022\001\002\000\052" +
    "\013\uffce\014\uffce\015\uffce\026\uffce\035\uffce\036\uffce\037" +
    "\uffce\040\uffce\041\uffce\042\uffce\050\uffce\055\uffce\056\uffce" +
    "\061\uffce\062\uffce\064\uffce\065\uffce\066\uffce\067\uffce\075" +
    "\uffce\001\002\000\052\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\016\ufff6\017\ufff6\020\ufff6\021" +
    "\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\051\ufff6\053\ufff6" +
    "\055\ufff6\070\ufff6\072\ufff6\001\002\000\052\004\uffc1\005" +
    "\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\016\uffc1" +
    "\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\051\uffc1\053\uffc1\055\uffc1\070\uffc1\072\uffc1\001\002" +
    "\000\004\070\227\001\002\000\052\004\uffc2\005\uffc2\006" +
    "\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\016\uffc2\017\uffc2" +
    "\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\051" +
    "\uffc2\053\uffc2\055\uffc2\070\uffc2\072\uffc2\001\002\000\042" +
    "\004\071\005\102\006\076\007\075\010\103\011\072\012" +
    "\100\016\074\017\101\020\067\021\073\022\066\023\070" +
    "\024\077\025\104\070\226\001\002\000\050\004\uffc5\005" +
    "\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\016\uffc5" +
    "\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025" +
    "\uffc5\050\062\052\061\070\uffc5\071\152\001\002\000\016" +
    "\027\206\030\207\031\212\032\205\033\210\034\213\001" +
    "\002\000\052\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf" +
    "\011\uffbf\012\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\051\uffbf\053\uffbf\055\uffbf" +
    "\070\uffbf\072\uffbf\001\002\000\004\070\204\001\002\000" +
    "\004\050\164\001\002\000\052\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\051\ufff4" +
    "\053\ufff4\055\ufff4\070\ufff4\072\ufff4\001\002\000\004\013" +
    "\161\001\002\000\066\002\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\026\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042" +
    "\uffe7\050\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7" +
    "\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070" +
    "\uffe7\074\uffe7\075\uffe7\001\002\000\052\004\uffc0\005\uffc0" +
    "\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\016\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\051\uffc0\053\uffc0\055\uffc0\070\uffc0\072\uffc0\001\002\000" +
    "\004\013\161\001\002\000\052\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\051\ufff7" +
    "\053\ufff7\055\ufff7\070\ufff7\072\ufff7\001\002\000\004\050" +
    "\155\001\002\000\052\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\016\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\051\ufff5\053\ufff5" +
    "\055\ufff5\070\ufff5\072\ufff5\001\002\000\004\050\133\001" +
    "\002\000\004\070\132\001\002\000\034\013\060\014\047" +
    "\015\044\026\027\035\025\036\023\037\050\040\031\041" +
    "\052\042\043\050\055\066\051\067\022\001\002\000\052" +
    "\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012" +
    "\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\051\uffc4\053\uffc4\055\uffc4\070\uffc4\072" +
    "\uffc4\001\002\000\042\004\071\005\102\006\076\007\075" +
    "\010\103\011\072\012\100\016\074\017\101\020\067\021" +
    "\073\022\066\023\070\024\077\025\104\051\131\001\002" +
    "\000\056\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011" +
    "\uffc5\012\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\050\062\051\uffc5\052\061\053" +
    "\uffc5\055\uffc5\070\uffc5\072\uffc5\001\002\000\034\013\060" +
    "\014\047\015\044\026\027\035\025\036\023\037\050\040" +
    "\031\041\052\042\043\050\055\066\051\067\022\001\002" +
    "\000\036\013\060\014\047\015\044\026\027\035\025\036" +
    "\023\037\050\040\031\041\052\042\043\050\055\051\065" +
    "\066\051\067\022\001\002\000\006\051\125\072\124\001" +
    "\002\000\046\004\071\005\102\006\076\007\075\010\103" +
    "\011\072\012\100\016\074\017\101\020\067\021\073\022" +
    "\066\023\070\024\077\025\104\051\ufff3\055\ufff3\072\ufff3" +
    "\001\002\000\052\004\uffde\005\uffde\006\uffde\007\uffde\010" +
    "\uffde\011\uffde\012\uffde\016\uffde\017\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\024\uffde\025\uffde\051\uffde\053\uffde\055" +
    "\uffde\070\uffde\072\uffde\001\002\000\034\013\060\014\047" +
    "\015\044\026\027\035\025\036\023\037\050\040\031\041" +
    "\052\042\043\050\055\066\051\067\022\001\002\000\034" +
    "\013\060\014\047\015\044\026\027\035\025\036\023\037" +
    "\050\040\031\041\052\042\043\050\055\066\051\067\022" +
    "\001\002\000\034\013\060\014\047\015\044\026\027\035" +
    "\025\036\023\037\050\040\031\041\052\042\043\050\055" +
    "\066\051\067\022\001\002\000\034\013\060\014\047\015" +
    "\044\026\027\035\025\036\023\037\050\040\031\041\052" +
    "\042\043\050\055\066\051\067\022\001\002\000\034\013" +
    "\060\014\047\015\044\026\027\035\025\036\023\037\050" +
    "\040\031\041\052\042\043\050\055\066\051\067\022\001" +
    "\002\000\034\013\060\014\047\015\044\026\027\035\025" +
    "\036\023\037\050\040\031\041\052\042\043\050\055\066" +
    "\051\067\022\001\002\000\034\013\060\014\047\015\044" +
    "\026\027\035\025\036\023\037\050\040\031\041\052\042" +
    "\043\050\055\066\051\067\022\001\002\000\034\013\060" +
    "\014\047\015\044\026\027\035\025\036\023\037\050\040" +
    "\031\041\052\042\043\050\055\066\051\067\022\001\002" +
    "\000\034\013\060\014\047\015\044\026\027\035\025\036" +
    "\023\037\050\040\031\041\052\042\043\050\055\066\051" +
    "\067\022\001\002\000\034\013\060\014\047\015\044\026" +
    "\027\035\025\036\023\037\050\040\031\041\052\042\043" +
    "\050\055\066\051\067\022\001\002\000\034\013\060\014" +
    "\047\015\044\026\027\035\025\036\023\037\050\040\031" +
    "\041\052\042\043\050\055\066\051\067\022\001\002\000" +
    "\034\013\060\014\047\015\044\026\027\035\025\036\023" +
    "\037\050\040\031\041\052\042\043\050\055\066\051\067" +
    "\022\001\002\000\034\013\060\014\047\015\044\026\027" +
    "\035\025\036\023\037\050\040\031\041\052\042\043\050" +
    "\055\066\051\067\022\001\002\000\034\013\060\014\047" +
    "\015\044\026\027\035\025\036\023\037\050\040\031\041" +
    "\052\042\043\050\055\066\051\067\022\001\002\000\034" +
    "\013\060\014\047\015\044\026\027\035\025\036\023\037" +
    "\050\040\031\041\052\042\043\050\055\066\051\067\022" +
    "\001\002\000\052\004\uffab\005\uffab\006\uffab\007\uffab\010" +
    "\uffab\011\uffab\012\uffab\016\uffab\017\uffab\020\uffab\021\uffab" +
    "\022\uffab\023\uffab\024\uffab\025\uffab\051\uffab\053\uffab\055" +
    "\uffab\070\uffab\072\uffab\001\002\000\052\004\uffb6\005\uffb6" +
    "\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\016\074\017" +
    "\101\020\067\021\073\022\066\023\070\024\077\025\104" +
    "\051\uffb6\053\uffb6\055\uffb6\070\uffb6\072\uffb6\001\002\000" +
    "\052\004\uffb9\005\uffb9\006\076\007\075\010\103\011\072" +
    "\012\100\016\074\017\101\020\067\021\073\022\066\023" +
    "\070\024\077\025\104\051\uffb9\053\uffb9\055\uffb9\070\uffb9" +
    "\072\uffb9\001\002\000\052\004\uffb1\005\uffb1\006\uffb1\007" +
    "\uffb1\010\uffb1\011\uffb1\012\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\021\uffb1\022\uffb1\023\uffb1\024\077\025\104\051\uffb1\053" +
    "\uffb1\055\uffb1\070\uffb1\072\uffb1\001\002\000\052\004\uffb4" +
    "\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\016" +
    "\074\017\101\020\067\021\073\022\066\023\070\024\077" +
    "\025\104\051\uffb4\053\uffb4\055\uffb4\070\uffb4\072\uffb4\001" +
    "\002\000\052\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac" +
    "\011\uffac\012\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022" +
    "\uffac\023\uffac\024\uffac\025\104\051\uffac\053\uffac\055\uffac" +
    "\070\uffac\072\uffac\001\002\000\052\004\uffb8\005\uffb8\006" +
    "\uffb8\007\uffb8\010\103\011\uffb8\012\100\016\074\017\101" +
    "\020\067\021\073\022\066\023\070\024\077\025\104\051" +
    "\uffb8\053\uffb8\055\uffb8\070\uffb8\072\uffb8\001\002\000\052" +
    "\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\103\011\uffb7\012" +
    "\100\016\074\017\101\020\067\021\073\022\066\023\070" +
    "\024\077\025\104\051\uffb7\053\uffb7\055\uffb7\070\uffb7\072" +
    "\uffb7\001\002\000\052\004\uffb2\005\uffb2\006\uffb2\007\uffb2" +
    "\010\uffb2\011\uffb2\012\uffb2\016\uffb2\017\uffb2\020\uffb2\021" +
    "\uffb2\022\uffb2\023\uffb2\024\077\025\104\051\uffb2\053\uffb2" +
    "\055\uffb2\070\uffb2\072\uffb2\001\002\000\052\004\uffaf\005" +
    "\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\016\uffaf" +
    "\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\077\025" +
    "\104\051\uffaf\053\uffaf\055\uffaf\070\uffaf\072\uffaf\001\002" +
    "\000\052\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\103\011" +
    "\uffb5\012\100\016\074\017\101\020\067\021\073\022\066" +
    "\023\070\024\077\025\104\051\uffb5\053\uffb5\055\uffb5\070" +
    "\uffb5\072\uffb5\001\002\000\052\004\uffba\005\uffba\006\076" +
    "\007\075\010\103\011\072\012\100\016\074\017\101\020" +
    "\067\021\073\022\066\023\070\024\077\025\104\051\uffba" +
    "\053\uffba\055\uffba\070\uffba\072\uffba\001\002\000\052\004" +
    "\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad" +
    "\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024" +
    "\077\025\104\051\uffad\053\uffad\055\uffad\070\uffad\072\uffad" +
    "\001\002\000\052\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010" +
    "\uffb0\011\uffb0\012\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\024\077\025\104\051\uffb0\053\uffb0\055" +
    "\uffb0\070\uffb0\072\uffb0\001\002\000\052\004\uffae\005\uffae" +
    "\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\016\uffae\017" +
    "\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\077\025\104" +
    "\051\uffae\053\uffae\055\uffae\070\uffae\072\uffae\001\002\000" +
    "\034\013\060\014\047\015\044\026\027\035\025\036\023" +
    "\037\050\040\031\041\052\042\043\050\055\066\051\067" +
    "\022\001\002\000\052\004\uffdd\005\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\051\uffdd\053\uffdd" +
    "\055\uffdd\070\uffdd\072\uffdd\001\002\000\046\004\071\005" +
    "\102\006\076\007\075\010\103\011\072\012\100\016\074" +
    "\017\101\020\067\021\073\022\066\023\070\024\077\025" +
    "\104\051\ufff2\055\ufff2\072\ufff2\001\002\000\042\004\071" +
    "\005\102\006\076\007\075\010\103\011\072\012\100\016" +
    "\074\017\101\020\067\021\073\022\066\023\070\024\077" +
    "\025\104\053\130\001\002\000\054\004\uffbe\005\uffbe\006" +
    "\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\016\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\051" +
    "\uffbe\053\uffbe\055\uffbe\070\uffbe\071\uffbe\072\uffbe\001\002" +
    "\000\052\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\051\uffc3\053\uffc3\055\uffc3\070" +
    "\uffc3\072\uffc3\001\002\000\052\013\uffe3\014\uffe3\015\uffe3" +
    "\026\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\050\uffe3\055\uffe3\056\uffe3\061\uffe3\062\uffe3\064\uffe3" +
    "\065\uffe3\066\uffe3\067\uffe3\075\uffe3\001\002\000\006\013" +
    "\134\075\037\001\002\000\006\052\061\071\152\001\002" +
    "\000\004\070\144\001\002\000\004\071\137\001\002\000" +
    "\004\054\141\001\002\000\004\070\uffc7\001\002\000\034" +
    "\013\060\014\047\015\044\026\027\035\025\036\023\037" +
    "\050\040\031\041\052\042\043\050\055\066\051\067\022" +
    "\001\002\000\006\055\143\072\124\001\002\000\004\070" +
    "\uffbd\001\002\000\034\013\060\014\047\015\044\026\027" +
    "\035\025\036\023\037\050\040\031\041\052\042\043\050" +
    "\055\066\051\067\022\001\002\000\042\004\071\005\102" +
    "\006\076\007\075\010\103\011\072\012\100\016\074\017" +
    "\101\020\067\021\073\022\066\023\070\024\077\025\104" +
    "\070\146\001\002\000\034\013\060\014\047\015\044\026" +
    "\027\035\025\036\023\037\050\040\031\041\052\042\043" +
    "\050\055\066\051\067\022\001\002\000\042\004\071\005" +
    "\102\006\076\007\075\010\103\011\072\012\100\016\074" +
    "\017\101\020\067\021\073\022\066\023\070\024\077\025" +
    "\104\051\150\001\002\000\004\054\012\001\002\000\004" +
    "\070\uffd7\001\002\000\034\013\060\014\047\015\044\026" +
    "\027\035\025\036\023\037\050\040\031\041\052\042\043" +
    "\050\055\066\051\067\022\001\002\000\042\004\071\005" +
    "\102\006\076\007\075\010\103\011\072\012\100\016\074" +
    "\017\101\020\067\021\073\022\066\023\070\024\077\025" +
    "\104\070\154\001\002\000\004\070\uffca\001\002\000\036" +
    "\013\060\014\047\015\044\026\027\035\025\036\023\037" +
    "\050\040\031\041\052\042\043\050\055\051\157\066\051" +
    "\067\022\001\002\000\006\051\160\072\124\001\002\000" +
    "\052\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\012\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\051\uffdb\053\uffdb\055\uffdb\070\uffdb" +
    "\072\uffdb\001\002\000\052\004\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\010\uffdc\011\uffdc\012\uffdc\016\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\051\uffdc\053" +
    "\uffdc\055\uffdc\070\uffdc\072\uffdc\001\002\000\004\052\061" +
    "\001\002\000\052\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010" +
    "\uffbc\011\uffbc\012\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\051\uffbc\053\uffbc\055" +
    "\uffbc\070\uffbc\072\uffbc\001\002\000\052\004\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\051\uffbb\053\uffbb\055\uffbb\070\uffbb\072\uffbb\001\002\000" +
    "\034\013\060\014\047\015\044\026\027\035\025\036\023" +
    "\037\050\040\031\041\052\042\043\050\055\066\051\067" +
    "\022\001\002\000\042\004\071\005\102\006\076\007\075" +
    "\010\103\011\072\012\100\016\074\017\101\020\067\021" +
    "\073\022\066\023\070\024\077\025\104\051\166\001\002" +
    "\000\004\054\012\001\002\000\056\013\uffd6\014\uffd6\015" +
    "\uffd6\026\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\042\uffd6\050\uffd6\055\uffd6\056\uffd6\057\171\060\172\061" +
    "\uffd6\062\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\075\uffd6" +
    "\001\002\000\056\013\uffd2\014\uffd2\015\uffd2\026\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\050\uffd2" +
    "\055\uffd2\056\uffd2\057\171\060\uffd2\061\uffd2\062\uffd2\064" +
    "\uffd2\065\uffd2\066\uffd2\067\uffd2\075\uffd2\001\002\000\004" +
    "\050\177\001\002\000\004\054\012\001\002\000\054\013" +
    "\uffd4\014\uffd4\015\uffd4\026\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\050\uffd4\055\uffd4\056\uffd4\060" +
    "\172\061\uffd4\062\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4" +
    "\075\uffd4\001\002\000\052\013\uffd5\014\uffd5\015\uffd5\026" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\050\uffd5\055\uffd5\056\uffd5\061\uffd5\062\uffd5\064\uffd5\065" +
    "\uffd5\066\uffd5\067\uffd5\075\uffd5\001\002\000\052\013\uffd3" +
    "\014\uffd3\015\uffd3\026\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\050\uffd3\055\uffd3\056\uffd3\061\uffd3" +
    "\062\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\075\uffd3\001" +
    "\002\000\052\013\uffcf\014\uffcf\015\uffcf\026\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\050\uffcf\055" +
    "\uffcf\056\uffcf\061\uffcf\062\uffcf\064\uffcf\065\uffcf\066\uffcf" +
    "\067\uffcf\075\uffcf\001\002\000\034\013\060\014\047\015" +
    "\044\026\027\035\025\036\023\037\050\040\031\041\052" +
    "\042\043\050\055\066\051\067\022\001\002\000\042\004" +
    "\071\005\102\006\076\007\075\010\103\011\072\012\100" +
    "\016\074\017\101\020\067\021\073\022\066\023\070\024" +
    "\077\025\104\051\201\001\002\000\004\054\012\001\002" +
    "\000\056\013\uffd0\014\uffd0\015\uffd0\026\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\050\uffd0\055\uffd0" +
    "\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\064\uffd0\065" +
    "\uffd0\066\uffd0\067\uffd0\075\uffd0\001\002\000\054\013\uffd1" +
    "\014\uffd1\015\uffd1\026\uffd1\035\uffd1\036\uffd1\037\uffd1\040" +
    "\uffd1\041\uffd1\042\uffd1\050\uffd1\055\uffd1\056\uffd1\060\uffd1" +
    "\061\uffd1\062\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\075" +
    "\uffd1\001\002\000\052\013\uffe0\014\uffe0\015\uffe0\026\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\050" +
    "\uffe0\055\uffe0\056\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0" +
    "\066\uffe0\067\uffe0\075\uffe0\001\002\000\004\013\ufffc\001" +
    "\002\000\004\013\uffff\001\002\000\004\013\ufffe\001\002" +
    "\000\004\013\ufffb\001\002\000\004\013\214\001\002\000" +
    "\004\013\ufffd\001\002\000\004\013\ufffa\001\002\000\010" +
    "\052\061\070\223\071\222\001\002\000\006\070\217\071" +
    "\216\001\002\000\004\054\141\001\002\000\004\070\uffc9" +
    "\001\002\000\004\070\221\001\002\000\004\070\uffc8\001" +
    "\002\000\034\013\060\014\047\015\044\026\027\035\025" +
    "\036\023\037\050\040\031\041\052\042\043\050\055\066" +
    "\051\067\022\001\002\000\004\070\uffcc\001\002\000\042" +
    "\004\071\005\102\006\076\007\075\010\103\011\072\012" +
    "\100\016\074\017\101\020\067\021\073\022\066\023\070" +
    "\024\077\025\104\070\225\001\002\000\004\070\uffcb\001" +
    "\002\000\052\013\uffe4\014\uffe4\015\uffe4\026\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\050\uffe4\055" +
    "\uffe4\056\uffe4\061\uffe4\062\uffe4\064\uffe4\065\uffe4\066\uffe4" +
    "\067\uffe4\075\uffe4\001\002\000\052\013\uffe5\014\uffe5\015" +
    "\uffe5\026\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\050\uffe5\055\uffe5\056\uffe5\061\uffe5\062\uffe5\064" +
    "\uffe5\065\uffe5\066\uffe5\067\uffe5\075\uffe5\001\002\000\052" +
    "\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012" +
    "\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\024\uffaa\025\uffaa\051\uffaa\053\uffaa\055\uffaa\070\uffaa\072" +
    "\uffaa\001\002\000\052\013\uffcd\014\uffcd\015\uffcd\026\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\050" +
    "\uffcd\055\uffcd\056\uffcd\061\uffcd\062\uffcd\064\uffcd\065\uffcd" +
    "\066\uffcd\067\uffcd\075\uffcd\001\002\000\066\002\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\026\uffe8\035\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\042\uffe8\050\uffe8\055\uffe8\056\uffe8\057" +
    "\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8" +
    "\066\uffe8\067\uffe8\070\uffe8\074\uffe8\075\uffe8\001\002\000" +
    "\004\063\234\001\002\000\004\050\235\001\002\000\034" +
    "\013\060\014\047\015\044\026\027\035\025\036\023\037" +
    "\050\040\031\041\052\042\043\050\055\066\051\067\022" +
    "\001\002\000\042\004\071\005\102\006\076\007\075\010" +
    "\103\011\072\012\100\016\074\017\101\020\067\021\073" +
    "\022\066\023\070\024\077\025\104\051\237\001\002\000" +
    "\004\070\uffd8\001\002\000\036\013\060\014\047\015\044" +
    "\026\027\035\025\036\023\037\050\040\031\041\052\042" +
    "\043\050\055\051\242\066\051\067\022\001\002\000\006" +
    "\051\243\072\124\001\002\000\052\004\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\051" +
    "\uffd9\053\uffd9\055\uffd9\070\uffd9\072\uffd9\001\002\000\052" +
    "\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\051\uffda\053\uffda\055\uffda\070\uffda\072" +
    "\uffda\001\002\000\042\004\071\005\102\006\076\007\075" +
    "\010\103\011\072\012\100\016\074\017\101\020\067\021" +
    "\073\022\066\023\070\024\077\025\104\070\uffe6\001\002" +
    "\000\052\013\uffe2\014\uffe2\015\uffe2\026\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\050\uffe2\055\uffe2" +
    "\056\uffe2\061\uffe2\062\uffe2\064\uffe2\065\uffe2\066\uffe2\067" +
    "\uffe2\075\uffe2\001\002\000\052\013\uffe1\014\uffe1\015\uffe1" +
    "\026\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\050\uffe1\055\uffe1\056\uffe1\061\uffe1\062\uffe1\064\uffe1" +
    "\065\uffe1\066\uffe1\067\uffe1\075\uffe1\001\002\000\006\002" +
    "\ufff0\074\ufff0\001\002\000\004\013\254\001\002\000\004" +
    "\050\252\001\002\000\004\051\253\001\002\000\004\054" +
    "\uffee\001\002\000\004\050\255\001\002\000\020\027\206" +
    "\030\207\031\212\032\205\033\210\034\213\051\256\001" +
    "\002\000\004\054\uffed\001\002\000\006\051\uffeb\072\uffeb" +
    "\001\002\000\006\051\264\072\263\001\002\000\004\013" +
    "\262\001\002\000\006\051\uffe9\072\uffe9\001\002\000\016" +
    "\027\206\030\207\031\212\032\205\033\210\034\213\001" +
    "\002\000\004\054\uffec\001\002\000\006\051\uffea\072\uffea" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\012\002\003\006\005\007\006\010\007\001" +
    "\001\000\002\001\001\000\004\003\247\001\001\000\006" +
    "\007\246\010\007\001\001\000\002\001\001\000\004\011" +
    "\010\001\001\000\002\001\001\000\040\004\013\014\025" +
    "\015\027\016\032\017\016\020\040\021\014\022\033\023" +
    "\020\027\034\030\012\032\015\033\031\034\045\035\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\013" +
    "\022\033\027\243\030\055\032\015\033\031\034\045\035" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\232\001\001\000\002\001\001\000" +
    "\036\004\013\015\230\016\032\017\016\020\040\021\014" +
    "\022\033\023\020\027\034\030\012\032\015\033\031\034" +
    "\045\035\037\001\001\000\022\004\013\022\033\027\227" +
    "\030\055\032\015\033\031\034\045\035\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\013\022\033\027\056\030\055\032\015\033\031\034" +
    "\045\035\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\013\022\033\027\126\030" +
    "\055\032\015\033\031\034\045\035\037\001\001\000\024" +
    "\004\013\005\062\022\033\027\063\030\055\032\015\033" +
    "\031\034\045\035\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\013\022\033\027" +
    "\122\030\055\032\015\033\031\034\045\035\037\001\001" +
    "\000\022\004\013\022\033\027\121\030\055\032\015\033" +
    "\031\034\045\035\037\001\001\000\022\004\013\022\033" +
    "\027\120\030\055\032\015\033\031\034\045\035\037\001" +
    "\001\000\022\004\013\022\033\027\117\030\055\032\015" +
    "\033\031\034\045\035\037\001\001\000\022\004\013\022" +
    "\033\027\116\030\055\032\015\033\031\034\045\035\037" +
    "\001\001\000\022\004\013\022\033\027\115\030\055\032" +
    "\015\033\031\034\045\035\037\001\001\000\022\004\013" +
    "\022\033\027\114\030\055\032\015\033\031\034\045\035" +
    "\037\001\001\000\022\004\013\022\033\027\113\030\055" +
    "\032\015\033\031\034\045\035\037\001\001\000\022\004" +
    "\013\022\033\027\112\030\055\032\015\033\031\034\045" +
    "\035\037\001\001\000\022\004\013\022\033\027\111\030" +
    "\055\032\015\033\031\034\045\035\037\001\001\000\022" +
    "\004\013\022\033\027\110\030\055\032\015\033\031\034" +
    "\045\035\037\001\001\000\022\004\013\022\033\027\107" +
    "\030\055\032\015\033\031\034\045\035\037\001\001\000" +
    "\022\004\013\022\033\027\106\030\055\032\015\033\031" +
    "\034\045\035\037\001\001\000\022\004\013\022\033\027" +
    "\105\030\055\032\015\033\031\034\045\035\037\001\001" +
    "\000\022\004\013\022\033\027\104\030\055\032\015\033" +
    "\031\034\045\035\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\013\022\033\027\125\030\055\032" +
    "\015\033\031\034\045\035\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\134\030\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\137\001\001\000\002\001\001\000\024" +
    "\004\013\005\141\022\033\027\063\030\055\032\015\033" +
    "\031\034\045\035\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\013\022\033\027\144\030\055\032" +
    "\015\033\031\034\045\035\037\001\001\000\002\001\001" +
    "\000\022\004\013\022\033\027\146\030\055\032\015\033" +
    "\031\034\045\035\037\001\001\000\002\001\001\000\004" +
    "\011\150\001\001\000\002\001\001\000\022\004\013\022" +
    "\033\027\152\030\055\032\015\033\031\034\045\035\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\013\005\155\022\033\027\063\030\055\032\015\033\031" +
    "\034\045\035\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\013\022\033\027\164\030" +
    "\055\032\015\033\031\034\045\035\037\001\001\000\002" +
    "\001\001\000\004\011\166\001\001\000\010\024\167\025" +
    "\172\026\173\001\001\000\006\024\167\025\202\001\001" +
    "\000\002\001\001\000\004\011\175\001\001\000\004\026" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\013\022\033\027\177\030\055\032" +
    "\015\033\031\034\045\035\037\001\001\000\002\001\001" +
    "\000\004\011\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\013" +
    "\022\033\027\223\030\055\032\015\033\031\034\045\035" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\013\022\033\027\235\030" +
    "\055\032\015\033\031\034\045\035\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\013\005\240\022" +
    "\033\027\063\030\055\032\015\033\031\034\045\035\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\260\012\257\013\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\260\013\264\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


  Lexer lex;

  public parser(Lexer lex) {
    this.lex = lex;
    this.symbolFactory = new DefaultSymbolFactory();
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


  public void hola() {
    System.out.println("Hola");
  }
  public void adios() {
    System.out.println("Adios");
  }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= NAVIDAD EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NAVIDAD ::= FUNCIONES_BOLSA_NAVIDENNA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NAVIDAD",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // T_COPO ::= COLACHO_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // T_COPO ::= JOULUPUKKI_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // T_COPO ::= PAPA_NOEL_BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // T_COPO ::= CLAUS_CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // T_COPO ::= SANTA_STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // T_COPO ::= VIEJITO_PASCUERO_ARRAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // l_COPO ::= L_COLACHO_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // l_COPO ::= L_JOULUPUKKI_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // l_COPO ::= L_PAPA_NOEL_BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // l_COPO ::= L_CLAUS_CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // l_COPO ::= L_SANTA_STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // l_COPO ::= L_VIEJITO_PASCUERO_ARRAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ARG_COPO ::= EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG_COPO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARG_COPO ::= ARG_COPO SEPARADOR_BASTON EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG_COPO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCIONES_BOLSA_NAVIDENNA ::= FUNCION_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_BOLSA_NAVIDENNA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCIONES_BOLSA_NAVIDENNA ::= FUNCIONES_BOLSA_NAVIDENNA FUNCION_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_BOLSA_NAVIDENNA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCION_REGALO ::= DEF_JUGUETE CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION_REGALO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DEF_JUGUETE ::= FUNCTION_VILLANCICOS ESTRELLA_MAIN ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF_JUGUETE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DEF_JUGUETE ::= FUNCTION_VILLANCICOS T_COPO PERSONA ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF_JUGUETE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DEF_JUGUETE ::= FUNCTION_VILLANCICOS T_COPO PERSONA ABRE_CUENTO PARAMETROS_PALETAS CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF_JUGUETE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMETROS_PALETAS ::= PARAMETRO_PALETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PALETAS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMETROS_PALETAS ::= PARAMETROS_PALETAS SEPARADOR_BASTON PARAMETRO_PALETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PALETAS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMETRO_PALETA ::= T_COPO PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_PALETA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CODIGO_ENVOLTURA ::= ABRE_REGALO LINEAS_LAZOS CIERRA_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO_ENVOLTURA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CODIGO_ENVOLTURA ::= ABRE_REGALO CIERRA_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO_ENVOLTURA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RETORNO_BURRITO_SABANERO ::= ENVIA_RETURN EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO_BURRITO_SABANERO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LINEA_LAZO ::= ASIGNACION_GORRO FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LINEA_LAZO ::= EXPRESION_BOTA FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LINEA_LAZO ::= CORTA_BREAK FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LINEA_LAZO ::= RETORNO_BURRITO_SABANERO FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LINEA_LAZO ::= FOR_FANTASMA_PRESENTE FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LINEA_LAZO ::= DO_UNTIL_FANTASMA_PASADO FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LINEA_LAZO ::= IF_JUANITO_ESCARCHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CALL_FUNCTION_FANTASMA_FUTURO ::= PERSONA ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CALL_FUNCTION_FANTASMA_FUTURO ::= PERSONA ABRE_CUENTO ARG_COPO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CALL_FUNCTION_FANTASMA_FUTURO ::= NARRA_PRINT ABRE_CUENTO ARG_COPO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CALL_FUNCTION_FANTASMA_FUTURO ::= NARRA_PRINT ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CALL_FUNCTION_FANTASMA_FUTURO ::= ESCUCHA_READ ABRE_CUENTO ARG_COPO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CALL_FUNCTION_FANTASMA_FUTURO ::= ESCUCHA_READ ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DO_UNTIL_FANTASMA_PASADO ::= HACE_DO CODIGO_ENVOLTURA REVISA_UNTIL ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_UNTIL_FANTASMA_PASADO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FOR_FANTASMA_PRESENTE ::= ENVUELVE_FOR ABRE_CUENTO ASIGNACION_GORRO FIN_REGALO EXPRESION_BOTA FIN_REGALO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR_FANTASMA_PRESENTE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF_JUANITO_ESCARCHA ::= ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_JUANITO_ESCARCHA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IF_JUANITO_ESCARCHA ::= ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA ELSE_SCROOGE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_JUANITO_ESCARCHA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF_JUANITO_ESCARCHA ::= ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA ELIF_MULTI_JACK_FROST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_JUANITO_ESCARCHA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF_JUANITO_ESCARCHA ::= ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA ELIF_MULTI_JACK_FROST ELSE_SCROOGE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_JUANITO_ESCARCHA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELIF_MULTI_JACK_FROST ::= ELIF_BATMAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIF_MULTI_JACK_FROST",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELIF_MULTI_JACK_FROST ::= ELIF_BATMAN ELIF_MULTI_JACK_FROST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIF_MULTI_JACK_FROST",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELIF_BATMAN ::= HADA_ELIF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIF_BATMAN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELSE_SCROOGE ::= DUENDE_ELSE CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_SCROOGE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LINEAS_LAZOS ::= LINEA_LAZO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEAS_LAZOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LINEAS_LAZOS ::= LINEAS_LAZOS LINEA_LAZO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEAS_LAZOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO PERSONA FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO PERSONA ENTREGA EXPRESION_BOTA FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIGNACION_GORRO ::= PERSONA ENTREGA EXPRESION_BOTA FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO ELEMENTO_ARRAY_DULCE FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO ELEMENTO_ARRAY_DULCE ENTREGA l_ARRAY_TAMAL FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIGNACION_GORRO ::= ELEMENTO_ARRAY_DULCE ENTREGA l_ARRAY_TAMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION_BOTA ::= l_COPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION_BOTA ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION_BOTA ::= ELEMENTO_ARRAY_DULCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION_BOTA ::= ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION_BOTA ::= CALL_FUNCTION_FANTASMA_FUTURO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION_BOTA ::= EXPRESION_ARIT_REGALOPRIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION_BOTA ::= EXPRESION_REL_REGALO_COMPRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION_BOTA ::= EXPRESION_LOG_REGALO_MANUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ELEMENTO_ARRAY_DULCE ::= PERSONA ABRE_EMPAQUE EXPRESION_BOTA CIERRA_EMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ARRAY_DULCE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // l_ARRAY_TAMAL ::= ABRE_REGALO ARG_COPO CIERRA_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_ARRAY_TAMAL",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ARRAY_OPERATION_CASCABEL ::= GRINCH_DECREMENT ELEMENTO_ARRAY_DULCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_OPERATION_CASCABEL",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ARRAY_OPERATION_CASCABEL ::= QUIEN_INCREMENT ELEMENTO_ARRAY_DULCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_OPERATION_CASCABEL",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA RODOLFO_SUM EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA TRUENO_DECREASE EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA RELAMPAGO_INT_DIVISION EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA RAYO_FLOAT_DIVISION EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA SALTARIN_ELEVATE EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA COMETA_PRODUCT EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA CUPIDO_MODULE EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION_ARIT_REGALOPRIN ::= ARRAY_OPERATION_CASCABEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_GREATER EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_LESS EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_NOT_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_GREATER_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_LESS_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION_LOG_REGALO_MANUAL ::= EXPRESION_BOTA REY_MELCHOR_COJUNCTION EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOG_REGALO_MANUAL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION_LOG_REGALO_MANUAL ::= EXPRESION_BOTA REY_GASPAR_DISJUNCTION EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOG_REGALO_MANUAL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION_LOG_REGALO_MANUAL ::= REY_BALTASAR_NOT EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOG_REGALO_MANUAL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
