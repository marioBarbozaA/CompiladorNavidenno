
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.navidad;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.io.IOException;
import java.io.FileWriter;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\005" +
    "\003\000\002\005\005\000\002\006\003\000\002\006\004" +
    "\000\002\007\004\000\002\007\005\000\002\010\006\000" +
    "\002\010\007\000\002\036\002\000\002\010\011\000\002" +
    "\012\003\000\002\012\005\000\002\013\004\000\002\011" +
    "\005\000\002\011\004\000\002\017\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\022\005\000\002\022\006\000\002\022\006\000\002\022" +
    "\005\000\002\022\006\000\002\022\005\000\002\020\010" +
    "\000\002\021\013\000\002\023\007\000\002\023\010\000" +
    "\002\023\010\000\002\023\011\000\002\025\003\000\002" +
    "\025\004\000\002\024\007\000\002\026\004\000\002\014" +
    "\003\000\002\014\004\000\002\016\005\000\002\016\007" +
    "\000\002\016\005\000\002\016\007\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\005\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\030\006\000\002\031\005\000\002\032\004\000" +
    "\002\032\004\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\004\000\002\033\004" +
    "\000\002\033\003\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\006\003\006\073\005\001\002\000\004\002" +
    "\271\001\002\000\020\027\200\030\201\031\204\032\177" +
    "\033\202\034\205\076\253\001\002\000\004\073\005\001" +
    "\002\000\010\002\000\003\006\073\005\001\002\000\010" +
    "\002\ufff0\003\ufff0\073\ufff0\001\002\000\004\053\013\001" +
    "\002\000\010\002\uffee\003\uffee\073\uffee\001\002\000\054" +
    "\013\024\014\047\015\046\026\045\035\035\036\016\037" +
    "\055\040\030\041\051\045\034\046\031\047\015\054\022" +
    "\055\021\060\042\061\044\063\014\064\056\065\017\066" +
    "\027\074\032\001\002\000\036\013\071\014\047\015\046" +
    "\026\045\035\035\036\016\037\055\040\030\041\051\045" +
    "\034\046\031\047\015\065\017\066\027\001\002\000\036" +
    "\013\071\014\047\015\046\026\045\035\035\036\016\037" +
    "\055\040\030\041\051\045\034\046\031\047\015\065\017" +
    "\066\027\001\002\000\052\004\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\016\ufff8\017\ufff8\020\ufff8" +
    "\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\050\ufff8\052" +
    "\ufff8\054\ufff8\067\ufff8\071\ufff8\001\002\000\004\047\240" +
    "\001\002\000\052\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010" +
    "\uffbd\011\uffbd\012\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\025\uffbd\050\uffbd\052\uffbd\054" +
    "\uffbd\067\uffbd\071\uffbd\001\002\000\004\047\220\001\002" +
    "\000\020\002\uffe4\003\uffe4\056\uffe4\057\uffe4\062\uffe4\067" +
    "\uffe4\073\uffe4\001\002\000\052\004\uffc2\005\uffc2\006\uffc2" +
    "\007\uffc2\010\uffc2\011\uffc2\012\uffc2\016\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\050\uffc2" +
    "\052\uffc2\054\uffc2\067\uffc2\071\uffc2\001\002\000\050\004" +
    "\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\047\072\051\066\067\uffc1\070\171\001\002" +
    "\000\054\013\uffcb\014\uffcb\015\uffcb\026\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\054\uffcb\055\uffcb\060\uffcb\061\uffcb\063\uffcb\064\uffcb\065" +
    "\uffcb\066\uffcb\074\uffcb\001\002\000\052\004\uffbc\005\uffbc" +
    "\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\050\uffbc\052\uffbc\054\uffbc\067\uffbc\071\uffbc\001\002\000" +
    "\004\047\214\001\002\000\052\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\016\ufff6\017\ufff6\020" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\050\ufff6" +
    "\052\ufff6\054\ufff6\067\ufff6\071\ufff6\001\002\000\052\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\050\ufff3\052\ufff3\054\ufff3\067\ufff3\071\ufff3" +
    "\001\002\000\016\027\200\030\201\031\204\032\177\033" +
    "\202\034\205\001\002\000\052\004\uffbb\005\uffbb\006\uffbb" +
    "\007\uffbb\010\uffbb\011\uffbb\012\uffbb\016\uffbb\017\uffbb\020" +
    "\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\050\uffbb" +
    "\052\uffbb\054\uffbb\067\uffbb\071\uffbb\001\002\000\052\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\050\ufff4\052\ufff4\054\ufff4\067\ufff4\071\ufff4" +
    "\001\002\000\052\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9" +
    "\022\ufff9\023\ufff9\024\ufff9\025\ufff9\050\ufff9\052\ufff9\054" +
    "\ufff9\067\ufff9\071\ufff9\001\002\000\044\004\uffc0\005\uffc0" +
    "\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\016\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\067\uffc0\070\155\001\002\000\054\013\024\014\047\015" +
    "\046\026\045\035\035\036\016\037\055\040\030\041\051" +
    "\045\034\046\031\047\015\054\176\055\021\060\042\061" +
    "\044\063\014\064\056\065\017\066\027\074\032\001\002" +
    "\000\004\067\174\001\002\000\042\004\101\005\112\006" +
    "\106\007\105\010\113\011\103\012\110\016\104\017\111" +
    "\020\077\021\102\022\076\023\100\024\107\025\114\067" +
    "\173\001\002\000\004\047\151\001\002\000\004\067\150" +
    "\001\002\000\004\053\013\001\002\000\036\013\071\014" +
    "\047\015\046\026\045\035\035\036\016\037\055\040\030" +
    "\041\051\045\034\046\031\047\015\065\017\066\027\001" +
    "\002\000\004\013\140\001\002\000\004\013\064\001\002" +
    "\000\004\067\063\001\002\000\052\004\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\050" +
    "\ufff5\052\ufff5\054\ufff5\067\ufff5\071\ufff5\001\002\000\052" +
    "\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012" +
    "\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\050\uffbe\052\uffbe\054\uffbe\067\uffbe\071" +
    "\uffbe\001\002\000\004\067\062\001\002\000\052\004\uffad" +
    "\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\016" +
    "\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad" +
    "\025\uffad\050\uffad\052\uffad\054\uffad\067\uffad\071\uffad\001" +
    "\002\000\052\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\025\ufff7\050\ufff7\052\ufff7\054\ufff7" +
    "\067\ufff7\071\ufff7\001\002\000\004\067\061\001\002\000" +
    "\004\067\060\001\002\000\054\013\uffe2\014\uffe2\015\uffe2" +
    "\026\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\045" +
    "\uffe2\046\uffe2\047\uffe2\054\uffe2\055\uffe2\060\uffe2\061\uffe2" +
    "\063\uffe2\064\uffe2\065\uffe2\066\uffe2\074\uffe2\001\002\000" +
    "\054\013\uffe0\014\uffe0\015\uffe0\026\uffe0\035\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\045\uffe0\046\uffe0\047\uffe0\054" +
    "\uffe0\055\uffe0\060\uffe0\061\uffe0\063\uffe0\064\uffe0\065\uffe0" +
    "\066\uffe0\074\uffe0\001\002\000\054\013\uffdc\014\uffdc\015" +
    "\uffdc\026\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc" +
    "\045\uffdc\046\uffdc\047\uffdc\054\uffdc\055\uffdc\060\uffdc\061" +
    "\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\074\uffdc\001\002" +
    "\000\054\013\uffdd\014\uffdd\015\uffdd\026\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\045\uffdd\046\uffdd\047\uffdd" +
    "\054\uffdd\055\uffdd\060\uffdd\061\uffdd\063\uffdd\064\uffdd\065" +
    "\uffdd\066\uffdd\074\uffdd\001\002\000\054\004\uffaf\005\uffaf" +
    "\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\016\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\050\uffaf\051\066\052\uffaf\054\uffaf\067\uffaf\071\uffaf\001" +
    "\002\000\052\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\025\uffb8\050\uffb8\052\uffb8\054\uffb8" +
    "\067\uffb8\071\uffb8\001\002\000\036\013\071\014\047\015" +
    "\046\026\045\035\035\036\016\037\055\040\030\041\051" +
    "\045\034\046\031\047\015\065\017\066\027\001\002\000" +
    "\052\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0" +
    "\012\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\024\uffc0\025\uffc0\050\uffc0\052\uffc0\054\uffc0\067\uffc0" +
    "\071\uffc0\001\002\000\042\004\101\005\112\006\106\007" +
    "\105\010\113\011\103\012\110\016\104\017\111\020\077" +
    "\021\102\022\076\023\100\024\107\025\114\052\137\001" +
    "\002\000\056\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1" +
    "\011\uffc1\012\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\025\uffc1\047\072\050\uffc1\051\066" +
    "\052\uffc1\054\uffc1\067\uffc1\071\uffc1\001\002\000\040\013" +
    "\071\014\047\015\046\026\045\035\035\036\016\037\055" +
    "\040\030\041\051\045\034\046\031\047\015\050\075\065" +
    "\017\066\027\001\002\000\006\050\135\071\134\001\002" +
    "\000\046\004\101\005\112\006\106\007\105\010\113\011" +
    "\103\012\110\016\104\017\111\020\077\021\102\022\076" +
    "\023\100\024\107\025\114\050\ufff2\054\ufff2\071\ufff2\001" +
    "\002\000\052\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb" +
    "\011\uffdb\012\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\050\uffdb\052\uffdb\054\uffdb" +
    "\067\uffdb\071\uffdb\001\002\000\036\013\071\014\047\015" +
    "\046\026\045\035\035\036\016\037\055\040\030\041\051" +
    "\045\034\046\031\047\015\065\017\066\027\001\002\000" +
    "\036\013\071\014\047\015\046\026\045\035\035\036\016" +
    "\037\055\040\030\041\051\045\034\046\031\047\015\065" +
    "\017\066\027\001\002\000\036\013\071\014\047\015\046" +
    "\026\045\035\035\036\016\037\055\040\030\041\051\045" +
    "\034\046\031\047\015\065\017\066\027\001\002\000\036" +
    "\013\071\014\047\015\046\026\045\035\035\036\016\037" +
    "\055\040\030\041\051\045\034\046\031\047\015\065\017" +
    "\066\027\001\002\000\036\013\071\014\047\015\046\026" +
    "\045\035\035\036\016\037\055\040\030\041\051\045\034" +
    "\046\031\047\015\065\017\066\027\001\002\000\036\013" +
    "\071\014\047\015\046\026\045\035\035\036\016\037\055" +
    "\040\030\041\051\045\034\046\031\047\015\065\017\066" +
    "\027\001\002\000\036\013\071\014\047\015\046\026\045" +
    "\035\035\036\016\037\055\040\030\041\051\045\034\046" +
    "\031\047\015\065\017\066\027\001\002\000\036\013\071" +
    "\014\047\015\046\026\045\035\035\036\016\037\055\040" +
    "\030\041\051\045\034\046\031\047\015\065\017\066\027" +
    "\001\002\000\036\013\071\014\047\015\046\026\045\035" +
    "\035\036\016\037\055\040\030\041\051\045\034\046\031" +
    "\047\015\065\017\066\027\001\002\000\036\013\071\014" +
    "\047\015\046\026\045\035\035\036\016\037\055\040\030" +
    "\041\051\045\034\046\031\047\015\065\017\066\027\001" +
    "\002\000\036\013\071\014\047\015\046\026\045\035\035" +
    "\036\016\037\055\040\030\041\051\045\034\046\031\047" +
    "\015\065\017\066\027\001\002\000\036\013\071\014\047" +
    "\015\046\026\045\035\035\036\016\037\055\040\030\041" +
    "\051\045\034\046\031\047\015\065\017\066\027\001\002" +
    "\000\036\013\071\014\047\015\046\026\045\035\035\036" +
    "\016\037\055\040\030\041\051\045\034\046\031\047\015" +
    "\065\017\066\027\001\002\000\036\013\071\014\047\015" +
    "\046\026\045\035\035\036\016\037\055\040\030\041\051" +
    "\045\034\046\031\047\015\065\017\066\027\001\002\000" +
    "\036\013\071\014\047\015\046\026\045\035\035\036\016" +
    "\037\055\040\030\041\051\045\034\046\031\047\015\065" +
    "\017\066\027\001\002\000\052\004\uffa5\005\uffa5\006\uffa5" +
    "\007\uffa5\010\uffa5\011\uffa5\012\uffa5\016\uffa5\017\uffa5\020" +
    "\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\050\uffa5" +
    "\052\uffa5\054\uffa5\067\uffa5\071\uffa5\001\002\000\052\004" +
    "\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2" +
    "\016\104\017\111\020\077\021\102\022\076\023\100\024" +
    "\107\025\114\050\uffb2\052\uffb2\054\uffb2\067\uffb2\071\uffb2" +
    "\001\002\000\052\004\uffb5\005\uffb5\006\106\007\105\010" +
    "\113\011\103\012\110\016\104\017\111\020\077\021\102" +
    "\022\076\023\100\024\107\025\114\050\uffb5\052\uffb5\054" +
    "\uffb5\067\uffb5\071\uffb5\001\002\000\052\004\uffab\005\uffab" +
    "\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\016\uffab\017" +
    "\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\107\025\114" +
    "\050\uffab\052\uffab\054\uffab\067\uffab\071\uffab\001\002\000" +
    "\052\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0" +
    "\012\uffb0\016\104\017\111\020\077\021\102\022\076\023" +
    "\100\024\107\025\114\050\uffb0\052\uffb0\054\uffb0\067\uffb0" +
    "\071\uffb0\001\002\000\052\004\uffa6\005\uffa6\006\uffa6\007" +
    "\uffa6\010\uffa6\011\uffa6\012\uffa6\016\uffa6\017\uffa6\020\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\114\050\uffa6\052" +
    "\uffa6\054\uffa6\067\uffa6\071\uffa6\001\002\000\052\004\uffb4" +
    "\005\uffb4\006\uffb4\007\uffb4\010\113\011\uffb4\012\110\016" +
    "\104\017\111\020\077\021\102\022\076\023\100\024\107" +
    "\025\114\050\uffb4\052\uffb4\054\uffb4\067\uffb4\071\uffb4\001" +
    "\002\000\052\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\113" +
    "\011\uffb3\012\110\016\104\017\111\020\077\021\102\022" +
    "\076\023\100\024\107\025\114\050\uffb3\052\uffb3\054\uffb3" +
    "\067\uffb3\071\uffb3\001\002\000\052\004\uffac\005\uffac\006" +
    "\uffac\007\uffac\010\uffac\011\uffac\012\uffac\016\uffac\017\uffac" +
    "\020\uffac\021\uffac\022\uffac\023\uffac\024\107\025\114\050" +
    "\uffac\052\uffac\054\uffac\067\uffac\071\uffac\001\002\000\052" +
    "\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\113\011\uffb1\012" +
    "\110\016\104\017\111\020\077\021\102\022\076\023\100" +
    "\024\107\025\114\050\uffb1\052\uffb1\054\uffb1\067\uffb1\071" +
    "\uffb1\001\002\000\052\004\uffa9\005\uffa9\006\uffa9\007\uffa9" +
    "\010\uffa9\011\uffa9\012\uffa9\016\uffa9\017\uffa9\020\uffa9\021" +
    "\uffa9\022\uffa9\023\uffa9\024\107\025\114\050\uffa9\052\uffa9" +
    "\054\uffa9\067\uffa9\071\uffa9\001\002\000\052\004\uffb6\005" +
    "\uffb6\006\106\007\105\010\113\011\103\012\110\016\104" +
    "\017\111\020\077\021\102\022\076\023\100\024\107\025" +
    "\114\050\uffb6\052\uffb6\054\uffb6\067\uffb6\071\uffb6\001\002" +
    "\000\052\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011" +
    "\uffa7\012\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\024\107\025\114\050\uffa7\052\uffa7\054\uffa7\067" +
    "\uffa7\071\uffa7\001\002\000\052\004\uffaa\005\uffaa\006\uffaa" +
    "\007\uffaa\010\uffaa\011\uffaa\012\uffaa\016\uffaa\017\uffaa\020" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\024\107\025\114\050\uffaa" +
    "\052\uffaa\054\uffaa\067\uffaa\071\uffaa\001\002\000\052\004" +
    "\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8" +
    "\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024" +
    "\107\025\114\050\uffa8\052\uffa8\054\uffa8\067\uffa8\071\uffa8" +
    "\001\002\000\036\013\071\014\047\015\046\026\045\035" +
    "\035\036\016\037\055\040\030\041\051\045\034\046\031" +
    "\047\015\065\017\066\027\001\002\000\052\004\uffda\005" +
    "\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\016\uffda" +
    "\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025" +
    "\uffda\050\uffda\052\uffda\054\uffda\067\uffda\071\uffda\001\002" +
    "\000\046\004\101\005\112\006\106\007\105\010\113\011" +
    "\103\012\110\016\104\017\111\020\077\021\102\022\076" +
    "\023\100\024\107\025\114\050\ufff1\054\ufff1\071\ufff1\001" +
    "\002\000\054\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba" +
    "\011\uffba\012\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022" +
    "\uffba\023\uffba\024\uffba\025\uffba\050\uffba\052\uffba\054\uffba" +
    "\067\uffba\070\uffba\071\uffba\001\002\000\054\004\uffae\005" +
    "\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\016\uffae" +
    "\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025" +
    "\uffae\050\uffae\051\066\052\uffae\054\uffae\067\uffae\071\uffae" +
    "\001\002\000\052\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\024\uffb7\025\uffb7\050\uffb7\052\uffb7\054" +
    "\uffb7\067\uffb7\071\uffb7\001\002\000\052\004\uffa4\005\uffa4" +
    "\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\016\uffa4\017" +
    "\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4" +
    "\050\uffa4\052\uffa4\054\uffa4\067\uffa4\071\uffa4\001\002\000" +
    "\004\062\144\001\002\000\004\047\145\001\002\000\036" +
    "\013\071\014\047\015\046\026\045\035\035\036\016\037" +
    "\055\040\030\041\051\045\034\046\031\047\015\065\017" +
    "\066\027\001\002\000\042\004\101\005\112\006\106\007" +
    "\105\010\113\011\103\012\110\016\104\017\111\020\077" +
    "\021\102\022\076\023\100\024\107\025\114\050\147\001" +
    "\002\000\004\067\uffd5\001\002\000\054\013\uffde\014\uffde" +
    "\015\uffde\026\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041" +
    "\uffde\045\uffde\046\uffde\047\uffde\054\uffde\055\uffde\060\uffde" +
    "\061\uffde\063\uffde\064\uffde\065\uffde\066\uffde\074\uffde\001" +
    "\002\000\006\013\152\074\032\001\002\000\006\051\066" +
    "\070\171\001\002\000\004\067\163\001\002\000\004\070" +
    "\155\001\002\000\040\013\071\014\047\015\046\026\045" +
    "\035\035\036\016\037\055\040\030\041\051\045\034\046" +
    "\031\047\015\053\157\065\017\066\027\001\002\000\004" +
    "\067\uffc3\001\002\000\036\013\071\014\047\015\046\026" +
    "\045\035\035\036\016\037\055\040\030\041\051\045\034" +
    "\046\031\047\015\065\017\066\027\001\002\000\042\004" +
    "\101\005\112\006\106\007\105\010\113\011\103\012\110" +
    "\016\104\017\111\020\077\021\102\022\076\023\100\024" +
    "\107\025\114\067\uffc4\001\002\000\006\054\162\071\134" +
    "\001\002\000\004\067\uffb9\001\002\000\036\013\071\014" +
    "\047\015\046\026\045\035\035\036\016\037\055\040\030" +
    "\041\051\045\034\046\031\047\015\065\017\066\027\001" +
    "\002\000\042\004\101\005\112\006\106\007\105\010\113" +
    "\011\103\012\110\016\104\017\111\020\077\021\102\022" +
    "\076\023\100\024\107\025\114\067\165\001\002\000\036" +
    "\013\071\014\047\015\046\026\045\035\035\036\016\037" +
    "\055\040\030\041\051\045\034\046\031\047\015\065\017" +
    "\066\027\001\002\000\042\004\101\005\112\006\106\007" +
    "\105\010\113\011\103\012\110\016\104\017\111\020\077" +
    "\021\102\022\076\023\100\024\107\025\114\050\167\001" +
    "\002\000\004\053\013\001\002\000\004\067\uffd4\001\002" +
    "\000\036\013\071\014\047\015\046\026\045\035\035\036" +
    "\016\037\055\040\030\041\051\045\034\046\031\047\015" +
    "\065\017\066\027\001\002\000\042\004\101\005\112\006" +
    "\106\007\105\010\113\011\103\012\110\016\104\017\111" +
    "\020\077\021\102\022\076\023\100\024\107\025\114\067" +
    "\uffc5\001\002\000\054\013\uffe1\014\uffe1\015\uffe1\026\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\045\uffe1\046" +
    "\uffe1\047\uffe1\054\uffe1\055\uffe1\060\uffe1\061\uffe1\063\uffe1" +
    "\064\uffe1\065\uffe1\066\uffe1\074\uffe1\001\002\000\054\013" +
    "\uffdf\014\uffdf\015\uffdf\026\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\041\uffdf\045\uffdf\046\uffdf\047\uffdf\054\uffdf\055" +
    "\uffdf\060\uffdf\061\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf" +
    "\074\uffdf\001\002\000\054\013\uffca\014\uffca\015\uffca\026" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\045\uffca" +
    "\046\uffca\047\uffca\054\uffca\055\uffca\060\uffca\061\uffca\063" +
    "\uffca\064\uffca\065\uffca\066\uffca\074\uffca\001\002\000\020" +
    "\002\uffe5\003\uffe5\056\uffe5\057\uffe5\062\uffe5\067\uffe5\073" +
    "\uffe5\001\002\000\004\013\ufffc\001\002\000\004\013\uffff" +
    "\001\002\000\004\013\ufffe\001\002\000\004\013\ufffb\001" +
    "\002\000\004\013\206\001\002\000\004\013\ufffd\001\002" +
    "\000\004\013\ufffa\001\002\000\010\051\066\067\uffc9\070" +
    "\212\001\002\000\006\067\uffc7\070\210\001\002\000\004" +
    "\053\157\001\002\000\004\067\uffc6\001\002\000\036\013" +
    "\071\014\047\015\046\026\045\035\035\036\016\037\055" +
    "\040\030\041\051\045\034\046\031\047\015\065\017\066" +
    "\027\001\002\000\042\004\101\005\112\006\106\007\105" +
    "\010\113\011\103\012\110\016\104\017\111\020\077\021" +
    "\102\022\076\023\100\024\107\025\114\067\uffc8\001\002" +
    "\000\040\013\071\014\047\015\046\026\045\035\035\036" +
    "\016\037\055\040\030\041\051\045\034\046\031\047\015" +
    "\050\216\065\017\066\027\001\002\000\006\050\217\071" +
    "\134\001\002\000\052\004\uffd6\005\uffd6\006\uffd6\007\uffd6" +
    "\010\uffd6\011\uffd6\012\uffd6\016\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\050\uffd6\052\uffd6" +
    "\054\uffd6\067\uffd6\071\uffd6\001\002\000\052\004\uffd7\005" +
    "\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\016\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\050\uffd7\052\uffd7\054\uffd7\067\uffd7\071\uffd7\001\002" +
    "\000\036\013\071\014\047\015\046\026\045\035\035\036" +
    "\016\037\055\040\030\041\051\045\034\046\031\047\015" +
    "\065\017\066\027\001\002\000\042\004\101\005\112\006" +
    "\106\007\105\010\113\011\103\012\110\016\104\017\111" +
    "\020\077\021\102\022\076\023\100\024\107\025\114\050" +
    "\222\001\002\000\004\053\013\001\002\000\010\056\225" +
    "\057\226\067\uffd3\001\002\000\010\056\225\057\uffcf\067" +
    "\uffcf\001\002\000\004\047\233\001\002\000\004\053\013" +
    "\001\002\000\006\057\226\067\uffd1\001\002\000\004\067" +
    "\uffd2\001\002\000\004\067\uffd0\001\002\000\004\067\uffcc" +
    "\001\002\000\036\013\071\014\047\015\046\026\045\035" +
    "\035\036\016\037\055\040\030\041\051\045\034\046\031" +
    "\047\015\065\017\066\027\001\002\000\042\004\101\005" +
    "\112\006\106\007\105\010\113\011\103\012\110\016\104" +
    "\017\111\020\077\021\102\022\076\023\100\024\107\025" +
    "\114\050\235\001\002\000\004\053\013\001\002\000\010" +
    "\056\uffcd\057\uffcd\067\uffcd\001\002\000\006\057\uffce\067" +
    "\uffce\001\002\000\040\013\071\014\047\015\046\026\045" +
    "\035\035\036\016\037\055\040\030\041\051\045\034\046" +
    "\031\047\015\050\242\065\017\066\027\001\002\000\006" +
    "\050\243\071\134\001\002\000\052\004\uffd8\005\uffd8\006" +
    "\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\050" +
    "\uffd8\052\uffd8\054\uffd8\067\uffd8\071\uffd8\001\002\000\052" +
    "\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\050\uffd9\052\uffd9\054\uffd9\067\uffd9\071" +
    "\uffd9\001\002\000\042\004\101\005\112\006\106\007\105" +
    "\010\113\011\103\012\110\016\104\017\111\020\077\021" +
    "\102\022\076\023\100\024\107\025\114\050\245\001\002" +
    "\000\052\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011" +
    "\uffbf\012\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\050\uffbf\052\uffbf\054\uffbf\067" +
    "\uffbf\071\uffbf\001\002\000\042\004\101\005\112\006\106" +
    "\007\105\010\113\011\103\012\110\016\104\017\111\020" +
    "\077\021\102\022\076\023\100\024\107\025\114\067\uffe3" +
    "\001\002\000\010\002\uffef\003\uffef\073\uffef\001\002\000" +
    "\004\053\013\001\002\000\010\002\uffed\003\uffed\073\uffed" +
    "\001\002\000\004\013\256\001\002\000\004\047\254\001" +
    "\002\000\004\050\255\001\002\000\004\053\uffec\001\002" +
    "\000\004\047\257\001\002\000\020\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\050\261\001\002\000\016" +
    "\027\200\030\201\031\204\032\177\033\202\034\205\001" +
    "\002\000\004\053\uffeb\001\002\000\006\050\uffe8\071\uffe8" +
    "\001\002\000\006\050\267\071\266\001\002\000\004\013" +
    "\265\001\002\000\006\050\uffe6\071\uffe6\001\002\000\016" +
    "\027\200\030\201\031\204\032\177\033\202\034\205\001" +
    "\002\000\004\053\uffe9\001\002\000\006\050\uffe7\071\uffe7" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\012\002\003\006\006\007\007\010\010\001" +
    "\001\000\002\001\001\000\004\003\251\001\001\000\004" +
    "\010\247\001\001\000\006\007\246\010\010\001\001\000" +
    "\002\001\001\000\004\011\011\001\001\000\002\001\001" +
    "\000\040\004\022\014\036\015\024\016\056\017\037\020" +
    "\047\021\042\022\051\023\052\027\040\030\035\032\053" +
    "\033\017\034\025\035\032\001\001\000\022\004\022\022" +
    "\051\027\245\030\066\032\053\033\017\034\025\035\032" +
    "\001\001\000\022\004\022\022\051\027\243\030\066\032" +
    "\053\033\017\034\025\035\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\022\015\174\016\056\017\037\020\047" +
    "\021\042\022\051\023\052\027\040\030\035\032\053\033" +
    "\017\034\025\035\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\142\001\001\000\022\004\022\022\051\027\141\030\066" +
    "\032\053\033\017\034\025\035\032\001\001\000\004\030" +
    "\140\001\001\000\004\030\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\022\022\051\027\067\030\066\032\053\033" +
    "\017\034\025\035\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\022\005\072\022" +
    "\051\027\073\030\066\032\053\033\017\034\025\035\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\022\022\051\027\132\030\066\032\053" +
    "\033\017\034\025\035\032\001\001\000\022\004\022\022" +
    "\051\027\131\030\066\032\053\033\017\034\025\035\032" +
    "\001\001\000\022\004\022\022\051\027\130\030\066\032" +
    "\053\033\017\034\025\035\032\001\001\000\022\004\022" +
    "\022\051\027\127\030\066\032\053\033\017\034\025\035" +
    "\032\001\001\000\022\004\022\022\051\027\126\030\066" +
    "\032\053\033\017\034\025\035\032\001\001\000\022\004" +
    "\022\022\051\027\125\030\066\032\053\033\017\034\025" +
    "\035\032\001\001\000\022\004\022\022\051\027\124\030" +
    "\066\032\053\033\017\034\025\035\032\001\001\000\022" +
    "\004\022\022\051\027\123\030\066\032\053\033\017\034" +
    "\025\035\032\001\001\000\022\004\022\022\051\027\122" +
    "\030\066\032\053\033\017\034\025\035\032\001\001\000" +
    "\022\004\022\022\051\027\121\030\066\032\053\033\017" +
    "\034\025\035\032\001\001\000\022\004\022\022\051\027" +
    "\120\030\066\032\053\033\017\034\025\035\032\001\001" +
    "\000\022\004\022\022\051\027\117\030\066\032\053\033" +
    "\017\034\025\035\032\001\001\000\022\004\022\022\051" +
    "\027\116\030\066\032\053\033\017\034\025\035\032\001" +
    "\001\000\022\004\022\022\051\027\115\030\066\032\053" +
    "\033\017\034\025\035\032\001\001\000\022\004\022\022" +
    "\051\027\114\030\066\032\053\033\017\034\025\035\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\022\022\051\027\135\030\066\032\053\033\017\034\025" +
    "\035\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\022\022\051\027\145\030\066\032\053\033\017\034\025" +
    "\035\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\152\030\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\022\022\051\027\157\030\066\031\155\032\053\033\017" +
    "\034\025\035\032\001\001\000\002\001\001\000\024\004" +
    "\022\005\160\022\051\027\073\030\066\032\053\033\017" +
    "\034\025\035\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\022\022\051\027\163" +
    "\030\066\032\053\033\017\034\025\035\032\001\001\000" +
    "\002\001\001\000\022\004\022\022\051\027\165\030\066" +
    "\032\053\033\017\034\025\035\032\001\001\000\002\001" +
    "\001\000\004\011\167\001\001\000\002\001\001\000\022" +
    "\004\022\022\051\027\171\030\066\032\053\033\017\034" +
    "\025\035\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\210\001\001\000\002\001\001\000\022\004\022\022" +
    "\051\027\212\030\066\032\053\033\017\034\025\035\032" +
    "\001\001\000\002\001\001\000\024\004\022\005\214\022" +
    "\051\027\073\030\066\032\053\033\017\034\025\035\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\022\022\051\027\220\030\066\032\053" +
    "\033\017\034\025\035\032\001\001\000\002\001\001\000" +
    "\004\011\222\001\001\000\010\024\223\025\226\026\227" +
    "\001\001\000\006\024\223\025\236\001\001\000\002\001" +
    "\001\000\004\011\231\001\001\000\004\026\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\022\022\051\027\233\030\066\032\053\033\017" +
    "\034\025\035\032\001\001\000\002\001\001\000\004\011" +
    "\235\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\022\005\240\022\051\027\073\030\066\032\053\033" +
    "\017\034\025\035\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\257\001\001\000\010\003\263\012\262\013" +
    "\261\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\263\013\267\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }



  // https://www2.cs.tum.edu/projects/cup/docs.php#errors:~:text=4.%20Customizing%20the%20Parser

  Lexer lex;

  public parser(Lexer lex) {
    this.lex = lex;
    this.symbolFactory = new DefaultSymbolFactory();
  }

  // Se tiene que hacer un override a los metodos para atrapar los errores
  // Esta llama a report_error("Syntax error", null); // creo que se puede hacer override de report_fatal_error

  //Tener en cuenta la sintaxis de los errores en la documentacion de CUP
  // La expresion de error se deja al final de cada produccion
  //Es diferente al ejemplo del profe, no es necesario tener que crear una expresion de error para cada produccion
  /*
  stmt ::= expr SEMI | while_stmt SEMI | if_stmt SEMI | ... |
	     error SEMI
	     ;
  */
  public void syntax_error(Symbol cur_token){
    if (cur_token.value == null) {
      System.err.println("Syntax error at line " + cur_token.left + ", column " + cur_token.right + ": " + cur_token.sym);
    } else {
      System.err.println("Syntax error at line " + cur_token.left + ", column " + cur_token.right + ": " + cur_token.sym + ", value: " + cur_token.value);
    }    
  } 
  // este llama a report_fatal_error("Couldn't repair and continue parse", null); // creo que se puede hacer override de report_fatal_error.
  public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
    throw new Exception("Unrecovered syntax error at line " + cur_token.left + ", column " + cur_token.right + ": " + cur_token.sym + ", value: " + cur_token.value);
  }
  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


  public void hola() {
    System.out.println("Hola");
  }
  public void adios() {
    System.out.println("Adios\n");
  }

    HashMap<String, ArrayList<SymbolObject>> listaTablasSimbolos = new HashMap<String, ArrayList<SymbolObject>>();
    String currentHash = "";

    public void imprimirTablasSimbolos(){
      for (String key : listaTablasSimbolos.keySet()) {
        System.out.println("Tabla de simbolos: " + key);
        System.out.println("Variables: ");
        for (SymbolObject variable : listaTablasSimbolos.get(key)) {
          System.out.println(variable.toString());
        }
        System.out.println(" ");
      }
  }
    public void cambiarContexto(String nombreFuncion) {
        currentHash = nombreFuncion;
        listaTablasSimbolos.put(nombreFuncion, new ArrayList<SymbolObject>());
    }

    public void annadirSymbol(SymbolObject symbol) {
    listaTablasSimbolos.get(currentHash).add(symbol);
  }

public void exportarTablaSimbolosHTML() {
    List<String[]> data = new ArrayList<>();
    data.add(new String[]{"Tabla", "Tipo Entrada", "Nombre", "Tipo Dato"});

    for (Map.Entry<String, ArrayList<SymbolObject>> entry : listaTablasSimbolos.entrySet()) {
        for (SymbolObject value : entry.getValue()) {
            data.add(new String[]{entry.getKey(), value.getEntrada(), value.getID(), value.getTipo()});
        }
    }

    StringBuilder htmlBuilder = new StringBuilder();
    htmlBuilder.append("<html><head><title>Tabla de Símbolos</title>");
    htmlBuilder.append("<style>");
    htmlBuilder.append("@import url('https://fonts.googleapis.com/css?family=Roboto:400,700');");
    htmlBuilder.append("table { border-collapse: separate; width: 100%; box-shadow: 0 2px 3px rgba(0,0,0,0.1);");
    htmlBuilder.append("font-family: 'Roboto', sans-serif; color: #333; margin: 25px 0; border-spacing: 0; }");
    htmlBuilder.append("thead { background-color: #8A33FF; color: #FFF; }");
    htmlBuilder.append("th { font-weight: 700; padding: 12px 15px; text-align: left; }");
    htmlBuilder.append("td { border-top: 1px solid #DDD; padding: 12px 15px; text-align: left; }");
    htmlBuilder.append("tbody tr:nth-child(odd) { background-color: #F6F6F6; }");
    htmlBuilder.append("tbody tr:nth-child(even) { background-color: #E9E9E9; }");
    htmlBuilder.append("</style></head><body><table>");

    // Aquí añadimos la cabecera de la tabla
    htmlBuilder.append("<thead><tr>");
    for (String header : data.get(0)) {
        htmlBuilder.append("<th>").append(header).append("</th>");
    }
    htmlBuilder.append("</tr></thead><tbody>");

    // Luego el resto de los datos
    for (int i = 1; i < data.size(); i++) {
        String[] row = data.get(i);
        htmlBuilder.append("<tr>");
        for (String cell : row) {
            htmlBuilder.append("<td>").append(cell).append("</td>");
        }
        htmlBuilder.append("</tr>");
    }

    htmlBuilder.append("</tbody></table></body></html>");

    // Escribe el HTML en un archivo
    try (FileWriter writer = new FileWriter("src/test/java/com/navidad/tabla_simbolos.html")) {
        writer.write(htmlBuilder.toString());
    } catch (IOException e) {
        e.printStackTrace();
    }

    System.out.println("Tabla de símbolos exportada a tabla_simbolos.html");
}

  

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= NAVIDAD EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NAVIDAD ::= FUNCIONES_BOLSA_NAVIDENNA 
            {
              Object RESULT =null;
		
        hola();
        exportarTablaSimbolosHTML();
        imprimirTablasSimbolos();
        adios();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NAVIDAD",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // T_COPO ::= COLACHO_INT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // T_COPO ::= JOULUPUKKI_FLOAT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // T_COPO ::= PAPA_NOEL_BOOLEAN 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // T_COPO ::= CLAUS_CHAR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // T_COPO ::= SANTA_STRING 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // T_COPO ::= VIEJITO_PASCUERO_ARRAY 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // l_COPO ::= L_COLACHO_INT 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // l_COPO ::= L_JOULUPUKKI_FLOAT 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // l_COPO ::= L_CLAUS_CHAR 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // l_COPO ::= L_SANTA_STRING 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // l_COPO ::= L_VIEJITO_PASCUERO_ARRAY 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // l_COPO ::= PAPA_NOEL_TRUE 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // l_COPO ::= PAPA_NOEL_FALSE 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARG_COPO ::= EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG_COPO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARG_COPO ::= ARG_COPO SEPARADOR_BASTON EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG_COPO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCIONES_BOLSA_NAVIDENNA ::= FUNCION_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_BOLSA_NAVIDENNA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCIONES_BOLSA_NAVIDENNA ::= FUNCIONES_BOLSA_NAVIDENNA FUNCION_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_BOLSA_NAVIDENNA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCION_REGALO ::= DEF_JUGUETE CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION_REGALO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCION_REGALO ::= error DEF_JUGUETE CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION_REGALO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DEF_JUGUETE ::= FUNCTION_VILLANCICOS ESTRELLA_MAIN ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;
		int Funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object Fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              cambiarContexto("main");
              annadirSymbol(new SymbolObject("function","int","main"));
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF_JUGUETE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DEF_JUGUETE ::= FUNCTION_VILLANCICOS T_COPO PERSONA ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;
		int Funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object Fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object Tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
              cambiarContexto(id.toString());
              annadirSymbol(new SymbolObject("function",Tipo.toString(), id.toString()));
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF_JUGUETE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$0 ::= 
            {
              Object RESULT =null;
		int Funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object Fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object Tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              cambiarContexto(id.toString());
              annadirSymbol(new SymbolObject("function",Tipo.toString(), id.toString()));
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEF_JUGUETE ::= FUNCTION_VILLANCICOS T_COPO PERSONA ABRE_CUENTO NT$0 PARAMETROS_PALETAS CIERRE_CUENTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int Funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object Fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int Tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object Tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF_JUGUETE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMETROS_PALETAS ::= PARAMETRO_PALETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PALETAS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMETROS_PALETAS ::= PARAMETROS_PALETAS SEPARADOR_BASTON PARAMETRO_PALETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PALETAS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMETRO_PALETA ::= T_COPO PERSONA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                annadirSymbol(new SymbolObject("param",tipo.toString(), id.toString()));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_PALETA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CODIGO_ENVOLTURA ::= ABRE_REGALO LINEAS_LAZOS CIERRA_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO_ENVOLTURA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CODIGO_ENVOLTURA ::= ABRE_REGALO CIERRA_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO_ENVOLTURA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RETORNO_BURRITO_SABANERO ::= ENVIA_RETURN EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO_BURRITO_SABANERO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LINEA_LAZO ::= ASIGNACION_GORRO FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LINEA_LAZO ::= EXPRESION_BOTA FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LINEA_LAZO ::= CORTA_BREAK FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LINEA_LAZO ::= RETORNO_BURRITO_SABANERO FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LINEA_LAZO ::= FOR_FANTASMA_PRESENTE FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LINEA_LAZO ::= DO_UNTIL_FANTASMA_PASADO FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LINEA_LAZO ::= IF_JUANITO_ESCARCHA FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CALL_FUNCTION_FANTASMA_FUTURO ::= PERSONA ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CALL_FUNCTION_FANTASMA_FUTURO ::= PERSONA ABRE_CUENTO ARG_COPO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CALL_FUNCTION_FANTASMA_FUTURO ::= NARRA_PRINT ABRE_CUENTO ARG_COPO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CALL_FUNCTION_FANTASMA_FUTURO ::= NARRA_PRINT ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CALL_FUNCTION_FANTASMA_FUTURO ::= ESCUCHA_READ ABRE_CUENTO ARG_COPO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CALL_FUNCTION_FANTASMA_FUTURO ::= ESCUCHA_READ ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DO_UNTIL_FANTASMA_PASADO ::= HACE_DO CODIGO_ENVOLTURA REVISA_UNTIL ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_UNTIL_FANTASMA_PASADO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FOR_FANTASMA_PRESENTE ::= ENVUELVE_FOR ABRE_CUENTO ASIGNACION_GORRO FIN_REGALO EXPRESION_BOTA FIN_REGALO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR_FANTASMA_PRESENTE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF_JUANITO_ESCARCHA ::= ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_JUANITO_ESCARCHA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF_JUANITO_ESCARCHA ::= ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA ELSE_SCROOGE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_JUANITO_ESCARCHA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF_JUANITO_ESCARCHA ::= ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA ELIF_MULTI_JACK_FROST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_JUANITO_ESCARCHA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IF_JUANITO_ESCARCHA ::= ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA ELIF_MULTI_JACK_FROST ELSE_SCROOGE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_JUANITO_ESCARCHA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELIF_MULTI_JACK_FROST ::= ELIF_BATMAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIF_MULTI_JACK_FROST",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELIF_MULTI_JACK_FROST ::= ELIF_BATMAN ELIF_MULTI_JACK_FROST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIF_MULTI_JACK_FROST",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELIF_BATMAN ::= HADA_ELIF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIF_BATMAN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELSE_SCROOGE ::= DUENDE_ELSE CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_SCROOGE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LINEAS_LAZOS ::= LINEA_LAZO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEAS_LAZOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LINEAS_LAZOS ::= LINEAS_LAZOS LINEA_LAZO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEAS_LAZOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO PERSONA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    annadirSymbol(new SymbolObject("local",tipo.toString(), id.toString()));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO PERSONA ENTREGA EXPRESION_BOTA 
            {
              Object RESULT =null;
		int localleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int localright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object local = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    annadirSymbol(new SymbolObject("local",tipo.toString(), id.toString()));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO ELEMENTO_ARRAY_DULCE 
            {
              Object RESULT =null;
		int localleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int localright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object local = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elem_arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elem_arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elem_array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    annadirSymbol(new SymbolObject("local",tipo.toString()+" arr", elem_array.toString()));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO ELEMENTO_ARRAY_DULCE ENTREGA l_ARRAY_TAMAL 
            {
              Object RESULT =null;
		int localleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int localright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object local = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elem_arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elem_arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object elem_array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    annadirSymbol(new SymbolObject("local",tipo.toString()+" arr", elem_array.toString()));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIGNACION_GORRO ::= PERSONA ENTREGA EXPRESION_BOTA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASIGNACION_GORRO ::= ELEMENTO_ARRAY_DULCE ENTREGA EXPRESION_BOTA 
            {
              Object RESULT =null;
		int elem_arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elem_arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object elem_array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASIGNACION_GORRO ::= ELEMENTO_ARRAY_DULCE ENTREGA l_ARRAY_TAMAL 
            {
              Object RESULT =null;
		int elem_arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elem_arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object elem_array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION_BOTA ::= l_COPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION_BOTA ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION_BOTA ::= ELEMENTO_ARRAY_DULCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION_BOTA ::= ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION_BOTA ::= CALL_FUNCTION_FANTASMA_FUTURO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION_BOTA ::= EXPRESION_ARIT_REGALOPRIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION_BOTA ::= EXPRESION_REL_REGALO_COMPRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION_BOTA ::= EXPRESION_LOG_REGALO_MANUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ELEMENTO_ARRAY_DULCE ::= PERSONA ABRE_EMPAQUE EXPRESION_BOTA CIERRA_EMPAQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    RESULT = id.toString();
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ARRAY_DULCE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // l_ARRAY_TAMAL ::= ABRE_REGALO ARG_COPO CIERRA_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_ARRAY_TAMAL",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ARRAY_OPERATION_CASCABEL ::= GRINCH_DECREMENT ELEMENTO_ARRAY_DULCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_OPERATION_CASCABEL",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ARRAY_OPERATION_CASCABEL ::= QUIEN_INCREMENT ELEMENTO_ARRAY_DULCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_OPERATION_CASCABEL",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA RODOLFO_SUM EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA TRUENO_DECREASE EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA RELAMPAGO_INT_DIVISION EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA RAYO_FLOAT_DIVISION EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA SALTARIN_ELEVATE EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA COMETA_PRODUCT EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA CUPIDO_MODULE EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION_ARIT_REGALOPRIN ::= GRINCH_DECREMENT PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION_ARIT_REGALOPRIN ::= QUIEN_INCREMENT PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION_ARIT_REGALOPRIN ::= ARRAY_OPERATION_CASCABEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_GREATER EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_LESS EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_NOT_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_GREATER_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_LESS_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION_LOG_REGALO_MANUAL ::= EXPRESION_BOTA REY_MELCHOR_COJUNCTION EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOG_REGALO_MANUAL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION_LOG_REGALO_MANUAL ::= EXPRESION_BOTA REY_GASPAR_DISJUNCTION EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOG_REGALO_MANUAL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION_LOG_REGALO_MANUAL ::= REY_BALTASAR_NOT EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOG_REGALO_MANUAL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
