
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.navidad;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.io.IOException;
import java.io.FileWriter;
import java.util.List;
import java.util.Arrays;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\005" +
    "\003\000\002\005\005\000\002\006\003\000\002\006\004" +
    "\000\002\007\004\000\002\007\005\000\002\010\006\000" +
    "\002\010\007\000\002\037\002\000\002\010\011\000\002" +
    "\012\003\000\002\012\005\000\002\013\004\000\002\011" +
    "\005\000\002\011\004\000\002\011\005\000\002\017\004" +
    "\000\002\017\003\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\022" +
    "\005\000\002\022\006\000\002\022\006\000\002\022\005" +
    "\000\002\022\006\000\002\022\005\000\002\040\002\000" +
    "\002\020\011\000\002\041\002\000\002\042\002\000\002" +
    "\043\002\000\002\044\002\000\002\021\017\000\002\045" +
    "\002\000\002\023\011\000\002\027\002\000\002\027\003" +
    "\000\002\027\004\000\002\025\003\000\002\025\004\000" +
    "\002\046\002\000\002\024\010\000\002\026\004\000\002" +
    "\014\003\000\002\014\004\000\002\016\005\000\002\016" +
    "\007\000\002\016\005\000\002\016\007\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\005\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\031\006\000\002\032\005\000\002\033\004" +
    "\000\002\033\004\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\004\000\002\034" +
    "\004\000\002\034\003\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\006\003\006\073\005\001\002\000\004\002" +
    "\303\001\002\000\020\027\211\030\212\031\215\032\210" +
    "\033\213\034\216\076\265\001\002\000\004\073\005\001" +
    "\002\000\010\002\000\003\006\073\005\001\002\000\010" +
    "\002\ufff0\003\ufff0\073\ufff0\001\002\000\004\053\013\001" +
    "\002\000\010\002\uffee\003\uffee\073\uffee\001\002\000\056" +
    "\003\037\013\024\014\050\015\047\026\046\035\035\036" +
    "\016\037\056\040\030\041\052\045\034\046\031\047\015" +
    "\054\022\055\021\060\043\061\045\063\014\064\057\065" +
    "\017\066\027\074\032\001\002\000\040\013\072\014\050" +
    "\015\047\026\046\035\035\036\016\037\056\040\030\041" +
    "\052\045\034\046\031\047\015\065\017\066\027\067\uffe1" +
    "\001\002\000\036\013\072\014\050\015\047\026\046\035" +
    "\035\036\016\037\056\040\030\041\052\045\034\046\031" +
    "\047\015\065\017\066\027\001\002\000\052\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\016\ufff8" +
    "\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025" +
    "\ufff8\050\ufff8\052\ufff8\054\ufff8\067\ufff8\071\ufff8\001\002" +
    "\000\004\047\252\001\002\000\052\004\uffb3\005\uffb3\006" +
    "\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\016\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\050" +
    "\uffb3\052\uffb3\054\uffb3\067\uffb3\071\uffb3\001\002\000\004" +
    "\047\231\001\002\000\020\002\uffe4\003\uffe4\056\uffe4\057" +
    "\uffe4\062\uffe4\067\uffe4\073\uffe4\001\002\000\052\004\uffb8" +
    "\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\050\uffb8\052\uffb8\054\uffb8\067\uffb8\071\uffb8\001" +
    "\002\000\050\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7" +
    "\011\uffb7\012\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\024\uffb7\025\uffb7\047\073\051\067\067\uffb7" +
    "\070\177\001\002\000\056\003\uffc1\013\uffc1\014\uffc1\015" +
    "\uffc1\026\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\045\uffc1\046\uffc1\047\uffc1\054\uffc1\055\uffc1\060\uffc1\061" +
    "\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\074\uffc1\001\002" +
    "\000\052\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011" +
    "\uffb2\012\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2" +
    "\023\uffb2\024\uffb2\025\uffb2\050\uffb2\052\uffb2\054\uffb2\067" +
    "\uffb2\071\uffb2\001\002\000\004\047\225\001\002\000\052" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6" +
    "\024\ufff6\025\ufff6\050\ufff6\052\ufff6\054\ufff6\067\ufff6\071" +
    "\ufff6\001\002\000\052\004\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\016\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\050\ufff3\052\ufff3" +
    "\054\ufff3\067\ufff3\071\ufff3\001\002\000\016\027\211\030" +
    "\212\031\215\032\210\033\213\034\216\001\002\000\052" +
    "\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012" +
    "\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\050\uffb1\052\uffb1\054\uffb1\067\uffb1\071" +
    "\uffb1\001\002\000\052\004\ufff4\005\ufff4\006\ufff4\007\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\016\ufff4\017\ufff4\020\ufff4\021" +
    "\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\050\ufff4\052\ufff4" +
    "\054\ufff4\067\ufff4\071\ufff4\001\002\000\052\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\016\ufff9" +
    "\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\050\ufff9\052\ufff9\054\ufff9\067\ufff9\071\ufff9\001\002" +
    "\000\044\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011" +
    "\uffb6\012\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\024\uffb6\025\uffb6\067\uffb6\070\157\001\002\000" +
    "\006\054\207\067\206\001\002\000\056\003\205\013\024" +
    "\014\050\015\047\026\046\035\035\036\016\037\056\040" +
    "\030\041\052\045\034\046\031\047\015\054\203\055\021" +
    "\060\043\061\045\063\014\064\057\065\017\066\027\074" +
    "\032\001\002\000\004\067\202\001\002\000\042\004\102" +
    "\005\113\006\110\007\106\010\114\011\104\012\111\016" +
    "\105\017\112\020\100\021\103\022\077\023\101\024\107" +
    "\025\115\067\201\001\002\000\004\047\153\001\002\000" +
    "\004\067\152\001\002\000\004\053\uffd2\001\002\000\036" +
    "\013\072\014\050\015\047\026\046\035\035\036\016\037" +
    "\056\040\030\041\052\045\034\046\031\047\015\065\017" +
    "\066\027\001\002\000\004\013\141\001\002\000\004\013" +
    "\065\001\002\000\004\067\064\001\002\000\052\004\ufff5" +
    "\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\050\ufff5\052\ufff5\054\ufff5\067\ufff5\071\ufff5\001" +
    "\002\000\052\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4" +
    "\011\uffb4\012\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\050\uffb4\052\uffb4\054\uffb4" +
    "\067\uffb4\071\uffb4\001\002\000\004\067\063\001\002\000" +
    "\052\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3" +
    "\012\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023" +
    "\uffa3\024\uffa3\025\uffa3\050\uffa3\052\uffa3\054\uffa3\067\uffa3" +
    "\071\uffa3\001\002\000\052\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\050\ufff7\052" +
    "\ufff7\054\ufff7\067\ufff7\071\ufff7\001\002\000\004\067\062" +
    "\001\002\000\004\067\061\001\002\000\056\003\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\026\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\045\uffe0\046\uffe0\047\uffe0\054\uffe0\055" +
    "\uffe0\060\uffe0\061\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0" +
    "\074\uffe0\001\002\000\056\003\uffde\013\uffde\014\uffde\015" +
    "\uffde\026\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\045\uffde\046\uffde\047\uffde\054\uffde\055\uffde\060\uffde\061" +
    "\uffde\063\uffde\064\uffde\065\uffde\066\uffde\074\uffde\001\002" +
    "\000\056\003\uffda\013\uffda\014\uffda\015\uffda\026\uffda\035" +
    "\uffda\036\uffda\037\uffda\040\uffda\041\uffda\045\uffda\046\uffda" +
    "\047\uffda\054\uffda\055\uffda\060\uffda\061\uffda\063\uffda\064" +
    "\uffda\065\uffda\066\uffda\074\uffda\001\002\000\056\003\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\026\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\041\uffdb\045\uffdb\046\uffdb\047\uffdb\054\uffdb" +
    "\055\uffdb\060\uffdb\061\uffdb\063\uffdb\064\uffdb\065\uffdb\066" +
    "\uffdb\074\uffdb\001\002\000\054\004\uffa5\005\uffa5\006\uffa5" +
    "\007\uffa5\010\uffa5\011\uffa5\012\uffa5\016\uffa5\017\uffa5\020" +
    "\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\050\uffa5" +
    "\051\067\052\uffa5\054\uffa5\067\uffa5\071\uffa5\001\002\000" +
    "\052\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae" +
    "\012\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023" +
    "\uffae\024\uffae\025\uffae\050\uffae\052\uffae\054\uffae\067\uffae" +
    "\071\uffae\001\002\000\036\013\072\014\050\015\047\026" +
    "\046\035\035\036\016\037\056\040\030\041\052\045\034" +
    "\046\031\047\015\065\017\066\027\001\002\000\052\004" +
    "\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\050\uffb6\052\uffb6\054\uffb6\067\uffb6\071\uffb6" +
    "\001\002\000\042\004\102\005\113\006\110\007\106\010" +
    "\114\011\104\012\111\016\105\017\112\020\100\021\103" +
    "\022\077\023\101\024\107\025\115\052\140\001\002\000" +
    "\056\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7" +
    "\012\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023" +
    "\uffb7\024\uffb7\025\uffb7\047\073\050\uffb7\051\067\052\uffb7" +
    "\054\uffb7\067\uffb7\071\uffb7\001\002\000\040\013\072\014" +
    "\050\015\047\026\046\035\035\036\016\037\056\040\030" +
    "\041\052\045\034\046\031\047\015\050\076\065\017\066" +
    "\027\001\002\000\006\050\136\071\135\001\002\000\046" +
    "\004\102\005\113\006\110\007\106\010\114\011\104\012" +
    "\111\016\105\017\112\020\100\021\103\022\077\023\101" +
    "\024\107\025\115\050\ufff2\054\ufff2\071\ufff2\001\002\000" +
    "\052\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8" +
    "\012\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\050\uffd8\052\uffd8\054\uffd8\067\uffd8" +
    "\071\uffd8\001\002\000\036\013\072\014\050\015\047\026" +
    "\046\035\035\036\016\037\056\040\030\041\052\045\034" +
    "\046\031\047\015\065\017\066\027\001\002\000\036\013" +
    "\072\014\050\015\047\026\046\035\035\036\016\037\056" +
    "\040\030\041\052\045\034\046\031\047\015\065\017\066" +
    "\027\001\002\000\036\013\072\014\050\015\047\026\046" +
    "\035\035\036\016\037\056\040\030\041\052\045\034\046" +
    "\031\047\015\065\017\066\027\001\002\000\036\013\072" +
    "\014\050\015\047\026\046\035\035\036\016\037\056\040" +
    "\030\041\052\045\034\046\031\047\015\065\017\066\027" +
    "\001\002\000\036\013\072\014\050\015\047\026\046\035" +
    "\035\036\016\037\056\040\030\041\052\045\034\046\031" +
    "\047\015\065\017\066\027\001\002\000\036\013\072\014" +
    "\050\015\047\026\046\035\035\036\016\037\056\040\030" +
    "\041\052\045\034\046\031\047\015\065\017\066\027\001" +
    "\002\000\036\013\072\014\050\015\047\026\046\035\035" +
    "\036\016\037\056\040\030\041\052\045\034\046\031\047" +
    "\015\065\017\066\027\001\002\000\036\013\072\014\050" +
    "\015\047\026\046\035\035\036\016\037\056\040\030\041" +
    "\052\045\034\046\031\047\015\065\017\066\027\001\002" +
    "\000\036\013\072\014\050\015\047\026\046\035\035\036" +
    "\016\037\056\040\030\041\052\045\034\046\031\047\015" +
    "\065\017\066\027\001\002\000\036\013\072\014\050\015" +
    "\047\026\046\035\035\036\016\037\056\040\030\041\052" +
    "\045\034\046\031\047\015\065\017\066\027\001\002\000" +
    "\036\013\072\014\050\015\047\026\046\035\035\036\016" +
    "\037\056\040\030\041\052\045\034\046\031\047\015\065" +
    "\017\066\027\001\002\000\036\013\072\014\050\015\047" +
    "\026\046\035\035\036\016\037\056\040\030\041\052\045" +
    "\034\046\031\047\015\065\017\066\027\001\002\000\036" +
    "\013\072\014\050\015\047\026\046\035\035\036\016\037" +
    "\056\040\030\041\052\045\034\046\031\047\015\065\017" +
    "\066\027\001\002\000\036\013\072\014\050\015\047\026" +
    "\046\035\035\036\016\037\056\040\030\041\052\045\034" +
    "\046\031\047\015\065\017\066\027\001\002\000\036\013" +
    "\072\014\050\015\047\026\046\035\035\036\016\037\056" +
    "\040\030\041\052\045\034\046\031\047\015\065\017\066" +
    "\027\001\002\000\052\004\uff9b\005\uff9b\006\uff9b\007\uff9b" +
    "\010\uff9b\011\uff9b\012\uff9b\016\uff9b\017\uff9b\020\uff9b\021" +
    "\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\050\uff9b\052\uff9b" +
    "\054\uff9b\067\uff9b\071\uff9b\001\002\000\052\004\uffa8\005" +
    "\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\016\105" +
    "\017\112\020\100\021\103\022\077\023\101\024\107\025" +
    "\115\050\uffa8\052\uffa8\054\uffa8\067\uffa8\071\uffa8\001\002" +
    "\000\052\004\uffab\005\uffab\006\110\007\106\010\114\011" +
    "\104\012\111\016\105\017\112\020\100\021\103\022\077" +
    "\023\101\024\107\025\115\050\uffab\052\uffab\054\uffab\067" +
    "\uffab\071\uffab\001\002\000\052\004\uffa1\005\uffa1\006\uffa1" +
    "\007\uffa1\010\uffa1\011\uffa1\012\uffa1\016\uffa1\017\uffa1\020" +
    "\uffa1\021\uffa1\022\uffa1\023\uffa1\024\107\025\115\050\uffa1" +
    "\052\uffa1\054\uffa1\067\uffa1\071\uffa1\001\002\000\052\004" +
    "\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6" +
    "\016\105\017\112\020\100\021\103\022\077\023\101\024" +
    "\107\025\115\050\uffa6\052\uffa6\054\uffa6\067\uffa6\071\uffa6" +
    "\001\002\000\052\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010" +
    "\114\011\uffaa\012\111\016\105\017\112\020\100\021\103" +
    "\022\077\023\101\024\107\025\115\050\uffaa\052\uffaa\054" +
    "\uffaa\067\uffaa\071\uffaa\001\002\000\052\004\uff9c\005\uff9c" +
    "\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\016\uff9c\017" +
    "\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\115" +
    "\050\uff9c\052\uff9c\054\uff9c\067\uff9c\071\uff9c\001\002\000" +
    "\052\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\114\011\uffa9" +
    "\012\111\016\105\017\112\020\100\021\103\022\077\023" +
    "\101\024\107\025\115\050\uffa9\052\uffa9\054\uffa9\067\uffa9" +
    "\071\uffa9\001\002\000\052\004\uffa2\005\uffa2\006\uffa2\007" +
    "\uffa2\010\uffa2\011\uffa2\012\uffa2\016\uffa2\017\uffa2\020\uffa2" +
    "\021\uffa2\022\uffa2\023\uffa2\024\107\025\115\050\uffa2\052" +
    "\uffa2\054\uffa2\067\uffa2\071\uffa2\001\002\000\052\004\uffa7" +
    "\005\uffa7\006\uffa7\007\uffa7\010\114\011\uffa7\012\111\016" +
    "\105\017\112\020\100\021\103\022\077\023\101\024\107" +
    "\025\115\050\uffa7\052\uffa7\054\uffa7\067\uffa7\071\uffa7\001" +
    "\002\000\052\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f" +
    "\011\uff9f\012\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022" +
    "\uff9f\023\uff9f\024\107\025\115\050\uff9f\052\uff9f\054\uff9f" +
    "\067\uff9f\071\uff9f\001\002\000\052\004\uffac\005\uffac\006" +
    "\110\007\106\010\114\011\104\012\111\016\105\017\112" +
    "\020\100\021\103\022\077\023\101\024\107\025\115\050" +
    "\uffac\052\uffac\054\uffac\067\uffac\071\uffac\001\002\000\052" +
    "\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012" +
    "\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d" +
    "\024\107\025\115\050\uff9d\052\uff9d\054\uff9d\067\uff9d\071" +
    "\uff9d\001\002\000\052\004\uffa0\005\uffa0\006\uffa0\007\uffa0" +
    "\010\uffa0\011\uffa0\012\uffa0\016\uffa0\017\uffa0\020\uffa0\021" +
    "\uffa0\022\uffa0\023\uffa0\024\107\025\115\050\uffa0\052\uffa0" +
    "\054\uffa0\067\uffa0\071\uffa0\001\002\000\052\004\uff9e\005" +
    "\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\016\uff9e" +
    "\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\107\025" +
    "\115\050\uff9e\052\uff9e\054\uff9e\067\uff9e\071\uff9e\001\002" +
    "\000\036\013\072\014\050\015\047\026\046\035\035\036" +
    "\016\037\056\040\030\041\052\045\034\046\031\047\015" +
    "\065\017\066\027\001\002\000\052\004\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\050" +
    "\uffd7\052\uffd7\054\uffd7\067\uffd7\071\uffd7\001\002\000\046" +
    "\004\102\005\113\006\110\007\106\010\114\011\104\012" +
    "\111\016\105\017\112\020\100\021\103\022\077\023\101" +
    "\024\107\025\115\050\ufff1\054\ufff1\071\ufff1\001\002\000" +
    "\054\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0" +
    "\012\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\024\uffb0\025\uffb0\050\uffb0\052\uffb0\054\uffb0\067\uffb0" +
    "\070\uffb0\071\uffb0\001\002\000\054\004\uffa4\005\uffa4\006" +
    "\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\016\uffa4\017\uffa4" +
    "\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\050" +
    "\uffa4\051\067\052\uffa4\054\uffa4\067\uffa4\071\uffa4\001\002" +
    "\000\052\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011" +
    "\uffad\012\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad" +
    "\023\uffad\024\uffad\025\uffad\050\uffad\052\uffad\054\uffad\067" +
    "\uffad\071\uffad\001\002\000\052\004\uff9a\005\uff9a\006\uff9a" +
    "\007\uff9a\010\uff9a\011\uff9a\012\uff9a\016\uff9a\017\uff9a\020" +
    "\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\050\uff9a" +
    "\052\uff9a\054\uff9a\067\uff9a\071\uff9a\001\002\000\004\053" +
    "\013\001\002\000\004\062\146\001\002\000\004\047\147" +
    "\001\002\000\036\013\072\014\050\015\047\026\046\035" +
    "\035\036\016\037\056\040\030\041\052\045\034\046\031" +
    "\047\015\065\017\066\027\001\002\000\042\004\102\005" +
    "\113\006\110\007\106\010\114\011\104\012\111\016\105" +
    "\017\112\020\100\021\103\022\077\023\101\024\107\025" +
    "\115\050\151\001\002\000\004\067\uffd1\001\002\000\056" +
    "\003\uffdc\013\uffdc\014\uffdc\015\uffdc\026\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\054\uffdc\055\uffdc\060\uffdc\061\uffdc\063\uffdc\064\uffdc\065" +
    "\uffdc\066\uffdc\074\uffdc\001\002\000\006\013\154\074\032" +
    "\001\002\000\006\051\067\070\177\001\002\000\004\067" +
    "\uffd0\001\002\000\004\070\157\001\002\000\040\013\072" +
    "\014\050\015\047\026\046\035\035\036\016\037\056\040" +
    "\030\041\052\045\034\046\031\047\015\053\162\065\017" +
    "\066\027\001\002\000\004\067\uffb9\001\002\000\042\004" +
    "\102\005\113\006\110\007\106\010\114\011\104\012\111" +
    "\016\105\017\112\020\100\021\103\022\077\023\101\024" +
    "\107\025\115\067\uffba\001\002\000\036\013\072\014\050" +
    "\015\047\026\046\035\035\036\016\037\056\040\030\041" +
    "\052\045\034\046\031\047\015\065\017\066\027\001\002" +
    "\000\006\054\164\071\135\001\002\000\004\067\uffaf\001" +
    "\002\000\004\067\166\001\002\000\036\013\072\014\050" +
    "\015\047\026\046\035\035\036\016\037\056\040\030\041" +
    "\052\045\034\046\031\047\015\065\017\066\027\001\002" +
    "\000\042\004\102\005\113\006\110\007\106\010\114\011" +
    "\104\012\111\016\105\017\112\020\100\021\103\022\077" +
    "\023\101\024\107\025\115\067\uffcf\001\002\000\004\067" +
    "\171\001\002\000\036\013\uffce\014\uffce\015\uffce\026\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\045\uffce\046" +
    "\uffce\047\uffce\065\uffce\066\uffce\001\002\000\036\013\072" +
    "\014\050\015\047\026\046\035\035\036\016\037\056\040" +
    "\030\041\052\045\034\046\031\047\015\065\017\066\027" +
    "\001\002\000\042\004\102\005\113\006\110\007\106\010" +
    "\114\011\104\012\111\016\105\017\112\020\100\021\103" +
    "\022\077\023\101\024\107\025\115\050\uffcd\001\002\000" +
    "\004\050\175\001\002\000\004\053\013\001\002\000\004" +
    "\067\uffcc\001\002\000\036\013\072\014\050\015\047\026" +
    "\046\035\035\036\016\037\056\040\030\041\052\045\034" +
    "\046\031\047\015\065\017\066\027\001\002\000\042\004" +
    "\102\005\113\006\110\007\106\010\114\011\104\012\111" +
    "\016\105\017\112\020\100\021\103\022\077\023\101\024" +
    "\107\025\115\067\uffbb\001\002\000\056\003\uffdf\013\uffdf" +
    "\014\uffdf\015\uffdf\026\uffdf\035\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\041\uffdf\045\uffdf\046\uffdf\047\uffdf\054\uffdf\055\uffdf" +
    "\060\uffdf\061\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\074" +
    "\uffdf\001\002\000\056\003\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\026\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\045" +
    "\uffdd\046\uffdd\047\uffdd\054\uffdd\055\uffdd\060\uffdd\061\uffdd" +
    "\063\uffdd\064\uffdd\065\uffdd\066\uffdd\074\uffdd\001\002\000" +
    "\020\002\uffe5\003\uffe5\056\uffe5\057\uffe5\062\uffe5\067\uffe5" +
    "\073\uffe5\001\002\000\056\003\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\026\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\045\uffc0\046\uffc0\047\uffc0\054\uffc0\055\uffc0\060\uffc0\061" +
    "\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\074\uffc0\001\002" +
    "\000\004\067\206\001\002\000\056\003\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\026\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9" +
    "\041\uffd9\045\uffd9\046\uffd9\047\uffd9\054\uffd9\055\uffd9\060" +
    "\uffd9\061\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\074\uffd9" +
    "\001\002\000\020\002\uffe3\003\uffe3\056\uffe3\057\uffe3\062" +
    "\uffe3\067\uffe3\073\uffe3\001\002\000\004\013\ufffc\001\002" +
    "\000\004\013\uffff\001\002\000\004\013\ufffe\001\002\000" +
    "\004\013\ufffb\001\002\000\004\013\217\001\002\000\004" +
    "\013\ufffd\001\002\000\004\013\ufffa\001\002\000\010\051" +
    "\067\067\uffbf\070\223\001\002\000\006\067\uffbd\070\221" +
    "\001\002\000\004\053\162\001\002\000\004\067\uffbc\001" +
    "\002\000\036\013\072\014\050\015\047\026\046\035\035" +
    "\036\016\037\056\040\030\041\052\045\034\046\031\047" +
    "\015\065\017\066\027\001\002\000\042\004\102\005\113" +
    "\006\110\007\106\010\114\011\104\012\111\016\105\017" +
    "\112\020\100\021\103\022\077\023\101\024\107\025\115" +
    "\067\uffbe\001\002\000\040\013\072\014\050\015\047\026" +
    "\046\035\035\036\016\037\056\040\030\041\052\045\034" +
    "\046\031\047\015\050\227\065\017\066\027\001\002\000" +
    "\006\050\230\071\135\001\002\000\052\004\uffd3\005\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\016\uffd3\017" +
    "\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\050\uffd3\052\uffd3\054\uffd3\067\uffd3\071\uffd3\001\002\000" +
    "\052\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4" +
    "\012\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\050\uffd4\052\uffd4\054\uffd4\067\uffd4" +
    "\071\uffd4\001\002\000\036\013\072\014\050\015\047\026" +
    "\046\035\035\036\016\037\056\040\030\041\052\045\034" +
    "\046\031\047\015\065\017\066\027\001\002\000\042\004" +
    "\102\005\113\006\110\007\106\010\114\011\104\012\111" +
    "\016\105\017\112\020\100\021\103\022\077\023\101\024" +
    "\107\025\115\050\233\001\002\000\004\053\uffcb\001\002" +
    "\000\004\053\013\001\002\000\010\056\237\057\240\067" +
    "\uffc9\001\002\000\010\056\237\057\240\067\uffc9\001\002" +
    "\000\004\047\244\001\002\000\004\053\013\001\002\000" +
    "\004\067\uffca\001\002\000\004\067\uffc8\001\002\000\004" +
    "\067\uffc2\001\002\000\036\013\072\014\050\015\047\026" +
    "\046\035\035\036\016\037\056\040\030\041\052\045\034" +
    "\046\031\047\015\065\017\066\027\001\002\000\042\004" +
    "\102\005\113\006\110\007\106\010\114\011\104\012\111" +
    "\016\105\017\112\020\100\021\103\022\077\023\101\024" +
    "\107\025\115\050\246\001\002\000\004\053\uffc4\001\002" +
    "\000\004\053\013\001\002\000\010\056\uffc3\057\uffc3\067" +
    "\uffc3\001\002\000\004\067\uffc7\001\002\000\040\013\072" +
    "\014\050\015\047\026\046\035\035\036\016\037\056\040" +
    "\030\041\052\045\034\046\031\047\015\050\254\065\017" +
    "\066\027\001\002\000\006\050\255\071\135\001\002\000" +
    "\052\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5" +
    "\012\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\050\uffd5\052\uffd5\054\uffd5\067\uffd5" +
    "\071\uffd5\001\002\000\052\004\uffd6\005\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\011\uffd6\012\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\050\uffd6\052" +
    "\uffd6\054\uffd6\067\uffd6\071\uffd6\001\002\000\042\004\102" +
    "\005\113\006\110\007\106\010\114\011\104\012\111\016" +
    "\105\017\112\020\100\021\103\022\077\023\101\024\107" +
    "\025\115\050\257\001\002\000\052\004\uffb5\005\uffb5\006" +
    "\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\016\uffb5\017\uffb5" +
    "\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\050" +
    "\uffb5\052\uffb5\054\uffb5\067\uffb5\071\uffb5\001\002\000\042" +
    "\004\102\005\113\006\110\007\106\010\114\011\104\012" +
    "\111\016\105\017\112\020\100\021\103\022\077\023\101" +
    "\024\107\025\115\067\uffe2\001\002\000\010\002\uffef\003" +
    "\uffef\073\uffef\001\002\000\004\053\013\001\002\000\010" +
    "\002\uffed\003\uffed\073\uffed\001\002\000\004\013\270\001" +
    "\002\000\004\047\266\001\002\000\004\050\267\001\002" +
    "\000\004\053\uffec\001\002\000\004\047\271\001\002\000" +
    "\020\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\050\273\001\002\000\016\027\211\030\212\031\215\032" +
    "\210\033\213\034\216\001\002\000\004\053\uffeb\001\002" +
    "\000\006\050\uffe8\071\uffe8\001\002\000\006\050\301\071" +
    "\300\001\002\000\004\013\277\001\002\000\006\050\uffe6" +
    "\071\uffe6\001\002\000\016\027\211\030\212\031\215\032" +
    "\210\033\213\034\216\001\002\000\004\053\uffe9\001\002" +
    "\000\006\050\uffe7\071\uffe7\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\012\002\003\006\006\007\007\010\010\001" +
    "\001\000\002\001\001\000\004\003\263\001\001\000\004" +
    "\010\261\001\001\000\006\007\260\010\010\001\001\000" +
    "\002\001\001\000\004\011\011\001\001\000\002\001\001" +
    "\000\040\004\022\014\037\015\024\016\057\017\040\020" +
    "\050\021\043\022\052\023\053\030\041\031\035\033\054" +
    "\034\017\035\025\036\032\001\001\000\022\004\022\022" +
    "\052\030\257\031\067\033\054\034\017\035\025\036\032" +
    "\001\001\000\022\004\022\022\052\030\255\031\067\033" +
    "\054\034\017\035\025\036\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\022\015\203\016\057" +
    "\017\040\020\050\021\043\022\052\023\053\030\041\031" +
    "\035\033\054\034\017\035\025\036\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\143\001\001\000\022\004\022\022\052" +
    "\030\142\031\067\033\054\034\017\035\025\036\032\001" +
    "\001\000\004\031\141\001\001\000\004\031\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\022\022\052\030\070\031" +
    "\067\033\054\034\017\035\025\036\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\022\005\073\022\052\030\074\031\067\033\054\034\017" +
    "\035\025\036\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\022\022\052\030\133" +
    "\031\067\033\054\034\017\035\025\036\032\001\001\000" +
    "\022\004\022\022\052\030\132\031\067\033\054\034\017" +
    "\035\025\036\032\001\001\000\022\004\022\022\052\030" +
    "\131\031\067\033\054\034\017\035\025\036\032\001\001" +
    "\000\022\004\022\022\052\030\130\031\067\033\054\034" +
    "\017\035\025\036\032\001\001\000\022\004\022\022\052" +
    "\030\127\031\067\033\054\034\017\035\025\036\032\001" +
    "\001\000\022\004\022\022\052\030\126\031\067\033\054" +
    "\034\017\035\025\036\032\001\001\000\022\004\022\022" +
    "\052\030\125\031\067\033\054\034\017\035\025\036\032" +
    "\001\001\000\022\004\022\022\052\030\124\031\067\033" +
    "\054\034\017\035\025\036\032\001\001\000\022\004\022" +
    "\022\052\030\123\031\067\033\054\034\017\035\025\036" +
    "\032\001\001\000\022\004\022\022\052\030\122\031\067" +
    "\033\054\034\017\035\025\036\032\001\001\000\022\004" +
    "\022\022\052\030\121\031\067\033\054\034\017\035\025" +
    "\036\032\001\001\000\022\004\022\022\052\030\120\031" +
    "\067\033\054\034\017\035\025\036\032\001\001\000\022" +
    "\004\022\022\052\030\117\031\067\033\054\034\017\035" +
    "\025\036\032\001\001\000\022\004\022\022\052\030\116" +
    "\031\067\033\054\034\017\035\025\036\032\001\001\000" +
    "\022\004\022\022\052\030\115\031\067\033\054\034\017" +
    "\035\025\036\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\022\022\052\030\136\031\067\033\054" +
    "\034\017\035\025\036\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\022\022\052" +
    "\030\147\031\067\033\054\034\017\035\025\036\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\154\031\155\001\001\000\002\001\001\000" +
    "\004\041\164\001\001\000\002\001\001\000\024\004\022" +
    "\022\052\030\160\031\067\032\157\033\054\034\017\035" +
    "\025\036\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\004\022\005\162\022\052\030\074\031\067\033" +
    "\054\034\017\035\025\036\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\022\022" +
    "\052\030\166\031\067\033\054\034\017\035\025\036\032" +
    "\001\001\000\004\042\167\001\001\000\002\001\001\000" +
    "\004\043\171\001\001\000\022\004\022\022\052\030\172" +
    "\031\067\033\054\034\017\035\025\036\032\001\001\000" +
    "\004\044\173\001\001\000\002\001\001\000\004\011\175" +
    "\001\001\000\002\001\001\000\022\004\022\022\052\030" +
    "\177\031\067\033\054\034\017\035\025\036\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\221\001\001\000\002" +
    "\001\001\000\022\004\022\022\052\030\223\031\067\033" +
    "\054\034\017\035\025\036\032\001\001\000\002\001\001" +
    "\000\024\004\022\005\225\022\052\030\074\031\067\033" +
    "\054\034\017\035\025\036\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\022\022" +
    "\052\030\231\031\067\033\054\034\017\035\025\036\032" +
    "\001\001\000\002\001\001\000\004\045\233\001\001\000" +
    "\004\011\234\001\001\000\010\024\235\026\241\027\240" +
    "\001\001\000\010\024\235\026\241\027\250\001\001\000" +
    "\002\001\001\000\004\011\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\022\022" +
    "\052\030\244\031\067\033\054\034\017\035\025\036\032" +
    "\001\001\000\002\001\001\000\004\046\246\001\001\000" +
    "\004\011\247\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\004\022\005\252\022\052\030\074\031\067\033" +
    "\054\034\017\035\025\036\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\271\001\001\000\010\003\275\012" +
    "\274\013\273\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\275\013\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }



  // https://www2.cs.tum.edu/projects/cup/docs.php#errors:~:text=4.%20Customizing%20the%20Parser

  Lexer lex;
  StringBuilder dataSegment = new StringBuilder();
  StringBuilder mainSegment = new StringBuilder();

  public parser(Lexer lex) {
    this.lex = lex;
    this.symbolFactory = new DefaultSymbolFactory();
  }

  // Se tiene que hacer un override a los metodos para atrapar los errores
  // Esta llama a report_error("Syntax error", null); // creo que se puede hacer override de report_fatal_error

  //Tener en cuenta la sintaxis de los errores en la documentacion de CUP
  // La expresion de error se deja al final de cada produccion
  //Es diferente al ejemplo del profe, no es necesario tener que crear una expresion de error para cada produccion
  /*
  stmt ::= expr SEMI | while_stmt SEMI | if_stmt SEMI | ... |
	     error SEMI
	     ;
  */
  public void syntax_error(Symbol cur_token){
    if (cur_token.value == null) {
      System.err.println("Chimenea cerrada en linea " + cur_token.left + ", columna " + cur_token.right + ": " + cur_token.sym);
      return;
    } else {
      System.err.println("Chimenea cerrada en linea " + cur_token.left + ", columna " + cur_token.right + ": " + cur_token.sym + ", valor: " + cur_token.value);
      System.out.println("Buscando otra entrada...");
      return;
    }    
  } 

  // este llama a report_fatal_error("Couldn't repair and continue parse", null); // creo que se puede hacer override de report_fatal_error.
  public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
    if (cur_token.value == null) {
       throw new Exception("No se han entregado regalos en esta casa... " );
    } else {
      throw new Exception("Chimenea cerrada en linea " + cur_token.left + ", columna " + cur_token.right + ": " + cur_token.sym + ", valor: " + cur_token.value);
    }
   
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


      //Aritmeticos
     String S_SUMA = " + ";
     String S_RESTA = " - ";
     String S_MULTIPLICACION = " * ";
     String S_POWER = " ** ";
     String S_DIVISION_INT = " / ";
     String S_DIVISION_FLOAT = " // ";
     String S_MODULO = " ~ ";
     String S_INCREMENTAR = " ++ ";
     String S_DECREMENTAR = " -- ";

    // Logicos
    String S_DISJUNCION = " # ";
    String S_CONJUNCION = " ^ ";
    String S_NEGACION = " ! ";

    // Relacionales
    String S_MAYOR_QUE = " > ";
    String S_MENOR_QUE = " < ";
    String S_MAYOR_IGUAL_QUE = " ==> ";
    String S_MENOR_IGUAL_QUE = " ==< ";
    String S_IGUAL_QUE = " === ";
    String S_DIFERENTE_QUE = " !== ";
    
    // Constantes de arrays
    ArrayList<tipoPrimario> ARR_INT_FLOAT = new ArrayList<tipoPrimario>(Arrays.asList(tipoPrimario.INT, tipoPrimario.FLOAT));
    ArrayList<tipoPrimario> ARR_INT_FLOAT_BOOL = new ArrayList<tipoPrimario>(Arrays.asList(tipoPrimario.INT, tipoPrimario.FLOAT , tipoPrimario.BOOL));
    ArrayList<tipoPrimario> ARR_BOOL = new ArrayList<tipoPrimario>(Arrays.asList(tipoPrimario.BOOL)); 

  public void hola() {
    System.out.println("Hola");
  }
  public void adios() {
    System.out.println("Adios\n");
  }
  
  public void errorNavideno(String mensaje){
    System.err.println("Santa te ha traido un carbon semantico: "+mensaje);
  }
    HashMap<String, ArrayList<SymbolObject>> listaTablasSimbolos = new HashMap<String, ArrayList<SymbolObject>>();
    String currentHash = "";
    FabricarFuncion ultimaFuncion = null;
    HashMap<String, FabricarFuncion> fabricarFuncionMap = new HashMap<String, FabricarFuncion>();

    public void agregarFuncion(FabricarFuncion funcion) {
        fabricarFuncionMap.put(funcion.getNombre(), funcion);
        ultimaFuncion = funcion; 
    }

    public FabricarFuncion buscarFuncion(String nombreFuncion) {
        return fabricarFuncionMap.get(nombreFuncion);
    }


    public FabricarFuncion funcionActual() {
        return ultimaFuncion;
    }


    public tipoPrimario getTipo(String nombre, boolean esError) {
        for (SymbolObject value : listaTablasSimbolos.get(currentHash)) {
            if (value.getID().equals(nombre)) {
              return HerramientasFabrica.clasificarTipo(value.getTipo());
            }
        }
        if (esError){
          errorNavideno("Variable no declarada: " + nombre);
        }
        return tipoPrimario.NULL;
    }

    public tipoPrimario validarTipado(String operacion, FabricarExpresion expr1, FabricarExpresion expr2, ArrayList<tipoPrimario> tiposPermitidos) {
    if (tiposPermitidos.contains(expr1.getTipado()) && tiposPermitidos.contains(expr2.getTipado())) {
        if (expr1.getTipado() == expr2.getTipado()) {
            return expr1.getTipado();
        } else {
            errorNavideno("Tipos no compatibles en la operacion: " + operacion);
            return tipoPrimario.NULL;
        }
    } else {
      errorNavideno("Tipos no compatibles en la operacion: " + operacion);
        return tipoPrimario.NULL;
    }
}
    public tipoPrimario validarTipadoParaExpresiones(Object n, Object m, String operacion, ArrayList<tipoPrimario> tiposPermitidos) {
        FabricarExpresion expresionN = (FabricarExpresion)n;
        FabricarExpresion expresionM = (FabricarExpresion)m;
        return validarTipado(operacion, expresionN, expresionM, tiposPermitidos);
    }

    public void validarExpresionIf(Object expr) {
      FabricarExpresion expresion = (FabricarExpresion)expr;
      if (expresion.getTipado() != tipoPrimario.BOOL){
          errorNavideno("La expresion del no es booleana");
      }
      else{
          // Aquí puedes agregar el código que se ejecutará si la expresión es booleana
      }
    }

    public FabricarExpresion getMyResult(Object n, Object m, String operacion, tipoPrimario tipo){
      FabricarExpresion expresionN = (FabricarExpresion)n;
      FabricarExpresion expresionM = (FabricarExpresion)m;
      return new FabricarExpresion(expresionN.getValor().toString() + operacion + expresionM.getValor().toString(), tipo);
    }

    public void imprimirTablasSimbolos(){
      for (String key : listaTablasSimbolos.keySet()) {
        System.out.println("Tabla de simbolos: " + key);
        System.out.println("Variables: ");
        for (SymbolObject variable : listaTablasSimbolos.get(key)) {
          System.out.println(variable.toString());
        }
        System.out.println(" ");
      }
  }
    public void cambiarContexto(String nombreFuncion) {
        currentHash = nombreFuncion;
        listaTablasSimbolos.put(nombreFuncion, new ArrayList<SymbolObject>());
    }

    public void annadirSymbol(SymbolObject symbol) {
    listaTablasSimbolos.get(currentHash).add(symbol);
  }

public void exportarTablaSimbolosHTML() {
    List<String[]> data = new ArrayList<>();
    data.add(new String[]{"Tabla", "Tipo Entrada", "Nombre", "Tipo Dato"});

    for (Map.Entry<String, ArrayList<SymbolObject>> entry : listaTablasSimbolos.entrySet()) {
        for (SymbolObject value : entry.getValue()) {
            data.add(new String[]{entry.getKey(), value.getEntrada(), value.getID(), value.getTipo()});
        }
    }

    StringBuilder htmlBuilder = new StringBuilder();
    htmlBuilder.append("<html><head><title>Tabla de Símbolos</title>");
    htmlBuilder.append("<style>");
    htmlBuilder.append("@import url('https://fonts.googleapis.com/css?family=Roboto:400,700');");
    htmlBuilder.append("table { border-collapse: separate; width: 100%; box-shadow: 0 2px 3px rgba(0,0,0,0.1);");
    htmlBuilder.append("font-family: 'Roboto', sans-serif; color: #333; margin: 25px 0; border-spacing: 0; }");
    htmlBuilder.append("thead { background-color: #8A33FF; color: #FFF; }");
    htmlBuilder.append("th { font-weight: 700; padding: 12px 15px; text-align: left; }");
    htmlBuilder.append("td { border-top: 1px solid #DDD; padding: 12px 15px; text-align: left; }");
    htmlBuilder.append("tbody tr:nth-child(odd) { background-color: #F6F6F6; }");
    htmlBuilder.append("tbody tr:nth-child(even) { background-color: #E9E9E9; }");
    htmlBuilder.append("</style></head><body><table>");

    // Aquí añadimos la cabecera de la tabla
    htmlBuilder.append("<thead><tr>");
    for (String header : data.get(0)) {
        htmlBuilder.append("<th>").append(header).append("</th>");
    }
    htmlBuilder.append("</tr></thead><tbody>");

    // Luego el resto de los datos
    for (int i = 1; i < data.size(); i++) {
        String[] row = data.get(i);
        htmlBuilder.append("<tr>");
        for (String cell : row) {
            htmlBuilder.append("<td>").append(cell).append("</td>");
        }
        htmlBuilder.append("</tr>");
    }

    htmlBuilder.append("</tbody></table></body></html>");

    // Escribe el HTML en un archivo
    try (FileWriter writer = new FileWriter("src/test/java/com/navidad/tabla_simbolos.html")) {
        writer.write(htmlBuilder.toString());
    } catch (IOException e) {
        e.printStackTrace();
    }

    System.out.println("Tabla de símbolos exportada a tabla_simbolos.html");
}

  

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= NAVIDAD EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NAVIDAD ::= FUNCIONES_BOLSA_NAVIDENNA 
            {
              Object RESULT =null;
		
        hola();
        exportarTablaSimbolosHTML();
        imprimirTablasSimbolos();
        
        if (buscarFuncion("main") == null) {
          System.err.println("No se ha encontrado la funcion main");
        } 


        adios();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NAVIDAD",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // T_COPO ::= COLACHO_INT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // T_COPO ::= JOULUPUKKI_FLOAT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // T_COPO ::= PAPA_NOEL_BOOLEAN 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // T_COPO ::= CLAUS_CHAR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // T_COPO ::= SANTA_STRING 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // T_COPO ::= VIEJITO_PASCUERO_ARRAY 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_COPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // l_COPO ::= L_COLACHO_INT 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // l_COPO ::= L_JOULUPUKKI_FLOAT 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // l_COPO ::= L_CLAUS_CHAR 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // l_COPO ::= L_SANTA_STRING 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // l_COPO ::= L_VIEJITO_PASCUERO_ARRAY 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // l_COPO ::= PAPA_NOEL_TRUE 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // l_COPO ::= PAPA_NOEL_FALSE 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_COPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARG_COPO ::= EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG_COPO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARG_COPO ::= ARG_COPO SEPARADOR_BASTON EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG_COPO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCIONES_BOLSA_NAVIDENNA ::= FUNCION_REGALO 
            {
              Object RESULT =null;
		
        
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_BOLSA_NAVIDENNA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCIONES_BOLSA_NAVIDENNA ::= FUNCIONES_BOLSA_NAVIDENNA FUNCION_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_BOLSA_NAVIDENNA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCION_REGALO ::= DEF_JUGUETE CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION_REGALO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCION_REGALO ::= error DEF_JUGUETE CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION_REGALO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DEF_JUGUETE ::= FUNCTION_VILLANCICOS ESTRELLA_MAIN ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;
		int Funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object Fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              if (buscarFuncion("main") != null) {
                errorNavideno("Ya existe una funcion main");
              }
              else{
                cambiarContexto("main");
                RESULT = "main";
                annadirSymbol(new SymbolObject("function","int","main"));
                agregarFuncion(new FabricarFuncion("main", tipoPrimario.INT, true, new tipoPrimario[] {}));
              }
              
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF_JUGUETE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DEF_JUGUETE ::= FUNCTION_VILLANCICOS T_COPO PERSONA ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;
		int Funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object Fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object Tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                String tipoEvaluado = Tipo.toString();
                if (tipoEvaluado!="char" && tipoEvaluado!="int" && tipoEvaluado!="float" && tipoEvaluado!="bool") {
                  errorNavideno("Tipo no válido: " + tipoEvaluado);
                } else {

                    if (buscarFuncion(id.toString()) != null) {
                        errorNavideno("Ya existe una funcion con el nombre: " + id.toString());
                    } else {
                        cambiarContexto(id.toString());
                        RESULT = id.toString();
                        annadirSymbol(new SymbolObject("function",Tipo.toString(), id.toString()));
                        agregarFuncion(new FabricarFuncion(id.toString(), HerramientasFabrica.clasificarTipo(Tipo.toString()), false, new tipoPrimario[] {}));
                    }
                }

              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF_JUGUETE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$0 ::= 
            {
              Object RESULT =null;
		int Funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object Fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object Tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                String tipoEvaluado = Tipo.toString();
                if (tipoEvaluado!="char" && tipoEvaluado!="int" && tipoEvaluado!="float" && tipoEvaluado!="bool") {
                  errorNavideno("Tipo no válido: " + tipoEvaluado);
                } else {

                    if (buscarFuncion(id.toString()) != null) {
                        errorNavideno("Ya existe una funcion con el nombre: " + id.toString());
                    } else {
                        cambiarContexto(id.toString());
                        RESULT = id.toString();
                        annadirSymbol(new SymbolObject("function",Tipo.toString(), id.toString()));
                        agregarFuncion(new FabricarFuncion(id.toString(), HerramientasFabrica.clasificarTipo(Tipo.toString()), false, new tipoPrimario[] {}));
                    }
                }
              cambiarContexto(id.toString());
              annadirSymbol(new SymbolObject("function",Tipo.toString(), id.toString()));
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEF_JUGUETE ::= FUNCTION_VILLANCICOS T_COPO PERSONA ABRE_CUENTO NT$0 PARAMETROS_PALETAS CIERRE_CUENTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int Funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object Fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int Tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object Tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF_JUGUETE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMETROS_PALETAS ::= PARAMETRO_PALETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PALETAS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMETROS_PALETAS ::= PARAMETROS_PALETAS SEPARADOR_BASTON PARAMETRO_PALETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PALETAS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMETRO_PALETA ::= T_COPO PERSONA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                annadirSymbol(new SymbolObject("param",tipo.toString(), id.toString()));
                // 
                funcionActual().agregarTipoParametro(HerramientasFabrica.clasificarTipo(tipo.toString()));
                agregarFuncion(funcionActual());
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_PALETA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CODIGO_ENVOLTURA ::= ABRE_REGALO LINEAS_LAZOS CIERRA_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO_ENVOLTURA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CODIGO_ENVOLTURA ::= ABRE_REGALO CIERRA_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO_ENVOLTURA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CODIGO_ENVOLTURA ::= ABRE_REGALO error CIERRA_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO_ENVOLTURA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RETORNO_BURRITO_SABANERO ::= ENVIA_RETURN EXPRESION_BOTA 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            tipoPrimario tipo = ((FabricarExpresion)expr).getTipado();
                            tipoPrimario retorno = funcionActual().getTipado(); 
                            if (retorno != tipo){
                              errorNavideno("El tipo de retorno no coincide con el tipo de la funcion en la linea ");
                            }
                            else{
                              funcionActual().setRetorna(true);
                              agregarFuncion(funcionActual());
                            }
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO_BURRITO_SABANERO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RETORNO_BURRITO_SABANERO ::= ENVIA_RETURN 
            {
              Object RESULT =null;
		

                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO_BURRITO_SABANERO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LINEA_LAZO ::= ASIGNACION_GORRO FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LINEA_LAZO ::= EXPRESION_BOTA FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LINEA_LAZO ::= CORTA_BREAK FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LINEA_LAZO ::= RETORNO_BURRITO_SABANERO FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LINEA_LAZO ::= FOR_FANTASMA_PRESENTE FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LINEA_LAZO ::= DO_UNTIL_FANTASMA_PASADO FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LINEA_LAZO ::= IF_JUANITO_ESCARCHA FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LINEA_LAZO ::= error FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA_LAZO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CALL_FUNCTION_FANTASMA_FUTURO ::= PERSONA ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CALL_FUNCTION_FANTASMA_FUTURO ::= PERSONA ABRE_CUENTO ARG_COPO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CALL_FUNCTION_FANTASMA_FUTURO ::= NARRA_PRINT ABRE_CUENTO ARG_COPO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CALL_FUNCTION_FANTASMA_FUTURO ::= NARRA_PRINT ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CALL_FUNCTION_FANTASMA_FUTURO ::= ESCUCHA_READ ABRE_CUENTO ARG_COPO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CALL_FUNCTION_FANTASMA_FUTURO ::= ESCUCHA_READ ABRE_CUENTO CIERRE_CUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION_FANTASMA_FUTURO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$1 ::= 
            {
              Object RESULT =null;


                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DO_UNTIL_FANTASMA_PASADO ::= HACE_DO NT$1 CODIGO_ENVOLTURA REVISA_UNTIL ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                      FabricarExpresion expresion = (FabricarExpresion)expr;
                      
                      if (expresion.getTipado() == tipoPrimario.NULL ||  !ARR_INT_FLOAT_BOOL.contains(expresion.getTipado())){
                        errorNavideno("La expresion del do-Until no es booleana");
                      }
                      else{
                        
                      }
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_UNTIL_FANTASMA_PASADO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$2 ::= 
            {
              Object RESULT =null;

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                        FabricarExpresion expresion = (FabricarExpresion)expr;
                      if (expresion.getTipado() == tipoPrimario.NULL ||  !ARR_INT_FLOAT_BOOL.contains(expresion.getTipado())){
                        errorNavideno("La expresion del do-Until no es booleana");
                      }
                      else{
                        
                      }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;


                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cicloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cicloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ciclo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                        
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FOR_FANTASMA_PRESENTE ::= ENVUELVE_FOR ABRE_CUENTO ASIGNACION_GORRO NT$2 FIN_REGALO EXPRESION_BOTA NT$3 FIN_REGALO NT$4 EXPRESION_BOTA NT$5 CIERRE_CUENTO CODIGO_ENVOLTURA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cicloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cicloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ciclo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR_FANTASMA_PRESENTE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$6 ::= 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                      FabricarExpresion expresion = (FabricarExpresion)expr;

                      if (expresion.getTipado() == tipoPrimario.NULL ||  !ARR_INT_FLOAT_BOOL.contains(expresion.getTipado())){
                        errorNavideno("La expresion del do-Until no es booleana");
                      }
                      else{
                        
                      }
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IF_JUANITO_ESCARCHA ::= ELFO_IF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO NT$6 CODIGO_ENVOLTURA OPT_ELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_JUANITO_ESCARCHA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPT_ELSE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPT_ELSE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPT_ELSE ::= ELSE_SCROOGE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPT_ELSE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPT_ELSE ::= ELIF_BATMAN OPT_ELSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPT_ELSE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ELIF_MULTI_JACK_FROST ::= ELIF_BATMAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIF_MULTI_JACK_FROST",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ELIF_MULTI_JACK_FROST ::= ELIF_BATMAN ELIF_MULTI_JACK_FROST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIF_MULTI_JACK_FROST",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$7 ::= 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              FabricarExpresion expresion = (FabricarExpresion)expr;
              if (expresion.getTipado() != tipoPrimario.BOOL){
                errorNavideno("La expresion del elif no es booleana");
              }
              else{
                
              }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ELIF_BATMAN ::= HADA_ELIF ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO NT$7 CODIGO_ENVOLTURA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIF_BATMAN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ELSE_SCROOGE ::= DUENDE_ELSE CODIGO_ENVOLTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_SCROOGE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LINEAS_LAZOS ::= LINEA_LAZO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEAS_LAZOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LINEAS_LAZOS ::= LINEAS_LAZOS LINEA_LAZO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEAS_LAZOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO PERSONA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    annadirSymbol(new SymbolObject("local",tipo.toString(), id.toString()));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO PERSONA ENTREGA EXPRESION_BOTA 
            {
              Object RESULT =null;
		int localleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int localright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object local = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    annadirSymbol(new SymbolObject("local",tipo.toString(), id.toString()));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO ELEMENTO_ARRAY_DULCE 
            {
              Object RESULT =null;
		int localleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int localright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object local = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elem_arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elem_arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elem_array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    annadirSymbol(new SymbolObject("local",tipo.toString()+" arr", elem_array.toString()));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASIGNACION_GORRO ::= LOCAL_MUERDAGO T_COPO ELEMENTO_ARRAY_DULCE ENTREGA l_ARRAY_TAMAL 
            {
              Object RESULT =null;
		int localleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int localright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object local = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elem_arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elem_arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object elem_array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    annadirSymbol(new SymbolObject("local",tipo.toString()+" arr", elem_array.toString()));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ASIGNACION_GORRO ::= PERSONA ENTREGA EXPRESION_BOTA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ASIGNACION_GORRO ::= ELEMENTO_ARRAY_DULCE ENTREGA EXPRESION_BOTA 
            {
              Object RESULT =null;
		int elem_arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elem_arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object elem_array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ASIGNACION_GORRO ::= ELEMENTO_ARRAY_DULCE ENTREGA l_ARRAY_TAMAL 
            {
              Object RESULT =null;
		int elem_arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elem_arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object elem_array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GORRO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION_BOTA ::= l_COPO 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = lit;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION_BOTA ::= PERSONA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if(getTipo(id.toString(), true) != tipoPrimario.NULL){
                      RESULT = new FabricarExpresion(id.toString(), getTipo(id.toString(), true), "PROBANDO");
                    }
                    else{
                      RESULT = new FabricarExpresion("null", tipoPrimario.NULL);
                    }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION_BOTA ::= ELEMENTO_ARRAY_DULCE 
            {
              Object RESULT =null;
		int elementoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elementoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elemento = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = elemento;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION_BOTA ::= ABRE_CUENTO EXPRESION_BOTA CIERRE_CUENTO 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = expr;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION_BOTA ::= CALL_FUNCTION_FANTASMA_FUTURO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION_BOTA ::= EXPRESION_ARIT_REGALOPRIN 
            {
              Object RESULT =null;
		int expresion_aritmeticaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion_aritmeticaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expresion_aritmetica = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = expresion_aritmetica;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION_BOTA ::= EXPRESION_REL_REGALO_COMPRADO 
            {
              Object RESULT =null;
		int expresion_relacionalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion_relacionalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expresion_relacional = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = expresion_relacional;  
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION_BOTA ::= EXPRESION_LOG_REGALO_MANUAL 
            {
              Object RESULT =null;
		int expresion_logicaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion_logicaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expresion_logica = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = expresion_logica;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOTA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ELEMENTO_ARRAY_DULCE ::= PERSONA ABRE_EMPAQUE EXPRESION_BOTA CIERRA_EMPAQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    RESULT = id.toString();
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ARRAY_DULCE",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // l_ARRAY_TAMAL ::= ABRE_REGALO ARG_COPO CIERRA_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_ARRAY_TAMAL",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ARRAY_OPERATION_CASCABEL ::= GRINCH_DECREMENT ELEMENTO_ARRAY_DULCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_OPERATION_CASCABEL",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ARRAY_OPERATION_CASCABEL ::= QUIEN_INCREMENT ELEMENTO_ARRAY_DULCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_OPERATION_CASCABEL",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA RODOLFO_SUM EXPRESION_BOTA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_SUMA, ARR_INT_FLOAT);
                          RESULT = getMyResult(n, m, S_SUMA, tipo_res);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA TRUENO_DECREASE EXPRESION_BOTA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_RESTA, ARR_INT_FLOAT);
                          RESULT = getMyResult(n, m, S_RESTA, tipo_res);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA RELAMPAGO_INT_DIVISION EXPRESION_BOTA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_DIVISION_INT, ARR_INT_FLOAT);
                          RESULT = getMyResult(n, m, S_DIVISION_INT, tipo_res);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA RAYO_FLOAT_DIVISION EXPRESION_BOTA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_DIVISION_FLOAT, ARR_INT_FLOAT);
                          RESULT = getMyResult(n, m, S_DIVISION_FLOAT, tipo_res);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA SALTARIN_ELEVATE EXPRESION_BOTA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_POWER, ARR_INT_FLOAT);
                          RESULT = getMyResult(n, m, S_POWER, tipo_res);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA COMETA_PRODUCT EXPRESION_BOTA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_MULTIPLICACION, ARR_INT_FLOAT);
                          RESULT = getMyResult(n, m, S_MULTIPLICACION, tipo_res);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION_ARIT_REGALOPRIN ::= EXPRESION_BOTA CUPIDO_MODULE EXPRESION_BOTA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_MODULO, ARR_INT_FLOAT);
                          RESULT = getMyResult(n, m, S_MODULO, tipo_res);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION_ARIT_REGALOPRIN ::= GRINCH_DECREMENT PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION_ARIT_REGALOPRIN ::= QUIEN_INCREMENT PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION_ARIT_REGALOPRIN ::= ARRAY_OPERATION_CASCABEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARIT_REGALOPRIN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_GREATER EXPRESION_BOTA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_MAYOR_QUE, ARR_INT_FLOAT_BOOL);
                          RESULT = getMyResult(n, m, S_MAYOR_QUE, tipo_res);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_LESS EXPRESION_BOTA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_MENOR_QUE, ARR_INT_FLOAT_BOOL);
                          RESULT = getMyResult(n, m, S_MENOR_QUE, tipo_res);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_IGUAL_QUE, ARR_INT_FLOAT_BOOL);
                          RESULT = getMyResult(n, m, S_IGUAL_QUE, tipo_res);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_NOT_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_DIFERENTE_QUE, ARR_INT_FLOAT_BOOL);
                          RESULT = getMyResult(n, m, S_DIFERENTE_QUE, tipo_res);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_GREATER_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_MAYOR_IGUAL_QUE, ARR_INT_FLOAT_BOOL);
                          RESULT = getMyResult(n, m, S_MAYOR_IGUAL_QUE, tipo_res);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION_REL_REGALO_COMPRADO ::= EXPRESION_BOTA ELFO_LESS_EQUAL EXPRESION_BOTA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_MENOR_IGUAL_QUE, ARR_INT_FLOAT_BOOL);
                          RESULT = getMyResult(n, m, S_MENOR_IGUAL_QUE, tipo_res);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REL_REGALO_COMPRADO",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION_LOG_REGALO_MANUAL ::= EXPRESION_BOTA REY_MELCHOR_COJUNCTION EXPRESION_BOTA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_CONJUNCION, ARR_BOOL);
                          RESULT = getMyResult(n, m, S_CONJUNCION, tipo_res);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOG_REGALO_MANUAL",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION_LOG_REGALO_MANUAL ::= EXPRESION_BOTA REY_GASPAR_DISJUNCTION EXPRESION_BOTA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          tipoPrimario tipo_res = validarTipadoParaExpresiones(n, m, S_DISJUNCION, ARR_BOOL);
                          RESULT = getMyResult(n, m, S_DISJUNCION, tipo_res);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOG_REGALO_MANUAL",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION_LOG_REGALO_MANUAL ::= REY_BALTASAR_NOT EXPRESION_BOTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOG_REGALO_MANUAL",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
